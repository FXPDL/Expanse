

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Jun 21 23:32:59 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK5,global,class=CODE,delta=2
     8                           	psect	idataBANK7,global,class=CODE,delta=2
     9                           	psect	idataBANK8,global,class=CODE,delta=2
    10                           	psect	idataBANK9,global,class=CODE,delta=2
    11                           	psect	idataBANK10,global,class=CODE,delta=2
    12                           	psect	idataBANK11,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	stringtext,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    25                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    26                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    27                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    28                           	psect	dataBANK9,global,class=BANK9,space=1,delta=1
    29                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    30                           	psect	dataBANK11,global,class=BANK11,space=1,delta=1
    31                           	psect	clrtext,global,class=CODE,delta=2
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    34                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    37                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2
    39                           	psect	text2,local,class=CODE,merge=1,delta=2
    40                           	psect	text3,local,class=CODE,merge=1,delta=2
    41                           	psect	text4,local,class=CODE,merge=1,delta=2
    42                           	psect	text5,local,class=CODE,merge=1,delta=2
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2
    47                           	psect	text10,local,class=CODE,merge=1,delta=2
    48                           	psect	text11,local,class=CODE,merge=1,delta=2
    49                           	psect	text12,local,class=CODE,merge=1,delta=2
    50                           	psect	text13,local,class=CODE,merge=1,delta=2
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2
    58                           	psect	text21,local,class=CODE,merge=1,delta=2
    59                           	psect	text22,local,class=CODE,merge=1,delta=2
    60                           	psect	text23,local,class=CODE,merge=1,delta=2
    61                           	psect	text24,local,class=CODE,merge=1,delta=2
    62                           	psect	text25,local,class=CODE,merge=1,delta=2
    63                           	psect	text26,local,class=CODE,merge=1,delta=2
    64                           	psect	text27,local,class=CODE,merge=1,delta=2
    65                           	psect	text28,local,class=CODE,merge=1,delta=2
    66                           	psect	text29,local,class=CODE,merge=1,delta=2
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	text32,local,class=CODE,merge=1,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text39,local,class=CODE,merge=1,delta=2
    77                           	psect	maintext_split_1,global,class=CODE,merge=1,split=1,delta=2
    78                           	psect	maintext_split_2,global,class=CODE,merge=1,split=1,delta=2
    79                           	dabs	1,0x920,80
    80                           	dabs	1,0x8A0,80
    81                           	dabs	1,0x820,80
    82                           	dabs	1,0x7A0,80
    83                           	dabs	1,0x720,80
    84                           	dabs	1,0x6A0,80
    85                           	dabs	1,0x652,30
    86                           	dabs	1,0x23F2,0,_delay
    87                           	dabs	1,0x7E,2
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  0008                     	;# 
    97  0009                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000D                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0013                     	;# 
   108  0014                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0094                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0110                     	;# 
   142  0116                     	;# 
   143  0117                     	;# 
   144  011D                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  018F                     	;# 
   148  0190                     	;# 
   149  0191                     	;# 
   150  0191                     	;# 
   151  0192                     	;# 
   152  0193                     	;# 
   153  0193                     	;# 
   154  0194                     	;# 
   155  0195                     	;# 
   156  0196                     	;# 
   157  0197                     	;# 
   158  0199                     	;# 
   159  0199                     	;# 
   160  0199                     	;# 
   161  019A                     	;# 
   162  019A                     	;# 
   163  019A                     	;# 
   164  019B                     	;# 
   165  019B                     	;# 
   166  019B                     	;# 
   167  019B                     	;# 
   168  019B                     	;# 
   169  019C                     	;# 
   170  019C                     	;# 
   171  019C                     	;# 
   172  019D                     	;# 
   173  019D                     	;# 
   174  019D                     	;# 
   175  019E                     	;# 
   176  019E                     	;# 
   177  019E                     	;# 
   178  019F                     	;# 
   179  019F                     	;# 
   180  019F                     	;# 
   181  020D                     	;# 
   182  020F                     	;# 
   183  0210                     	;# 
   184  0211                     	;# 
   185  0211                     	;# 
   186  0212                     	;# 
   187  0212                     	;# 
   188  0213                     	;# 
   189  0213                     	;# 
   190  0214                     	;# 
   191  0214                     	;# 
   192  0215                     	;# 
   193  0215                     	;# 
   194  0215                     	;# 
   195  0216                     	;# 
   196  0216                     	;# 
   197  0217                     	;# 
   198  0217                     	;# 
   199  0219                     	;# 
   200  021A                     	;# 
   201  021B                     	;# 
   202  021C                     	;# 
   203  021D                     	;# 
   204  021E                     	;# 
   205  021F                     	;# 
   206  028C                     	;# 
   207  028D                     	;# 
   208  0291                     	;# 
   209  0291                     	;# 
   210  0292                     	;# 
   211  0293                     	;# 
   212  0298                     	;# 
   213  0298                     	;# 
   214  0299                     	;# 
   215  029A                     	;# 
   216  029D                     	;# 
   217  029E                     	;# 
   218  029F                     	;# 
   219  030C                     	;# 
   220  030D                     	;# 
   221  0311                     	;# 
   222  0311                     	;# 
   223  0312                     	;# 
   224  0313                     	;# 
   225  0318                     	;# 
   226  0318                     	;# 
   227  0319                     	;# 
   228  031A                     	;# 
   229  031C                     	;# 
   230  031C                     	;# 
   231  031D                     	;# 
   232  031E                     	;# 
   233  038C                     	;# 
   234  038D                     	;# 
   235  0394                     	;# 
   236  0395                     	;# 
   237  0396                     	;# 
   238  040C                     	;# 
   239  040D                     	;# 
   240  0411                     	;# 
   241  0411                     	;# 
   242  0412                     	;# 
   243  0413                     	;# 
   244  0414                     	;# 
   245  0415                     	;# 
   246  0416                     	;# 
   247  0417                     	;# 
   248  0418                     	;# 
   249  0418                     	;# 
   250  0419                     	;# 
   251  041A                     	;# 
   252  041B                     	;# 
   253  041C                     	;# 
   254  041D                     	;# 
   255  041E                     	;# 
   256  048D                     	;# 
   257  0491                     	;# 
   258  0491                     	;# 
   259  0492                     	;# 
   260  0492                     	;# 
   261  0493                     	;# 
   262  0493                     	;# 
   263  0493                     	;# 
   264  0494                     	;# 
   265  0494                     	;# 
   266  0495                     	;# 
   267  0495                     	;# 
   268  0496                     	;# 
   269  0496                     	;# 
   270  0497                     	;# 
   271  0497                     	;# 
   272  0595                     	;# 
   273  0596                     	;# 
   274  0597                     	;# 
   275  059C                     	;# 
   276  059D                     	;# 
   277  059E                     	;# 
   278  0611                     	;# 
   279  0611                     	;# 
   280  0612                     	;# 
   281  0613                     	;# 
   282  0614                     	;# 
   283  0614                     	;# 
   284  0615                     	;# 
   285  0616                     	;# 
   286  0617                     	;# 
   287  0617                     	;# 
   288  0618                     	;# 
   289  0619                     	;# 
   290  061A                     	;# 
   291  061A                     	;# 
   292  061B                     	;# 
   293  061C                     	;# 
   294  061D                     	;# 
   295  061D                     	;# 
   296  061E                     	;# 
   297  061F                     	;# 
   298  0FE4                     	;# 
   299  0FE5                     	;# 
   300  0FE6                     	;# 
   301  0FE7                     	;# 
   302  0FE8                     	;# 
   303  0FE9                     	;# 
   304  0FEA                     	;# 
   305  0FEB                     	;# 
   306  0FED                     	;# 
   307  0FEE                     	;# 
   308  0FEF                     	;# 
   309  0000                     	;# 
   310  0001                     	;# 
   311  0002                     	;# 
   312  0003                     	;# 
   313  0004                     	;# 
   314  0005                     	;# 
   315  0006                     	;# 
   316  0007                     	;# 
   317  0008                     	;# 
   318  0009                     	;# 
   319  000A                     	;# 
   320  000B                     	;# 
   321  000C                     	;# 
   322  000D                     	;# 
   323  000E                     	;# 
   324  000F                     	;# 
   325  0010                     	;# 
   326  0011                     	;# 
   327  0012                     	;# 
   328  0013                     	;# 
   329  0014                     	;# 
   330  0015                     	;# 
   331  0016                     	;# 
   332  0016                     	;# 
   333  0017                     	;# 
   334  0018                     	;# 
   335  0019                     	;# 
   336  001A                     	;# 
   337  001B                     	;# 
   338  001C                     	;# 
   339  008C                     	;# 
   340  008D                     	;# 
   341  008E                     	;# 
   342  008F                     	;# 
   343  0090                     	;# 
   344  0091                     	;# 
   345  0092                     	;# 
   346  0093                     	;# 
   347  0094                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0099                     	;# 
   352  009A                     	;# 
   353  009B                     	;# 
   354  009B                     	;# 
   355  009C                     	;# 
   356  009D                     	;# 
   357  009E                     	;# 
   358  010C                     	;# 
   359  010D                     	;# 
   360  010E                     	;# 
   361  010F                     	;# 
   362  0110                     	;# 
   363  0116                     	;# 
   364  0117                     	;# 
   365  011D                     	;# 
   366  018C                     	;# 
   367  018D                     	;# 
   368  018F                     	;# 
   369  0190                     	;# 
   370  0191                     	;# 
   371  0191                     	;# 
   372  0192                     	;# 
   373  0193                     	;# 
   374  0193                     	;# 
   375  0194                     	;# 
   376  0195                     	;# 
   377  0196                     	;# 
   378  0197                     	;# 
   379  0199                     	;# 
   380  0199                     	;# 
   381  0199                     	;# 
   382  019A                     	;# 
   383  019A                     	;# 
   384  019A                     	;# 
   385  019B                     	;# 
   386  019B                     	;# 
   387  019B                     	;# 
   388  019B                     	;# 
   389  019B                     	;# 
   390  019C                     	;# 
   391  019C                     	;# 
   392  019C                     	;# 
   393  019D                     	;# 
   394  019D                     	;# 
   395  019D                     	;# 
   396  019E                     	;# 
   397  019E                     	;# 
   398  019E                     	;# 
   399  019F                     	;# 
   400  019F                     	;# 
   401  019F                     	;# 
   402  020D                     	;# 
   403  020F                     	;# 
   404  0210                     	;# 
   405  0211                     	;# 
   406  0211                     	;# 
   407  0212                     	;# 
   408  0212                     	;# 
   409  0213                     	;# 
   410  0213                     	;# 
   411  0214                     	;# 
   412  0214                     	;# 
   413  0215                     	;# 
   414  0215                     	;# 
   415  0215                     	;# 
   416  0216                     	;# 
   417  0216                     	;# 
   418  0217                     	;# 
   419  0217                     	;# 
   420  0219                     	;# 
   421  021A                     	;# 
   422  021B                     	;# 
   423  021C                     	;# 
   424  021D                     	;# 
   425  021E                     	;# 
   426  021F                     	;# 
   427  028C                     	;# 
   428  028D                     	;# 
   429  0291                     	;# 
   430  0291                     	;# 
   431  0292                     	;# 
   432  0293                     	;# 
   433  0298                     	;# 
   434  0298                     	;# 
   435  0299                     	;# 
   436  029A                     	;# 
   437  029D                     	;# 
   438  029E                     	;# 
   439  029F                     	;# 
   440  030C                     	;# 
   441  030D                     	;# 
   442  0311                     	;# 
   443  0311                     	;# 
   444  0312                     	;# 
   445  0313                     	;# 
   446  0318                     	;# 
   447  0318                     	;# 
   448  0319                     	;# 
   449  031A                     	;# 
   450  031C                     	;# 
   451  031C                     	;# 
   452  031D                     	;# 
   453  031E                     	;# 
   454  038C                     	;# 
   455  038D                     	;# 
   456  0394                     	;# 
   457  0395                     	;# 
   458  0396                     	;# 
   459  040C                     	;# 
   460  040D                     	;# 
   461  0411                     	;# 
   462  0411                     	;# 
   463  0412                     	;# 
   464  0413                     	;# 
   465  0414                     	;# 
   466  0415                     	;# 
   467  0416                     	;# 
   468  0417                     	;# 
   469  0418                     	;# 
   470  0418                     	;# 
   471  0419                     	;# 
   472  041A                     	;# 
   473  041B                     	;# 
   474  041C                     	;# 
   475  041D                     	;# 
   476  041E                     	;# 
   477  048D                     	;# 
   478  0491                     	;# 
   479  0491                     	;# 
   480  0492                     	;# 
   481  0492                     	;# 
   482  0493                     	;# 
   483  0493                     	;# 
   484  0493                     	;# 
   485  0494                     	;# 
   486  0494                     	;# 
   487  0495                     	;# 
   488  0495                     	;# 
   489  0496                     	;# 
   490  0496                     	;# 
   491  0497                     	;# 
   492  0497                     	;# 
   493  0595                     	;# 
   494  0596                     	;# 
   495  0597                     	;# 
   496  059C                     	;# 
   497  059D                     	;# 
   498  059E                     	;# 
   499  0611                     	;# 
   500  0611                     	;# 
   501  0612                     	;# 
   502  0613                     	;# 
   503  0614                     	;# 
   504  0614                     	;# 
   505  0615                     	;# 
   506  0616                     	;# 
   507  0617                     	;# 
   508  0617                     	;# 
   509  0618                     	;# 
   510  0619                     	;# 
   511  061A                     	;# 
   512  061A                     	;# 
   513  061B                     	;# 
   514  061C                     	;# 
   515  061D                     	;# 
   516  061D                     	;# 
   517  061E                     	;# 
   518  061F                     	;# 
   519  0FE4                     	;# 
   520  0FE5                     	;# 
   521  0FE6                     	;# 
   522  0FE7                     	;# 
   523  0FE8                     	;# 
   524  0FE9                     	;# 
   525  0FEA                     	;# 
   526  0FEB                     	;# 
   527  0FED                     	;# 
   528  0FEE                     	;# 
   529  0FEF                     	;# 
   530  0000                     	;# 
   531  0001                     	;# 
   532  0002                     	;# 
   533  0003                     	;# 
   534  0004                     	;# 
   535  0005                     	;# 
   536  0006                     	;# 
   537  0007                     	;# 
   538  0008                     	;# 
   539  0009                     	;# 
   540  000A                     	;# 
   541  000B                     	;# 
   542  000C                     	;# 
   543  000D                     	;# 
   544  000E                     	;# 
   545  000F                     	;# 
   546  0010                     	;# 
   547  0011                     	;# 
   548  0012                     	;# 
   549  0013                     	;# 
   550  0014                     	;# 
   551  0015                     	;# 
   552  0016                     	;# 
   553  0016                     	;# 
   554  0017                     	;# 
   555  0018                     	;# 
   556  0019                     	;# 
   557  001A                     	;# 
   558  001B                     	;# 
   559  001C                     	;# 
   560  008C                     	;# 
   561  008D                     	;# 
   562  008E                     	;# 
   563  008F                     	;# 
   564  0090                     	;# 
   565  0091                     	;# 
   566  0092                     	;# 
   567  0093                     	;# 
   568  0094                     	;# 
   569  0095                     	;# 
   570  0096                     	;# 
   571  0097                     	;# 
   572  0099                     	;# 
   573  009A                     	;# 
   574  009B                     	;# 
   575  009B                     	;# 
   576  009C                     	;# 
   577  009D                     	;# 
   578  009E                     	;# 
   579  010C                     	;# 
   580  010D                     	;# 
   581  010E                     	;# 
   582  010F                     	;# 
   583  0110                     	;# 
   584  0116                     	;# 
   585  0117                     	;# 
   586  011D                     	;# 
   587  018C                     	;# 
   588  018D                     	;# 
   589  018F                     	;# 
   590  0190                     	;# 
   591  0191                     	;# 
   592  0191                     	;# 
   593  0192                     	;# 
   594  0193                     	;# 
   595  0193                     	;# 
   596  0194                     	;# 
   597  0195                     	;# 
   598  0196                     	;# 
   599  0197                     	;# 
   600  0199                     	;# 
   601  0199                     	;# 
   602  0199                     	;# 
   603  019A                     	;# 
   604  019A                     	;# 
   605  019A                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019B                     	;# 
   611  019C                     	;# 
   612  019C                     	;# 
   613  019C                     	;# 
   614  019D                     	;# 
   615  019D                     	;# 
   616  019D                     	;# 
   617  019E                     	;# 
   618  019E                     	;# 
   619  019E                     	;# 
   620  019F                     	;# 
   621  019F                     	;# 
   622  019F                     	;# 
   623  020D                     	;# 
   624  020F                     	;# 
   625  0210                     	;# 
   626  0211                     	;# 
   627  0211                     	;# 
   628  0212                     	;# 
   629  0212                     	;# 
   630  0213                     	;# 
   631  0213                     	;# 
   632  0214                     	;# 
   633  0214                     	;# 
   634  0215                     	;# 
   635  0215                     	;# 
   636  0215                     	;# 
   637  0216                     	;# 
   638  0216                     	;# 
   639  0217                     	;# 
   640  0217                     	;# 
   641  0219                     	;# 
   642  021A                     	;# 
   643  021B                     	;# 
   644  021C                     	;# 
   645  021D                     	;# 
   646  021E                     	;# 
   647  021F                     	;# 
   648  028C                     	;# 
   649  028D                     	;# 
   650  0291                     	;# 
   651  0291                     	;# 
   652  0292                     	;# 
   653  0293                     	;# 
   654  0298                     	;# 
   655  0298                     	;# 
   656  0299                     	;# 
   657  029A                     	;# 
   658  029D                     	;# 
   659  029E                     	;# 
   660  029F                     	;# 
   661  030C                     	;# 
   662  030D                     	;# 
   663  0311                     	;# 
   664  0311                     	;# 
   665  0312                     	;# 
   666  0313                     	;# 
   667  0318                     	;# 
   668  0318                     	;# 
   669  0319                     	;# 
   670  031A                     	;# 
   671  031C                     	;# 
   672  031C                     	;# 
   673  031D                     	;# 
   674  031E                     	;# 
   675  038C                     	;# 
   676  038D                     	;# 
   677  0394                     	;# 
   678  0395                     	;# 
   679  0396                     	;# 
   680  040C                     	;# 
   681  040D                     	;# 
   682  0411                     	;# 
   683  0411                     	;# 
   684  0412                     	;# 
   685  0413                     	;# 
   686  0414                     	;# 
   687  0415                     	;# 
   688  0416                     	;# 
   689  0417                     	;# 
   690  0418                     	;# 
   691  0418                     	;# 
   692  0419                     	;# 
   693  041A                     	;# 
   694  041B                     	;# 
   695  041C                     	;# 
   696  041D                     	;# 
   697  041E                     	;# 
   698  048D                     	;# 
   699  0491                     	;# 
   700  0491                     	;# 
   701  0492                     	;# 
   702  0492                     	;# 
   703  0493                     	;# 
   704  0493                     	;# 
   705  0493                     	;# 
   706  0494                     	;# 
   707  0494                     	;# 
   708  0495                     	;# 
   709  0495                     	;# 
   710  0496                     	;# 
   711  0496                     	;# 
   712  0497                     	;# 
   713  0497                     	;# 
   714  0595                     	;# 
   715  0596                     	;# 
   716  0597                     	;# 
   717  059C                     	;# 
   718  059D                     	;# 
   719  059E                     	;# 
   720  0611                     	;# 
   721  0611                     	;# 
   722  0612                     	;# 
   723  0613                     	;# 
   724  0614                     	;# 
   725  0614                     	;# 
   726  0615                     	;# 
   727  0616                     	;# 
   728  0617                     	;# 
   729  0617                     	;# 
   730  0618                     	;# 
   731  0619                     	;# 
   732  061A                     	;# 
   733  061A                     	;# 
   734  061B                     	;# 
   735  061C                     	;# 
   736  061D                     	;# 
   737  061D                     	;# 
   738  061E                     	;# 
   739  061F                     	;# 
   740  0FE4                     	;# 
   741  0FE5                     	;# 
   742  0FE6                     	;# 
   743  0FE7                     	;# 
   744  0FE8                     	;# 
   745  0FE9                     	;# 
   746  0FEA                     	;# 
   747  0FEB                     	;# 
   748  0FED                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000D                     	;# 
   765  000E                     	;# 
   766  000F                     	;# 
   767  0010                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0013                     	;# 
   771  0014                     	;# 
   772  0015                     	;# 
   773  0016                     	;# 
   774  0016                     	;# 
   775  0017                     	;# 
   776  0018                     	;# 
   777  0019                     	;# 
   778  001A                     	;# 
   779  001B                     	;# 
   780  001C                     	;# 
   781  008C                     	;# 
   782  008D                     	;# 
   783  008E                     	;# 
   784  008F                     	;# 
   785  0090                     	;# 
   786  0091                     	;# 
   787  0092                     	;# 
   788  0093                     	;# 
   789  0094                     	;# 
   790  0095                     	;# 
   791  0096                     	;# 
   792  0097                     	;# 
   793  0099                     	;# 
   794  009A                     	;# 
   795  009B                     	;# 
   796  009B                     	;# 
   797  009C                     	;# 
   798  009D                     	;# 
   799  009E                     	;# 
   800  010C                     	;# 
   801  010D                     	;# 
   802  010E                     	;# 
   803  010F                     	;# 
   804  0110                     	;# 
   805  0116                     	;# 
   806  0117                     	;# 
   807  011D                     	;# 
   808  018C                     	;# 
   809  018D                     	;# 
   810  018F                     	;# 
   811  0190                     	;# 
   812  0191                     	;# 
   813  0191                     	;# 
   814  0192                     	;# 
   815  0193                     	;# 
   816  0193                     	;# 
   817  0194                     	;# 
   818  0195                     	;# 
   819  0196                     	;# 
   820  0197                     	;# 
   821  0199                     	;# 
   822  0199                     	;# 
   823  0199                     	;# 
   824  019A                     	;# 
   825  019A                     	;# 
   826  019A                     	;# 
   827  019B                     	;# 
   828  019B                     	;# 
   829  019B                     	;# 
   830  019B                     	;# 
   831  019B                     	;# 
   832  019C                     	;# 
   833  019C                     	;# 
   834  019C                     	;# 
   835  019D                     	;# 
   836  019D                     	;# 
   837  019D                     	;# 
   838  019E                     	;# 
   839  019E                     	;# 
   840  019E                     	;# 
   841  019F                     	;# 
   842  019F                     	;# 
   843  019F                     	;# 
   844  020D                     	;# 
   845  020F                     	;# 
   846  0210                     	;# 
   847  0211                     	;# 
   848  0211                     	;# 
   849  0212                     	;# 
   850  0212                     	;# 
   851  0213                     	;# 
   852  0213                     	;# 
   853  0214                     	;# 
   854  0214                     	;# 
   855  0215                     	;# 
   856  0215                     	;# 
   857  0215                     	;# 
   858  0216                     	;# 
   859  0216                     	;# 
   860  0217                     	;# 
   861  0217                     	;# 
   862  0219                     	;# 
   863  021A                     	;# 
   864  021B                     	;# 
   865  021C                     	;# 
   866  021D                     	;# 
   867  021E                     	;# 
   868  021F                     	;# 
   869  028C                     	;# 
   870  028D                     	;# 
   871  0291                     	;# 
   872  0291                     	;# 
   873  0292                     	;# 
   874  0293                     	;# 
   875  0298                     	;# 
   876  0298                     	;# 
   877  0299                     	;# 
   878  029A                     	;# 
   879  029D                     	;# 
   880  029E                     	;# 
   881  029F                     	;# 
   882  030C                     	;# 
   883  030D                     	;# 
   884  0311                     	;# 
   885  0311                     	;# 
   886  0312                     	;# 
   887  0313                     	;# 
   888  0318                     	;# 
   889  0318                     	;# 
   890  0319                     	;# 
   891  031A                     	;# 
   892  031C                     	;# 
   893  031C                     	;# 
   894  031D                     	;# 
   895  031E                     	;# 
   896  038C                     	;# 
   897  038D                     	;# 
   898  0394                     	;# 
   899  0395                     	;# 
   900  0396                     	;# 
   901  040C                     	;# 
   902  040D                     	;# 
   903  0411                     	;# 
   904  0411                     	;# 
   905  0412                     	;# 
   906  0413                     	;# 
   907  0414                     	;# 
   908  0415                     	;# 
   909  0416                     	;# 
   910  0417                     	;# 
   911  0418                     	;# 
   912  0418                     	;# 
   913  0419                     	;# 
   914  041A                     	;# 
   915  041B                     	;# 
   916  041C                     	;# 
   917  041D                     	;# 
   918  041E                     	;# 
   919  048D                     	;# 
   920  0491                     	;# 
   921  0491                     	;# 
   922  0492                     	;# 
   923  0492                     	;# 
   924  0493                     	;# 
   925  0493                     	;# 
   926  0493                     	;# 
   927  0494                     	;# 
   928  0494                     	;# 
   929  0495                     	;# 
   930  0495                     	;# 
   931  0496                     	;# 
   932  0496                     	;# 
   933  0497                     	;# 
   934  0497                     	;# 
   935  0595                     	;# 
   936  0596                     	;# 
   937  0597                     	;# 
   938  059C                     	;# 
   939  059D                     	;# 
   940  059E                     	;# 
   941  0611                     	;# 
   942  0611                     	;# 
   943  0612                     	;# 
   944  0613                     	;# 
   945  0614                     	;# 
   946  0614                     	;# 
   947  0615                     	;# 
   948  0616                     	;# 
   949  0617                     	;# 
   950  0617                     	;# 
   951  0618                     	;# 
   952  0619                     	;# 
   953  061A                     	;# 
   954  061A                     	;# 
   955  061B                     	;# 
   956  061C                     	;# 
   957  061D                     	;# 
   958  061D                     	;# 
   959  061E                     	;# 
   960  061F                     	;# 
   961  0FE4                     	;# 
   962  0FE5                     	;# 
   963  0FE6                     	;# 
   964  0FE7                     	;# 
   965  0FE8                     	;# 
   966  0FE9                     	;# 
   967  0FEA                     	;# 
   968  0FEB                     	;# 
   969  0FED                     	;# 
   970  0FEE                     	;# 
   971  0FEF                     	;# 
   972  0000                     	;# 
   973  0001                     	;# 
   974  0002                     	;# 
   975  0003                     	;# 
   976  0004                     	;# 
   977  0005                     	;# 
   978  0006                     	;# 
   979  0007                     	;# 
   980  0008                     	;# 
   981  0009                     	;# 
   982  000A                     	;# 
   983  000B                     	;# 
   984  000C                     	;# 
   985  000D                     	;# 
   986  000E                     	;# 
   987  000F                     	;# 
   988  0010                     	;# 
   989  0011                     	;# 
   990  0012                     	;# 
   991  0013                     	;# 
   992  0014                     	;# 
   993  0015                     	;# 
   994  0016                     	;# 
   995  0016                     	;# 
   996  0017                     	;# 
   997  0018                     	;# 
   998  0019                     	;# 
   999  001A                     	;# 
  1000  001B                     	;# 
  1001  001C                     	;# 
  1002  008C                     	;# 
  1003  008D                     	;# 
  1004  008E                     	;# 
  1005  008F                     	;# 
  1006  0090                     	;# 
  1007  0091                     	;# 
  1008  0092                     	;# 
  1009  0093                     	;# 
  1010  0094                     	;# 
  1011  0095                     	;# 
  1012  0096                     	;# 
  1013  0097                     	;# 
  1014  0099                     	;# 
  1015  009A                     	;# 
  1016  009B                     	;# 
  1017  009B                     	;# 
  1018  009C                     	;# 
  1019  009D                     	;# 
  1020  009E                     	;# 
  1021  010C                     	;# 
  1022  010D                     	;# 
  1023  010E                     	;# 
  1024  010F                     	;# 
  1025  0110                     	;# 
  1026  0116                     	;# 
  1027  0117                     	;# 
  1028  011D                     	;# 
  1029  018C                     	;# 
  1030  018D                     	;# 
  1031  018F                     	;# 
  1032  0190                     	;# 
  1033  0191                     	;# 
  1034  0191                     	;# 
  1035  0192                     	;# 
  1036  0193                     	;# 
  1037  0193                     	;# 
  1038  0194                     	;# 
  1039  0195                     	;# 
  1040  0196                     	;# 
  1041  0197                     	;# 
  1042  0199                     	;# 
  1043  0199                     	;# 
  1044  0199                     	;# 
  1045  019A                     	;# 
  1046  019A                     	;# 
  1047  019A                     	;# 
  1048  019B                     	;# 
  1049  019B                     	;# 
  1050  019B                     	;# 
  1051  019B                     	;# 
  1052  019B                     	;# 
  1053  019C                     	;# 
  1054  019C                     	;# 
  1055  019C                     	;# 
  1056  019D                     	;# 
  1057  019D                     	;# 
  1058  019D                     	;# 
  1059  019E                     	;# 
  1060  019E                     	;# 
  1061  019E                     	;# 
  1062  019F                     	;# 
  1063  019F                     	;# 
  1064  019F                     	;# 
  1065  020D                     	;# 
  1066  020F                     	;# 
  1067  0210                     	;# 
  1068  0211                     	;# 
  1069  0211                     	;# 
  1070  0212                     	;# 
  1071  0212                     	;# 
  1072  0213                     	;# 
  1073  0213                     	;# 
  1074  0214                     	;# 
  1075  0214                     	;# 
  1076  0215                     	;# 
  1077  0215                     	;# 
  1078  0215                     	;# 
  1079  0216                     	;# 
  1080  0216                     	;# 
  1081  0217                     	;# 
  1082  0217                     	;# 
  1083  0219                     	;# 
  1084  021A                     	;# 
  1085  021B                     	;# 
  1086  021C                     	;# 
  1087  021D                     	;# 
  1088  021E                     	;# 
  1089  021F                     	;# 
  1090  028C                     	;# 
  1091  028D                     	;# 
  1092  0291                     	;# 
  1093  0291                     	;# 
  1094  0292                     	;# 
  1095  0293                     	;# 
  1096  0298                     	;# 
  1097  0298                     	;# 
  1098  0299                     	;# 
  1099  029A                     	;# 
  1100  029D                     	;# 
  1101  029E                     	;# 
  1102  029F                     	;# 
  1103  030C                     	;# 
  1104  030D                     	;# 
  1105  0311                     	;# 
  1106  0311                     	;# 
  1107  0312                     	;# 
  1108  0313                     	;# 
  1109  0318                     	;# 
  1110  0318                     	;# 
  1111  0319                     	;# 
  1112  031A                     	;# 
  1113  031C                     	;# 
  1114  031C                     	;# 
  1115  031D                     	;# 
  1116  031E                     	;# 
  1117  038C                     	;# 
  1118  038D                     	;# 
  1119  0394                     	;# 
  1120  0395                     	;# 
  1121  0396                     	;# 
  1122  040C                     	;# 
  1123  040D                     	;# 
  1124  0411                     	;# 
  1125  0411                     	;# 
  1126  0412                     	;# 
  1127  0413                     	;# 
  1128  0414                     	;# 
  1129  0415                     	;# 
  1130  0416                     	;# 
  1131  0417                     	;# 
  1132  0418                     	;# 
  1133  0418                     	;# 
  1134  0419                     	;# 
  1135  041A                     	;# 
  1136  041B                     	;# 
  1137  041C                     	;# 
  1138  041D                     	;# 
  1139  041E                     	;# 
  1140  048D                     	;# 
  1141  0491                     	;# 
  1142  0491                     	;# 
  1143  0492                     	;# 
  1144  0492                     	;# 
  1145  0493                     	;# 
  1146  0493                     	;# 
  1147  0493                     	;# 
  1148  0494                     	;# 
  1149  0494                     	;# 
  1150  0495                     	;# 
  1151  0495                     	;# 
  1152  0496                     	;# 
  1153  0496                     	;# 
  1154  0497                     	;# 
  1155  0497                     	;# 
  1156  0595                     	;# 
  1157  0596                     	;# 
  1158  0597                     	;# 
  1159  059C                     	;# 
  1160  059D                     	;# 
  1161  059E                     	;# 
  1162  0611                     	;# 
  1163  0611                     	;# 
  1164  0612                     	;# 
  1165  0613                     	;# 
  1166  0614                     	;# 
  1167  0614                     	;# 
  1168  0615                     	;# 
  1169  0616                     	;# 
  1170  0617                     	;# 
  1171  0617                     	;# 
  1172  0618                     	;# 
  1173  0619                     	;# 
  1174  061A                     	;# 
  1175  061A                     	;# 
  1176  061B                     	;# 
  1177  061C                     	;# 
  1178  061D                     	;# 
  1179  061D                     	;# 
  1180  061E                     	;# 
  1181  061F                     	;# 
  1182  0FE4                     	;# 
  1183  0FE5                     	;# 
  1184  0FE6                     	;# 
  1185  0FE7                     	;# 
  1186  0FE8                     	;# 
  1187  0FE9                     	;# 
  1188  0FEA                     	;# 
  1189  0FEB                     	;# 
  1190  0FED                     	;# 
  1191  0FEE                     	;# 
  1192  0FEF                     	;# 
  1193  0000                     	;# 
  1194  0001                     	;# 
  1195  0002                     	;# 
  1196  0003                     	;# 
  1197  0004                     	;# 
  1198  0005                     	;# 
  1199  0006                     	;# 
  1200  0007                     	;# 
  1201  0008                     	;# 
  1202  0009                     	;# 
  1203  000A                     	;# 
  1204  000B                     	;# 
  1205  000C                     	;# 
  1206  000D                     	;# 
  1207  000E                     	;# 
  1208  000F                     	;# 
  1209  0010                     	;# 
  1210  0011                     	;# 
  1211  0012                     	;# 
  1212  0013                     	;# 
  1213  0014                     	;# 
  1214  0015                     	;# 
  1215  0016                     	;# 
  1216  0016                     	;# 
  1217  0017                     	;# 
  1218  0018                     	;# 
  1219  0019                     	;# 
  1220  001A                     	;# 
  1221  001B                     	;# 
  1222  001C                     	;# 
  1223  008C                     	;# 
  1224  008D                     	;# 
  1225  008E                     	;# 
  1226  008F                     	;# 
  1227  0090                     	;# 
  1228  0091                     	;# 
  1229  0092                     	;# 
  1230  0093                     	;# 
  1231  0094                     	;# 
  1232  0095                     	;# 
  1233  0096                     	;# 
  1234  0097                     	;# 
  1235  0099                     	;# 
  1236  009A                     	;# 
  1237  009B                     	;# 
  1238  009B                     	;# 
  1239  009C                     	;# 
  1240  009D                     	;# 
  1241  009E                     	;# 
  1242  010C                     	;# 
  1243  010D                     	;# 
  1244  010E                     	;# 
  1245  010F                     	;# 
  1246  0110                     	;# 
  1247  0116                     	;# 
  1248  0117                     	;# 
  1249  011D                     	;# 
  1250  018C                     	;# 
  1251  018D                     	;# 
  1252  018F                     	;# 
  1253  0190                     	;# 
  1254  0191                     	;# 
  1255  0191                     	;# 
  1256  0192                     	;# 
  1257  0193                     	;# 
  1258  0193                     	;# 
  1259  0194                     	;# 
  1260  0195                     	;# 
  1261  0196                     	;# 
  1262  0197                     	;# 
  1263  0199                     	;# 
  1264  0199                     	;# 
  1265  0199                     	;# 
  1266  019A                     	;# 
  1267  019A                     	;# 
  1268  019A                     	;# 
  1269  019B                     	;# 
  1270  019B                     	;# 
  1271  019B                     	;# 
  1272  019B                     	;# 
  1273  019B                     	;# 
  1274  019C                     	;# 
  1275  019C                     	;# 
  1276  019C                     	;# 
  1277  019D                     	;# 
  1278  019D                     	;# 
  1279  019D                     	;# 
  1280  019E                     	;# 
  1281  019E                     	;# 
  1282  019E                     	;# 
  1283  019F                     	;# 
  1284  019F                     	;# 
  1285  019F                     	;# 
  1286  020D                     	;# 
  1287  020F                     	;# 
  1288  0210                     	;# 
  1289  0211                     	;# 
  1290  0211                     	;# 
  1291  0212                     	;# 
  1292  0212                     	;# 
  1293  0213                     	;# 
  1294  0213                     	;# 
  1295  0214                     	;# 
  1296  0214                     	;# 
  1297  0215                     	;# 
  1298  0215                     	;# 
  1299  0215                     	;# 
  1300  0216                     	;# 
  1301  0216                     	;# 
  1302  0217                     	;# 
  1303  0217                     	;# 
  1304  0219                     	;# 
  1305  021A                     	;# 
  1306  021B                     	;# 
  1307  021C                     	;# 
  1308  021D                     	;# 
  1309  021E                     	;# 
  1310  021F                     	;# 
  1311  028C                     	;# 
  1312  028D                     	;# 
  1313  0291                     	;# 
  1314  0291                     	;# 
  1315  0292                     	;# 
  1316  0293                     	;# 
  1317  0298                     	;# 
  1318  0298                     	;# 
  1319  0299                     	;# 
  1320  029A                     	;# 
  1321  029D                     	;# 
  1322  029E                     	;# 
  1323  029F                     	;# 
  1324  030C                     	;# 
  1325  030D                     	;# 
  1326  0311                     	;# 
  1327  0311                     	;# 
  1328  0312                     	;# 
  1329  0313                     	;# 
  1330  0318                     	;# 
  1331  0318                     	;# 
  1332  0319                     	;# 
  1333  031A                     	;# 
  1334  031C                     	;# 
  1335  031C                     	;# 
  1336  031D                     	;# 
  1337  031E                     	;# 
  1338  038C                     	;# 
  1339  038D                     	;# 
  1340  0394                     	;# 
  1341  0395                     	;# 
  1342  0396                     	;# 
  1343  040C                     	;# 
  1344  040D                     	;# 
  1345  0411                     	;# 
  1346  0411                     	;# 
  1347  0412                     	;# 
  1348  0413                     	;# 
  1349  0414                     	;# 
  1350  0415                     	;# 
  1351  0416                     	;# 
  1352  0417                     	;# 
  1353  0418                     	;# 
  1354  0418                     	;# 
  1355  0419                     	;# 
  1356  041A                     	;# 
  1357  041B                     	;# 
  1358  041C                     	;# 
  1359  041D                     	;# 
  1360  041E                     	;# 
  1361  048D                     	;# 
  1362  0491                     	;# 
  1363  0491                     	;# 
  1364  0492                     	;# 
  1365  0492                     	;# 
  1366  0493                     	;# 
  1367  0493                     	;# 
  1368  0493                     	;# 
  1369  0494                     	;# 
  1370  0494                     	;# 
  1371  0495                     	;# 
  1372  0495                     	;# 
  1373  0496                     	;# 
  1374  0496                     	;# 
  1375  0497                     	;# 
  1376  0497                     	;# 
  1377  0595                     	;# 
  1378  0596                     	;# 
  1379  0597                     	;# 
  1380  059C                     	;# 
  1381  059D                     	;# 
  1382  059E                     	;# 
  1383  0611                     	;# 
  1384  0611                     	;# 
  1385  0612                     	;# 
  1386  0613                     	;# 
  1387  0614                     	;# 
  1388  0614                     	;# 
  1389  0615                     	;# 
  1390  0616                     	;# 
  1391  0617                     	;# 
  1392  0617                     	;# 
  1393  0618                     	;# 
  1394  0619                     	;# 
  1395  061A                     	;# 
  1396  061A                     	;# 
  1397  061B                     	;# 
  1398  061C                     	;# 
  1399  061D                     	;# 
  1400  061D                     	;# 
  1401  061E                     	;# 
  1402  061F                     	;# 
  1403  0FE4                     	;# 
  1404  0FE5                     	;# 
  1405  0FE6                     	;# 
  1406  0FE7                     	;# 
  1407  0FE8                     	;# 
  1408  0FE9                     	;# 
  1409  0FEA                     	;# 
  1410  0FEB                     	;# 
  1411  0FED                     	;# 
  1412  0FEE                     	;# 
  1413  0FEF                     	;_delay
  1414                           
  1415                           	psect	idataBANK2
  1416  1991                     __pidataBANK2:	
  1417                           
  1418                           ;initializer for _baseline_delay_time
  1419  1991  34D0               	retlw	208
  1420  1992  3407               	retlw	7
  1421  1993  3400               	retlw	0
  1422  1994  3400               	retlw	0
  1423                           
  1424                           ;initializer for _delay_time
  1425  1995  34D0               	retlw	208
  1426  1996  3407               	retlw	7
  1427  1997  3400               	retlw	0
  1428  1998  3400               	retlw	0
  1429                           
  1430                           ;initializer for _bottom_push_state
  1431  1999  3406               	retlw	6
  1432  199A  3400               	retlw	0
  1433                           
  1434                           ;initializer for _knob1_prev
  1435  199B  34D0               	retlw	208
  1436  199C  3407               	retlw	7
  1437                           
  1438                           ;initializer for _num_taps
  1439  199D  3404               	retlw	4
  1440  199E  3400               	retlw	0
  1441                           
  1442                           ;initializer for _tap_iteration
  1443  199F  3401               	retlw	1
  1444  19A0  3400               	retlw	0
  1445                           
  1446                           ;initializer for _top_push_state
  1447  19A1  3406               	retlw	6
  1448  19A2  3400               	retlw	0
  1449                           
  1450                           	psect	idataBANK3
  1451  197F                     __pidataBANK3:	
  1452                           
  1453                           ;initializer for _blink_state
  1454  197F  3401               	retlw	1
  1455  1980  3400               	retlw	0
  1456                           
  1457                           ;initializer for _delay_time_changed
  1458  1981  3401               	retlw	1
  1459  1982  3400               	retlw	0
  1460                           
  1461                           ;initializer for _incoming_data
  1462  1983  3401               	retlw	1
  1463  1984  3400               	retlw	0
  1464                           
  1465                           ;initializer for _knob2_prev
  1466  1985  34D0               	retlw	208
  1467  1986  3407               	retlw	7
  1468                           
  1469                           ;initializer for _knob3_prev
  1470  1987  34D0               	retlw	208
  1471  1988  3407               	retlw	7
  1472                           
  1473                           ;initializer for _knob4_prev
  1474  1989  34D0               	retlw	208
  1475  198A  3407               	retlw	7
  1476                           
  1477                           ;initializer for _knob5_prev
  1478  198B  34D0               	retlw	208
  1479  198C  3407               	retlw	7
  1480                           
  1481                           ;initializer for _mod_delay_time
  1482  198D  34D0               	retlw	208
  1483  198E  3407               	retlw	7
  1484                           
  1485                           ;initializer for _tap_longpress_time
  1486  198F  3405               	retlw	5
  1487  1990  3400               	retlw	0
  1488                           
  1489                           	psect	idataBANK4
  1490  07FC                     __pidataBANK4:	
  1491                           
  1492                           ;initializer for _mod1_amplitude
  1493  07FC  34C8               	retlw	200
  1494  07FD  3400               	retlw	0
  1495  07FE  3400               	retlw	0
  1496  07FF  3400               	retlw	0
  1497                           
  1498                           	psect	idataBANK5
  1499  1BFD                     __pidataBANK5:	
  1500                           
  1501                           ;initializer for _mod1
  1502  1BFD  3400               	retlw	0
  1503  1BFE  3400               	retlw	0
  1504  1BFF  3415               	retlw	21
  1505  1C00  3400               	retlw	0
  1506  1C01  3428               	retlw	40
  1507  1C02  3400               	retlw	0
  1508  1C03  343B               	retlw	59
  1509  1C04  3400               	retlw	0
  1510  1C05  344A               	retlw	74
  1511  1C06  3400               	retlw	0
  1512  1C07  3456               	retlw	86
  1513  1C08  3400               	retlw	0
  1514  1C09  345F               	retlw	95
  1515  1C0A  3400               	retlw	0
  1516  1C0B  3463               	retlw	99
  1517  1C0C  3400               	retlw	0
  1518  1C0D  3464               	retlw	100
  1519  1C0E  3400               	retlw	0
  1520  1C0F  345F               	retlw	95
  1521  1C10  3400               	retlw	0
  1522  1C11  3457               	retlw	87
  1523  1C12  3400               	retlw	0
  1524  1C13  344B               	retlw	75
  1525  1C14  3400               	retlw	0
  1526  1C15  343C               	retlw	60
  1527  1C16  3400               	retlw	0
  1528  1C17  342A               	retlw	42
  1529  1C18  3400               	retlw	0
  1530  1C19  3416               	retlw	22
  1531  1C1A  3400               	retlw	0
  1532  1C1B  3402               	retlw	2
  1533  1C1C  3400               	retlw	0
  1534  1C1D  34ED               	retlw	237
  1535  1C1E  34FF               	retlw	255
  1536  1C1F  34D9               	retlw	217
  1537  1C20  34FF               	retlw	255
  1538  1C21  34C7               	retlw	199
  1539  1C22  34FF               	retlw	255
  1540  1C23  34B7               	retlw	183
  1541  1C24  34FF               	retlw	255
  1542  1C25  34AB               	retlw	171
  1543  1C26  34FF               	retlw	255
  1544  1C27  34A2               	retlw	162
  1545  1C28  34FF               	retlw	255
  1546  1C29  349D               	retlw	157
  1547  1C2A  34FF               	retlw	255
  1548  1C2B  349C               	retlw	156
  1549  1C2C  34FF               	retlw	255
  1550  1C2D  34A1               	retlw	161
  1551  1C2E  34FF               	retlw	255
  1552  1C2F  34A8               	retlw	168
  1553  1C30  34FF               	retlw	255
  1554  1C31  34B4               	retlw	180
  1555  1C32  34FF               	retlw	255
  1556  1C33  34C3               	retlw	195
  1557  1C34  34FF               	retlw	255
  1558  1C35  34D5               	retlw	213
  1559  1C36  34FF               	retlw	255
  1560  1C37  34E8               	retlw	232
  1561  1C38  34FF               	retlw	255
  1562                           
  1563                           	psect	idataBANK7
  1564  1B87                     __pidataBANK7:	
  1565                           
  1566                           ;initializer for _mod4
  1567  1B87  3464               	retlw	100
  1568  1B88  3400               	retlw	0
  1569  1B89  3464               	retlw	100
  1570  1B8A  3400               	retlw	0
  1571  1B8B  3464               	retlw	100
  1572  1B8C  3400               	retlw	0
  1573  1B8D  3464               	retlw	100
  1574  1B8E  3400               	retlw	0
  1575  1B8F  3464               	retlw	100
  1576  1B90  3400               	retlw	0
  1577  1B91  3464               	retlw	100
  1578  1B92  3400               	retlw	0
  1579  1B93  3464               	retlw	100
  1580  1B94  3400               	retlw	0
  1581  1B95  3464               	retlw	100
  1582  1B96  3400               	retlw	0
  1583  1B97  3464               	retlw	100
  1584  1B98  3400               	retlw	0
  1585  1B99  3464               	retlw	100
  1586  1B9A  3400               	retlw	0
  1587  1B9B  3464               	retlw	100
  1588  1B9C  3400               	retlw	0
  1589  1B9D  3464               	retlw	100
  1590  1B9E  3400               	retlw	0
  1591  1B9F  3464               	retlw	100
  1592  1BA0  3400               	retlw	0
  1593  1BA1  3464               	retlw	100
  1594  1BA2  3400               	retlw	0
  1595  1BA3  3464               	retlw	100
  1596  1BA4  3400               	retlw	0
  1597  1BA5  349C               	retlw	156
  1598  1BA6  34FF               	retlw	255
  1599  1BA7  349C               	retlw	156
  1600  1BA8  34FF               	retlw	255
  1601  1BA9  349C               	retlw	156
  1602  1BAA  34FF               	retlw	255
  1603  1BAB  349C               	retlw	156
  1604  1BAC  34FF               	retlw	255
  1605  1BAD  349C               	retlw	156
  1606  1BAE  34FF               	retlw	255
  1607  1BAF  349C               	retlw	156
  1608  1BB0  34FF               	retlw	255
  1609  1BB1  349C               	retlw	156
  1610  1BB2  34FF               	retlw	255
  1611  1BB3  349C               	retlw	156
  1612  1BB4  34FF               	retlw	255
  1613  1BB5  349C               	retlw	156
  1614  1BB6  34FF               	retlw	255
  1615  1BB7  349C               	retlw	156
  1616  1BB8  34FF               	retlw	255
  1617  1BB9  349C               	retlw	156
  1618  1BBA  34FF               	retlw	255
  1619  1BBB  349C               	retlw	156
  1620  1BBC  34FF               	retlw	255
  1621  1BBD  349C               	retlw	156
  1622  1BBE  34FF               	retlw	255
  1623  1BBF  349C               	retlw	156
  1624  1BC0  34FF               	retlw	255
  1625                           
  1626                           	psect	idataBANK8
  1627  1D8B                     __pidataBANK8:	
  1628                           
  1629                           ;initializer for _B25k
  1630  1D8B  34FF               	retlw	255
  1631  1D8C  3400               	retlw	0
  1632  1D8D  34FF               	retlw	255
  1633  1D8E  3400               	retlw	0
  1634  1D8F  34FF               	retlw	255
  1635  1D90  3400               	retlw	0
  1636  1D91  34DF               	retlw	223
  1637  1D92  3400               	retlw	0
  1638  1D93  34AE               	retlw	174
  1639  1D94  3400               	retlw	0
  1640  1D95  348E               	retlw	142
  1641  1D96  3400               	retlw	0
  1642  1D97  3478               	retlw	120
  1643  1D98  3400               	retlw	0
  1644  1D99  3467               	retlw	103
  1645  1D9A  3400               	retlw	0
  1646  1D9B  345B               	retlw	91
  1647  1D9C  3400               	retlw	0
  1648  1D9D  3450               	retlw	80
  1649  1D9E  3400               	retlw	0
  1650  1D9F  3448               	retlw	72
  1651  1DA0  3400               	retlw	0
  1652  1DA1  3442               	retlw	66
  1653  1DA2  3400               	retlw	0
  1654  1DA3  343C               	retlw	60
  1655  1DA4  3400               	retlw	0
  1656  1DA5  3437               	retlw	55
  1657  1DA6  3400               	retlw	0
  1658  1DA7  3433               	retlw	51
  1659  1DA8  3400               	retlw	0
  1660  1DA9  3430               	retlw	48
  1661  1DAA  3400               	retlw	0
  1662  1DAB  342D               	retlw	45
  1663  1DAC  3400               	retlw	0
  1664  1DAD  342A               	retlw	42
  1665  1DAE  3400               	retlw	0
  1666  1DAF  3427               	retlw	39
  1667  1DB0  3400               	retlw	0
  1668  1DB1  3425               	retlw	37
  1669  1DB2  3400               	retlw	0
  1670  1DB3  3423               	retlw	35
  1671  1DB4  3400               	retlw	0
  1672  1DB5  3421               	retlw	33
  1673  1DB6  3400               	retlw	0
  1674  1DB7  3420               	retlw	32
  1675  1DB8  3400               	retlw	0
  1676  1DB9  341E               	retlw	30
  1677  1DBA  3400               	retlw	0
  1678  1DBB  341D               	retlw	29
  1679  1DBC  3400               	retlw	0
  1680  1DBD  341C               	retlw	28
  1681  1DBE  3400               	retlw	0
  1682  1DBF  341B               	retlw	27
  1683  1DC0  3400               	retlw	0
  1684  1DC1  341A               	retlw	26
  1685  1DC2  3400               	retlw	0
  1686  1DC3  3419               	retlw	25
  1687  1DC4  3400               	retlw	0
  1688  1DC5  3418               	retlw	24
  1689  1DC6  3400               	retlw	0
  1690  1DC7  3417               	retlw	23
  1691  1DC8  3400               	retlw	0
  1692  1DC9  3416               	retlw	22
  1693  1DCA  3400               	retlw	0
  1694  1DCB  3415               	retlw	21
  1695  1DCC  3400               	retlw	0
  1696  1DCD  3415               	retlw	21
  1697  1DCE  3400               	retlw	0
  1698  1DCF  3414               	retlw	20
  1699  1DD0  3400               	retlw	0
  1700  1DD1  3413               	retlw	19
  1701  1DD2  3400               	retlw	0
  1702  1DD3  340F               	retlw	15
  1703  1DD4  3400               	retlw	0
  1704  1DD5  340B               	retlw	11
  1705  1DD6  3400               	retlw	0
  1706  1DD7  3407               	retlw	7
  1707  1DD8  3400               	retlw	0
  1708  1DD9  3407               	retlw	7
  1709  1DDA  3400               	retlw	0
  1710                           
  1711                           	psect	idataBANK9
  1712  1D3B                     __pidataBANK9:	
  1713                           
  1714                           ;initializer for _iB25k
  1715  1D3B  3407               	retlw	7
  1716  1D3C  3400               	retlw	0
  1717  1D3D  3407               	retlw	7
  1718  1D3E  3400               	retlw	0
  1719  1D3F  340B               	retlw	11
  1720  1D40  3400               	retlw	0
  1721  1D41  340F               	retlw	15
  1722  1D42  3400               	retlw	0
  1723  1D43  3413               	retlw	19
  1724  1D44  3400               	retlw	0
  1725  1D45  3414               	retlw	20
  1726  1D46  3400               	retlw	0
  1727  1D47  3415               	retlw	21
  1728  1D48  3400               	retlw	0
  1729  1D49  3415               	retlw	21
  1730  1D4A  3400               	retlw	0
  1731  1D4B  3416               	retlw	22
  1732  1D4C  3400               	retlw	0
  1733  1D4D  3417               	retlw	23
  1734  1D4E  3400               	retlw	0
  1735  1D4F  3418               	retlw	24
  1736  1D50  3400               	retlw	0
  1737  1D51  3419               	retlw	25
  1738  1D52  3400               	retlw	0
  1739  1D53  341A               	retlw	26
  1740  1D54  3400               	retlw	0
  1741  1D55  341B               	retlw	27
  1742  1D56  3400               	retlw	0
  1743  1D57  341C               	retlw	28
  1744  1D58  3400               	retlw	0
  1745  1D59  341D               	retlw	29
  1746  1D5A  3400               	retlw	0
  1747  1D5B  341E               	retlw	30
  1748  1D5C  3400               	retlw	0
  1749  1D5D  3420               	retlw	32
  1750  1D5E  3400               	retlw	0
  1751  1D5F  3421               	retlw	33
  1752  1D60  3400               	retlw	0
  1753  1D61  3423               	retlw	35
  1754  1D62  3400               	retlw	0
  1755  1D63  3425               	retlw	37
  1756  1D64  3400               	retlw	0
  1757  1D65  3427               	retlw	39
  1758  1D66  3400               	retlw	0
  1759  1D67  342A               	retlw	42
  1760  1D68  3400               	retlw	0
  1761  1D69  342D               	retlw	45
  1762  1D6A  3400               	retlw	0
  1763  1D6B  3430               	retlw	48
  1764  1D6C  3400               	retlw	0
  1765  1D6D  3433               	retlw	51
  1766  1D6E  3400               	retlw	0
  1767  1D6F  3437               	retlw	55
  1768  1D70  3400               	retlw	0
  1769  1D71  343C               	retlw	60
  1770  1D72  3400               	retlw	0
  1771  1D73  3442               	retlw	66
  1772  1D74  3400               	retlw	0
  1773  1D75  3448               	retlw	72
  1774  1D76  3400               	retlw	0
  1775  1D77  3450               	retlw	80
  1776  1D78  3400               	retlw	0
  1777  1D79  345B               	retlw	91
  1778  1D7A  3400               	retlw	0
  1779  1D7B  3467               	retlw	103
  1780  1D7C  3400               	retlw	0
  1781  1D7D  3478               	retlw	120
  1782  1D7E  3400               	retlw	0
  1783  1D7F  348E               	retlw	142
  1784  1D80  3400               	retlw	0
  1785  1D81  34AE               	retlw	174
  1786  1D82  3400               	retlw	0
  1787  1D83  34DF               	retlw	223
  1788  1D84  3400               	retlw	0
  1789  1D85  34FF               	retlw	255
  1790  1D86  3400               	retlw	0
  1791  1D87  34FF               	retlw	255
  1792  1D88  3400               	retlw	0
  1793  1D89  34FF               	retlw	255
  1794  1D8A  3400               	retlw	0
  1795                           
  1796                           	psect	idataBANK10
  1797  1B4D                     __pidataBANK10:	
  1798                           
  1799                           ;initializer for _mod2
  1800  1B4D  3400               	retlw	0
  1801  1B4E  3400               	retlw	0
  1802  1B4F  340D               	retlw	13
  1803  1B50  3400               	retlw	0
  1804  1B51  341B               	retlw	27
  1805  1B52  3400               	retlw	0
  1806  1B53  3428               	retlw	40
  1807  1B54  3400               	retlw	0
  1808  1B55  3435               	retlw	53
  1809  1B56  3400               	retlw	0
  1810  1B57  3443               	retlw	67
  1811  1B58  3400               	retlw	0
  1812  1B59  3450               	retlw	80
  1813  1B5A  3400               	retlw	0
  1814  1B5B  345D               	retlw	93
  1815  1B5C  3400               	retlw	0
  1816  1B5D  345D               	retlw	93
  1817  1B5E  3400               	retlw	0
  1818  1B5F  3450               	retlw	80
  1819  1B60  3400               	retlw	0
  1820  1B61  3443               	retlw	67
  1821  1B62  3400               	retlw	0
  1822  1B63  3435               	retlw	53
  1823  1B64  3400               	retlw	0
  1824  1B65  3428               	retlw	40
  1825  1B66  3400               	retlw	0
  1826  1B67  341B               	retlw	27
  1827  1B68  3400               	retlw	0
  1828  1B69  340D               	retlw	13
  1829  1B6A  3400               	retlw	0
  1830  1B6B  3400               	retlw	0
  1831  1B6C  3400               	retlw	0
  1832  1B6D  34F3               	retlw	243
  1833  1B6E  34FF               	retlw	255
  1834  1B6F  34E5               	retlw	229
  1835  1B70  34FF               	retlw	255
  1836  1B71  34D8               	retlw	216
  1837  1B72  34FF               	retlw	255
  1838  1B73  34CB               	retlw	203
  1839  1B74  34FF               	retlw	255
  1840  1B75  34BD               	retlw	189
  1841  1B76  34FF               	retlw	255
  1842  1B77  34B0               	retlw	176
  1843  1B78  34FF               	retlw	255
  1844  1B79  34A3               	retlw	163
  1845  1B7A  34FF               	retlw	255
  1846  1B7B  34A3               	retlw	163
  1847  1B7C  34FF               	retlw	255
  1848  1B7D  34B0               	retlw	176
  1849  1B7E  34FF               	retlw	255
  1850  1B7F  34BD               	retlw	189
  1851  1B80  34FF               	retlw	255
  1852  1B81  34CB               	retlw	203
  1853  1B82  34FF               	retlw	255
  1854  1B83  34D8               	retlw	216
  1855  1B84  34FF               	retlw	255
  1856  1B85  34E5               	retlw	229
  1857  1B86  34FF               	retlw	255
  1858                           
  1859                           	psect	idataBANK11
  1860  1B13                     __pidataBANK11:	
  1861                           
  1862                           ;initializer for _mod3
  1863  1B13  3400               	retlw	0
  1864  1B14  3400               	retlw	0
  1865  1B15  3407               	retlw	7
  1866  1B16  3400               	retlw	0
  1867  1B17  340D               	retlw	13
  1868  1B18  3400               	retlw	0
  1869  1B19  3414               	retlw	20
  1870  1B1A  3400               	retlw	0
  1871  1B1B  341B               	retlw	27
  1872  1B1C  3400               	retlw	0
  1873  1B1D  3421               	retlw	33
  1874  1B1E  3400               	retlw	0
  1875  1B1F  3428               	retlw	40
  1876  1B20  3400               	retlw	0
  1877  1B21  342F               	retlw	47
  1878  1B22  3400               	retlw	0
  1879  1B23  3435               	retlw	53
  1880  1B24  3400               	retlw	0
  1881  1B25  343C               	retlw	60
  1882  1B26  3400               	retlw	0
  1883  1B27  3443               	retlw	67
  1884  1B28  3400               	retlw	0
  1885  1B29  3449               	retlw	73
  1886  1B2A  3400               	retlw	0
  1887  1B2B  3450               	retlw	80
  1888  1B2C  3400               	retlw	0
  1889  1B2D  3457               	retlw	87
  1890  1B2E  3400               	retlw	0
  1891  1B2F  345D               	retlw	93
  1892  1B30  3400               	retlw	0
  1893  1B31  349C               	retlw	156
  1894  1B32  34FF               	retlw	255
  1895  1B33  34A3               	retlw	163
  1896  1B34  34FF               	retlw	255
  1897  1B35  34A9               	retlw	169
  1898  1B36  34FF               	retlw	255
  1899  1B37  34B0               	retlw	176
  1900  1B38  34FF               	retlw	255
  1901  1B39  34B7               	retlw	183
  1902  1B3A  34FF               	retlw	255
  1903  1B3B  34BD               	retlw	189
  1904  1B3C  34FF               	retlw	255
  1905  1B3D  34C4               	retlw	196
  1906  1B3E  34FF               	retlw	255
  1907  1B3F  34CB               	retlw	203
  1908  1B40  34FF               	retlw	255
  1909  1B41  34D1               	retlw	209
  1910  1B42  34FF               	retlw	255
  1911  1B43  34D8               	retlw	216
  1912  1B44  34FF               	retlw	255
  1913  1B45  34DF               	retlw	223
  1914  1B46  34FF               	retlw	255
  1915  1B47  34E5               	retlw	229
  1916  1B48  34FF               	retlw	255
  1917  1B49  34EC               	retlw	236
  1918  1B4A  34FF               	retlw	255
  1919  1B4B  34F3               	retlw	243
  1920  1B4C  34FF               	retlw	255
  1921                           
  1922                           	psect	idataBIGRAM
  1923  04FB                     __pidataBIGRAM:	
  1924                           
  1925                           ;initializer for _delay
  1926  04FB  3422               	retlw	34
  1927  04FC  3408               	retlw	8
  1928  04FD  34FC               	retlw	252
  1929  04FE  3407               	retlw	7
  1930  04FF  34D8               	retlw	216
  1931  0500  3407               	retlw	7
  1932  0501  34B5               	retlw	181
  1933  0502  3407               	retlw	7
  1934  0503  3493               	retlw	147
  1935  0504  3407               	retlw	7
  1936  0505  3472               	retlw	114
  1937  0506  3407               	retlw	7
  1938  0507  3452               	retlw	82
  1939  0508  3407               	retlw	7
  1940  0509  3434               	retlw	52
  1941  050A  3407               	retlw	7
  1942  050B  3416               	retlw	22
  1943  050C  3407               	retlw	7
  1944  050D  34F9               	retlw	249
  1945  050E  3406               	retlw	6
  1946  050F  34DD               	retlw	221
  1947  0510  3406               	retlw	6
  1948  0511  34C2               	retlw	194
  1949  0512  3406               	retlw	6
  1950  0513  34A8               	retlw	168
  1951  0514  3406               	retlw	6
  1952  0515  348F               	retlw	143
  1953  0516  3406               	retlw	6
  1954  0517  3476               	retlw	118
  1955  0518  3406               	retlw	6
  1956  0519  345E               	retlw	94
  1957  051A  3406               	retlw	6
  1958  051B  3447               	retlw	71
  1959  051C  3406               	retlw	6
  1960  051D  3430               	retlw	48
  1961  051E  3406               	retlw	6
  1962  051F  341A               	retlw	26
  1963  0520  3406               	retlw	6
  1964  0521  3405               	retlw	5
  1965  0522  3406               	retlw	6
  1966  0523  34F0               	retlw	240
  1967  0524  3405               	retlw	5
  1968  0525  34DC               	retlw	220
  1969  0526  3405               	retlw	5
  1970  0527  34C8               	retlw	200
  1971  0528  3405               	retlw	5
  1972  0529  34B5               	retlw	181
  1973  052A  3405               	retlw	5
  1974  052B  34A3               	retlw	163
  1975  052C  3405               	retlw	5
  1976  052D  3490               	retlw	144
  1977  052E  3405               	retlw	5
  1978  052F  347F               	retlw	127
  1979  0530  3405               	retlw	5
  1980  0531  346D               	retlw	109
  1981  0532  3405               	retlw	5
  1982  0533  345C               	retlw	92
  1983  0534  3405               	retlw	5
  1984  0535  344C               	retlw	76
  1985  0536  3405               	retlw	5
  1986  0537  343C               	retlw	60
  1987  0538  3405               	retlw	5
  1988  0539  342C               	retlw	44
  1989  053A  3405               	retlw	5
  1990  053B  341D               	retlw	29
  1991  053C  3405               	retlw	5
  1992  053D  340E               	retlw	14
  1993  053E  3405               	retlw	5
  1994  053F  34FF               	retlw	255
  1995  0540  3404               	retlw	4
  1996  0541  34F1               	retlw	241
  1997  0542  3404               	retlw	4
  1998  0543  34E2               	retlw	226
  1999  0544  3404               	retlw	4
  2000  0545  34D5               	retlw	213
  2001  0546  3404               	retlw	4
  2002  0547  34C7               	retlw	199
  2003  0548  3404               	retlw	4
  2004  0549  34BA               	retlw	186
  2005  054A  3404               	retlw	4
  2006  054B  34AD               	retlw	173
  2007  054C  3404               	retlw	4
  2008  054D  34A1               	retlw	161
  2009  054E  3404               	retlw	4
  2010  054F  3494               	retlw	148
  2011  0550  3404               	retlw	4
  2012  0551  3488               	retlw	136
  2013  0552  3404               	retlw	4
  2014  0553  347D               	retlw	125
  2015  0554  3404               	retlw	4
  2016  0555  3471               	retlw	113
  2017  0556  3404               	retlw	4
  2018  0557  3466               	retlw	102
  2019  0558  3404               	retlw	4
  2020  0559  345A               	retlw	90
  2021  055A  3404               	retlw	4
  2022  055B  3450               	retlw	80
  2023  055C  3404               	retlw	4
  2024  055D  3445               	retlw	69
  2025  055E  3404               	retlw	4
  2026  055F  343A               	retlw	58
  2027  0560  3404               	retlw	4
  2028  0561  3430               	retlw	48
  2029  0562  3404               	retlw	4
  2030  0563  3426               	retlw	38
  2031  0564  3404               	retlw	4
  2032  0565  341C               	retlw	28
  2033  0566  3404               	retlw	4
  2034  0567  3412               	retlw	18
  2035  0568  3404               	retlw	4
  2036  0569  3409               	retlw	9
  2037  056A  3404               	retlw	4
  2038  056B  34FF               	retlw	255
  2039  056C  3403               	retlw	3
  2040  056D  34F6               	retlw	246
  2041  056E  3403               	retlw	3
  2042  056F  34ED               	retlw	237
  2043  0570  3403               	retlw	3
  2044  0571  34E4               	retlw	228
  2045  0572  3403               	retlw	3
  2046  0573  34DC               	retlw	220
  2047  0574  3403               	retlw	3
  2048  0575  34D3               	retlw	211
  2049  0576  3403               	retlw	3
  2050  0577  34CB               	retlw	203
  2051  0578  3403               	retlw	3
  2052  0579  34C2               	retlw	194
  2053  057A  3403               	retlw	3
  2054  057B  34BA               	retlw	186
  2055  057C  3403               	retlw	3
  2056  057D  34B2               	retlw	178
  2057  057E  3403               	retlw	3
  2058  057F  34AA               	retlw	170
  2059  0580  3403               	retlw	3
  2060  0581  34A2               	retlw	162
  2061  0582  3403               	retlw	3
  2062  0583  349B               	retlw	155
  2063  0584  3403               	retlw	3
  2064  0585  3493               	retlw	147
  2065  0586  3403               	retlw	3
  2066  0587  348C               	retlw	140
  2067  0588  3403               	retlw	3
  2068  0589  3485               	retlw	133
  2069  058A  3403               	retlw	3
  2070  058B  347E               	retlw	126
  2071  058C  3403               	retlw	3
  2072  058D  3477               	retlw	119
  2073  058E  3403               	retlw	3
  2074  058F  3470               	retlw	112
  2075  0590  3403               	retlw	3
  2076  0591  3469               	retlw	105
  2077  0592  3403               	retlw	3
  2078  0593  3462               	retlw	98
  2079  0594  3403               	retlw	3
  2080  0595  345C               	retlw	92
  2081  0596  3403               	retlw	3
  2082  0597  3455               	retlw	85
  2083  0598  3403               	retlw	3
  2084  0599  344F               	retlw	79
  2085  059A  3403               	retlw	3
  2086  059B  3448               	retlw	72
  2087  059C  3403               	retlw	3
  2088  059D  3442               	retlw	66
  2089  059E  3403               	retlw	3
  2090  059F  343C               	retlw	60
  2091  05A0  3403               	retlw	3
  2092  05A1  3436               	retlw	54
  2093  05A2  3403               	retlw	3
  2094  05A3  3430               	retlw	48
  2095  05A4  3403               	retlw	3
  2096  05A5  342A               	retlw	42
  2097  05A6  3403               	retlw	3
  2098  05A7  3424               	retlw	36
  2099  05A8  3403               	retlw	3
  2100  05A9  341F               	retlw	31
  2101  05AA  3403               	retlw	3
  2102  05AB  3419               	retlw	25
  2103  05AC  3403               	retlw	3
  2104  05AD  3413               	retlw	19
  2105  05AE  3403               	retlw	3
  2106  05AF  340E               	retlw	14
  2107  05B0  3403               	retlw	3
  2108  05B1  3409               	retlw	9
  2109  05B2  3403               	retlw	3
  2110  05B3  3403               	retlw	3
  2111  05B4  3403               	retlw	3
  2112  05B5  34FE               	retlw	254
  2113  05B6  3402               	retlw	2
  2114  05B7  34F9               	retlw	249
  2115  05B8  3402               	retlw	2
  2116  05B9  34F4               	retlw	244
  2117  05BA  3402               	retlw	2
  2118  05BB  34EF               	retlw	239
  2119  05BC  3402               	retlw	2
  2120  05BD  34EA               	retlw	234
  2121  05BE  3402               	retlw	2
  2122  05BF  34E5               	retlw	229
  2123  05C0  3402               	retlw	2
  2124  05C1  34E0               	retlw	224
  2125  05C2  3402               	retlw	2
  2126  05C3  34DB               	retlw	219
  2127  05C4  3402               	retlw	2
  2128  05C5  34D7               	retlw	215
  2129  05C6  3402               	retlw	2
  2130  05C7  34D2               	retlw	210
  2131  05C8  3402               	retlw	2
  2132  05C9  34CD               	retlw	205
  2133  05CA  3402               	retlw	2
  2134  05CB  34C9               	retlw	201
  2135  05CC  3402               	retlw	2
  2136  05CD  34C4               	retlw	196
  2137  05CE  3402               	retlw	2
  2138  05CF  34C0               	retlw	192
  2139  05D0  3402               	retlw	2
  2140  05D1  34BC               	retlw	188
  2141  05D2  3402               	retlw	2
  2142  05D3  34B7               	retlw	183
  2143  05D4  3402               	retlw	2
  2144  05D5  34B3               	retlw	179
  2145  05D6  3402               	retlw	2
  2146  05D7  34AF               	retlw	175
  2147  05D8  3402               	retlw	2
  2148  05D9  34AB               	retlw	171
  2149  05DA  3402               	retlw	2
  2150  05DB  34A6               	retlw	166
  2151  05DC  3402               	retlw	2
  2152  05DD  34A2               	retlw	162
  2153  05DE  3402               	retlw	2
  2154  05DF  349E               	retlw	158
  2155  05E0  3402               	retlw	2
  2156  05E1  349A               	retlw	154
  2157  05E2  3402               	retlw	2
  2158  05E3  3497               	retlw	151
  2159  05E4  3402               	retlw	2
  2160  05E5  3493               	retlw	147
  2161  05E6  3402               	retlw	2
  2162  05E7  348F               	retlw	143
  2163  05E8  3402               	retlw	2
  2164  05E9  348B               	retlw	139
  2165  05EA  3402               	retlw	2
  2166  05EB  3487               	retlw	135
  2167  05EC  3402               	retlw	2
  2168  05ED  3484               	retlw	132
  2169  05EE  3402               	retlw	2
  2170  05EF  3480               	retlw	128
  2171  05F0  3402               	retlw	2
  2172  05F1  347C               	retlw	124
  2173  05F2  3402               	retlw	2
  2174  05F3  3479               	retlw	121
  2175  05F4  3402               	retlw	2
  2176  05F5  3475               	retlw	117
  2177  05F6  3402               	retlw	2
  2178  05F7  3472               	retlw	114
  2179  05F8  3402               	retlw	2
  2180  05F9  346E               	retlw	110
  2181  05FA  3402               	retlw	2
  2182  05FB  346B               	retlw	107
  2183  05FC  3402               	retlw	2
  2184  05FD  3467               	retlw	103
  2185  05FE  3402               	retlw	2
  2186  05FF  3464               	retlw	100
  2187  0600  3402               	retlw	2
  2188  0601  3461               	retlw	97
  2189  0602  3402               	retlw	2
  2190  0603  345E               	retlw	94
  2191  0604  3402               	retlw	2
  2192  0605  345A               	retlw	90
  2193  0606  3402               	retlw	2
  2194  0607  3457               	retlw	87
  2195  0608  3402               	retlw	2
  2196  0609  3454               	retlw	84
  2197  060A  3402               	retlw	2
  2198  060B  3451               	retlw	81
  2199  060C  3402               	retlw	2
  2200  060D  344E               	retlw	78
  2201  060E  3402               	retlw	2
  2202  060F  344B               	retlw	75
  2203  0610  3402               	retlw	2
  2204  0611  3448               	retlw	72
  2205  0612  3402               	retlw	2
  2206  0613  3445               	retlw	69
  2207  0614  3402               	retlw	2
  2208  0615  3442               	retlw	66
  2209  0616  3402               	retlw	2
  2210  0617  343F               	retlw	63
  2211  0618  3402               	retlw	2
  2212  0619  343C               	retlw	60
  2213  061A  3402               	retlw	2
  2214  061B  3439               	retlw	57
  2215  061C  3402               	retlw	2
  2216  061D  3436               	retlw	54
  2217  061E  3402               	retlw	2
  2218  061F  3433               	retlw	51
  2219  0620  3402               	retlw	2
  2220  0621  3430               	retlw	48
  2221  0622  3402               	retlw	2
  2222  0623  342E               	retlw	46
  2223  0624  3402               	retlw	2
  2224  0625  342B               	retlw	43
  2225  0626  3402               	retlw	2
  2226  0627  3428               	retlw	40
  2227  0628  3402               	retlw	2
  2228  0629  3425               	retlw	37
  2229  062A  3402               	retlw	2
  2230  062B  3423               	retlw	35
  2231  062C  3402               	retlw	2
  2232  062D  3420               	retlw	32
  2233  062E  3402               	retlw	2
  2234  062F  341E               	retlw	30
  2235  0630  3402               	retlw	2
  2236  0631  341B               	retlw	27
  2237  0632  3402               	retlw	2
  2238  0633  3418               	retlw	24
  2239  0634  3402               	retlw	2
  2240  0635  3416               	retlw	22
  2241  0636  3402               	retlw	2
  2242  0637  3413               	retlw	19
  2243  0638  3402               	retlw	2
  2244  0639  3411               	retlw	17
  2245  063A  3402               	retlw	2
  2246  063B  340E               	retlw	14
  2247  063C  3402               	retlw	2
  2248  063D  340C               	retlw	12
  2249  063E  3402               	retlw	2
  2250  063F  340A               	retlw	10
  2251  0640  3402               	retlw	2
  2252  0641  3407               	retlw	7
  2253  0642  3402               	retlw	2
  2254  0643  3405               	retlw	5
  2255  0644  3402               	retlw	2
  2256  0645  3402               	retlw	2
  2257  0646  3402               	retlw	2
  2258  0647  3400               	retlw	0
  2259  0648  3402               	retlw	2
  2260  0649  34FE               	retlw	254
  2261  064A  3401               	retlw	1
  2262  064B  34FB               	retlw	251
  2263  064C  3401               	retlw	1
  2264  064D  34F9               	retlw	249
  2265  064E  3401               	retlw	1
  2266  064F  34F7               	retlw	247
  2267  0650  3401               	retlw	1
  2268  0651  34F5               	retlw	245
  2269  0652  3401               	retlw	1
  2270  0653  34F2               	retlw	242
  2271  0654  3401               	retlw	1
  2272  0655  34F0               	retlw	240
  2273  0656  3401               	retlw	1
  2274  0657  34EE               	retlw	238
  2275  0658  3401               	retlw	1
  2276  0659  34EC               	retlw	236
  2277  065A  3401               	retlw	1
  2278  065B  34EA               	retlw	234
  2279  065C  3401               	retlw	1
  2280  065D  34E8               	retlw	232
  2281  065E  3401               	retlw	1
  2282  065F  34E6               	retlw	230
  2283  0660  3401               	retlw	1
  2284  0661  34E3               	retlw	227
  2285  0662  3401               	retlw	1
  2286  0663  34E1               	retlw	225
  2287  0664  3401               	retlw	1
  2288  0665  34DF               	retlw	223
  2289  0666  3401               	retlw	1
  2290  0667  34DD               	retlw	221
  2291  0668  3401               	retlw	1
  2292  0669  34DB               	retlw	219
  2293  066A  3401               	retlw	1
  2294  066B  34D9               	retlw	217
  2295  066C  3401               	retlw	1
  2296  066D  34D7               	retlw	215
  2297  066E  3401               	retlw	1
  2298  066F  34D5               	retlw	213
  2299  0670  3401               	retlw	1
  2300  0671  34D3               	retlw	211
  2301  0672  3401               	retlw	1
  2302  0673  34D2               	retlw	210
  2303  0674  3401               	retlw	1
  2304  0675  34D0               	retlw	208
  2305  0676  3401               	retlw	1
  2306  0677  34CE               	retlw	206
  2307  0678  3401               	retlw	1
  2308  0679  34CC               	retlw	204
  2309  067A  3401               	retlw	1
  2310  067B  34CA               	retlw	202
  2311  067C  3401               	retlw	1
  2312  067D  34C8               	retlw	200
  2313  067E  3401               	retlw	1
  2314  067F  34C6               	retlw	198
  2315  0680  3401               	retlw	1
  2316  0681  34C4               	retlw	196
  2317  0682  3401               	retlw	1
  2318  0683  34C3               	retlw	195
  2319  0684  3401               	retlw	1
  2320  0685  34C1               	retlw	193
  2321  0686  3401               	retlw	1
  2322  0687  34BF               	retlw	191
  2323  0688  3401               	retlw	1
  2324  0689  34BD               	retlw	189
  2325  068A  3401               	retlw	1
  2326  068B  34BC               	retlw	188
  2327  068C  3401               	retlw	1
  2328  068D  34BA               	retlw	186
  2329  068E  3401               	retlw	1
  2330  068F  34B8               	retlw	184
  2331  0690  3401               	retlw	1
  2332  0691  34B6               	retlw	182
  2333  0692  3401               	retlw	1
  2334  0693  34B5               	retlw	181
  2335  0694  3401               	retlw	1
  2336  0695  34B3               	retlw	179
  2337  0696  3401               	retlw	1
  2338  0697  34B1               	retlw	177
  2339  0698  3401               	retlw	1
  2340  0699  34B0               	retlw	176
  2341  069A  3401               	retlw	1
  2342  069B  34AE               	retlw	174
  2343  069C  3401               	retlw	1
  2344  069D  34AC               	retlw	172
  2345  069E  3401               	retlw	1
  2346  069F  34AB               	retlw	171
  2347  06A0  3401               	retlw	1
  2348  06A1  34A9               	retlw	169
  2349  06A2  3401               	retlw	1
  2350  06A3  34A8               	retlw	168
  2351  06A4  3401               	retlw	1
  2352  06A5  34A6               	retlw	166
  2353  06A6  3401               	retlw	1
  2354  06A7  34A4               	retlw	164
  2355  06A8  3401               	retlw	1
  2356  06A9  34A3               	retlw	163
  2357  06AA  3401               	retlw	1
  2358  06AB  34A1               	retlw	161
  2359  06AC  3401               	retlw	1
  2360  06AD  34A0               	retlw	160
  2361  06AE  3401               	retlw	1
  2362  06AF  349E               	retlw	158
  2363  06B0  3401               	retlw	1
  2364  06B1  349D               	retlw	157
  2365  06B2  3401               	retlw	1
  2366  06B3  349B               	retlw	155
  2367  06B4  3401               	retlw	1
  2368  06B5  349A               	retlw	154
  2369  06B6  3401               	retlw	1
  2370  06B7  3498               	retlw	152
  2371  06B8  3401               	retlw	1
  2372  06B9  3497               	retlw	151
  2373  06BA  3401               	retlw	1
  2374  06BB  3495               	retlw	149
  2375  06BC  3401               	retlw	1
  2376  06BD  3494               	retlw	148
  2377  06BE  3401               	retlw	1
  2378  06BF  3492               	retlw	146
  2379  06C0  3401               	retlw	1
  2380  06C1  3491               	retlw	145
  2381  06C2  3401               	retlw	1
  2382  06C3  3490               	retlw	144
  2383  06C4  3401               	retlw	1
  2384  06C5  348E               	retlw	142
  2385  06C6  3401               	retlw	1
  2386  06C7  348D               	retlw	141
  2387  06C8  3401               	retlw	1
  2388  06C9  348B               	retlw	139
  2389  06CA  3401               	retlw	1
  2390  06CB  348A               	retlw	138
  2391  06CC  3401               	retlw	1
  2392  06CD  3489               	retlw	137
  2393  06CE  3401               	retlw	1
  2394  06CF  3487               	retlw	135
  2395  06D0  3401               	retlw	1
  2396  06D1  3486               	retlw	134
  2397  06D2  3401               	retlw	1
  2398  06D3  3485               	retlw	133
  2399  06D4  3401               	retlw	1
  2400  06D5  3483               	retlw	131
  2401  06D6  3401               	retlw	1
  2402  06D7  3482               	retlw	130
  2403  06D8  3401               	retlw	1
  2404  06D9  3481               	retlw	129
  2405  06DA  3401               	retlw	1
  2406  06DB  347F               	retlw	127
  2407  06DC  3401               	retlw	1
  2408  06DD  347E               	retlw	126
  2409  06DE  3401               	retlw	1
  2410  06DF  347D               	retlw	125
  2411  06E0  3401               	retlw	1
  2412  06E1  347B               	retlw	123
  2413  06E2  3401               	retlw	1
  2414  06E3  347A               	retlw	122
  2415  06E4  3401               	retlw	1
  2416  06E5  3479               	retlw	121
  2417  06E6  3401               	retlw	1
  2418  06E7  3478               	retlw	120
  2419  06E8  3401               	retlw	1
  2420  06E9  3476               	retlw	118
  2421  06EA  3401               	retlw	1
  2422  06EB  3475               	retlw	117
  2423  06EC  3401               	retlw	1
  2424  06ED  3474               	retlw	116
  2425  06EE  3401               	retlw	1
  2426  06EF  3473               	retlw	115
  2427  06F0  3401               	retlw	1
  2428  06F1  3471               	retlw	113
  2429  06F2  3401               	retlw	1
  2430  06F3  3470               	retlw	112
  2431  06F4  3401               	retlw	1
  2432  06F5  346F               	retlw	111
  2433  06F6  3401               	retlw	1
  2434  06F7  346E               	retlw	110
  2435  06F8  3401               	retlw	1
  2436                           
  2437                           	psect	stringtext
  2438  2000                     __pstringtext:	
  2439  2000                     sin@coeff_a:	
  2440  2000  34F4               	retlw	244
  2441  2001  344A               	retlw	74
  2442  2002  3448               	retlw	72
  2443  2003  3495               	retlw	149
  2444  2004  3495               	retlw	149
  2445  2005  34C7               	retlw	199
  2446  2006  34C1               	retlw	193
  2447  2007  34DC               	retlw	220
  2448  2008  3445               	retlw	69
  2449  2009  34DC               	retlw	220
  2450  200A  346D               	retlw	109
  2451  200B  34C3               	retlw	195
  2452  200C  34B3               	retlw	179
  2453  200D  3433               	retlw	51
  2454  200E  3440               	retlw	64
  2455  200F                     __end_ofsin@coeff_a:	
  2456  200F                     sin@coeff_b:	
  2457  200F  3434               	retlw	52
  2458  2010  3401               	retlw	1
  2459  2011  3448               	retlw	72
  2460  2012  349D               	retlw	157
  2461  2013  34B0               	retlw	176
  2462  2014  3445               	retlw	69
  2463  2015  3400               	retlw	0
  2464  2016  34DA               	retlw	218
  2465  2017  3442               	retlw	66
  2466  2018  3400               	retlw	0
  2467  2019  3480               	retlw	128
  2468  201A  343F               	retlw	63
  2469  201B                     __end_ofsin@coeff_b:	
  2470  000B                     _INTCONbits	set	11
  2471  000D                     _PORTBbits	set	13
  2472  000F                     _PORTDbits	set	15
  2473  0010                     _PORTEbits	set	16
  2474  001B                     _PR2	set	27
  2475  001C                     _T2CONbits	set	28
  2476  009D                     _ADCON0bits	set	157
  2477  009E                     _ADCON1bits	set	158
  2478  009C                     _ADRESH	set	156
  2479  009B                     _ADRESL	set	155
  2480  0095                     _OPTION_REGbits	set	149
  2481  0099                     _OSCCONbits	set	153
  2482  008D                     _TRISBbits	set	141
  2483  008E                     _TRISCbits	set	142
  2484  008F                     _TRISDbits	set	143
  2485  0090                     _TRISEbits	set	144
  2486  011D                     _APFCONbits	set	285
  2487  010D                     _LATBbits	set	269
  2488  010E                     _LATCbits	set	270
  2489  010F                     _LATDbits	set	271
  2490  018D                     _ANSELBbits	set	397
  2491  0190                     _ANSELEbits	set	400
  2492  0192                     _PMADRH	set	402
  2493  0191                     _PMADRL	set	401
  2494  0195                     _PMCON1bits	set	405
  2495  0196                     _PMCON2	set	406
  2496  0194                     _PMDATH	set	404
  2497  0193                     _PMDATL	set	403
  2498  0291                     _CCPR1	set	657
  2499  0298                     _CCPR2	set	664
  2500  0293                     _CCP1CONbits	set	659
  2501  029A                     _CCP2CONbits	set	666
  2502  029D                     _CCPTMRS0	set	669
  2503  029E                     _CCPTMRS1	set	670
  2504  029F                     _CCPTMRS2	set	671
  2505  0311                     _CCPR3	set	785
  2506  0318                     _CCPR4	set	792
  2507  031C                     _CCPR5	set	796
  2508  0313                     _CCP3CONbits	set	787
  2509  031A                     _CCP4CONbits	set	794
  2510  031E                     _CCP5CONbits	set	798
  2511  030C                     _TRISFbits	set	780
  2512  030D                     _TRISGbits	set	781
  2513  038C                     _LATFbits	set	908
  2514  038D                     _LATGbits	set	909
  2515  061A                     _CCPR9	set	1562
  2516  061F                     _CCP10CONbits	set	1567
  2517  0613                     _CCP6CONbits	set	1555
  2518  0616                     _CCP7CONbits	set	1558
  2519  0619                     _CCP8CONbits	set	1561
  2520  061C                     _CCP9CONbits	set	1564
  2521                           
  2522                           ; #config settings
  2523  0000                     
  2524                           	psect	cinit
  2525  0160                     start_initialization:	
  2526  0160                     __initialization:		;BIGRAM
  2527                           
  2528                           ; Clear objects allocated to COMMON
  2529  0160  01F9               	clrf	__pbssCOMMON& (0+127)
  2530  0161  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  2531  0162  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  2532  0163  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  2533                           
  2534                           ; Clear objects allocated to BANK1
  2535  0164  0021               	movlb	1	; select bank1
  2536  0165  01ED               	clrf	__pbssBANK1& (0+127)
  2537  0166  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  2538                           
  2539                           ; Clear objects allocated to BANK2
  2540  0167  3045               	movlw	low __pbssBANK2
  2541  0168  0084               	movwf	4
  2542  0169  3001               	movlw	high __pbssBANK2
  2543  016A  0085               	movwf	5
  2544  016B  3018               	movlw	24
  2545  016C  00FE               	movwf	btemp
  2546  016D  3000               	movlw	0
  2547  016E  00FF               	movwf	btemp+1
  2548  016F  3199  2173  3181   	fcall	clear_ram0
  2549                           
  2550                           ; Clear objects allocated to BANK3
  2551  0172  30A0               	movlw	low __pbssBANK3
  2552  0173  0084               	movwf	4
  2553  0174  3001               	movlw	high __pbssBANK3
  2554  0175  0085               	movwf	5
  2555  0176  303C               	movlw	60
  2556  0177  00FE               	movwf	btemp
  2557  0178  3000               	movlw	0
  2558  0179  00FF               	movwf	btemp+1
  2559  017A  3199  2173  3181   	fcall	clear_ram0
  2560                           
  2561                           ; Clear objects allocated to BANK4
  2562  017D  3020               	movlw	low __pbssBANK4
  2563  017E  0084               	movwf	4
  2564  017F  3002               	movlw	high __pbssBANK4
  2565  0180  0085               	movwf	5
  2566  0181  3030               	movlw	48
  2567  0182  00FE               	movwf	btemp
  2568  0183  3000               	movlw	0
  2569  0184  00FF               	movwf	btemp+1
  2570  0185  3199  2173  3181   	fcall	clear_ram0
  2571                           
  2572                           ; Clear objects allocated to BANK6
  2573  0188  3020               	movlw	low __pbssBANK6
  2574  0189  0084               	movwf	4
  2575  018A  3003               	movlw	high __pbssBANK6
  2576  018B  0085               	movwf	5
  2577  018C  3040               	movlw	64
  2578  018D  00FE               	movwf	btemp
  2579  018E  3000               	movlw	0
  2580  018F  00FF               	movwf	btemp+1
  2581  0190  3199  2173  3181   	fcall	clear_ram0
  2582                           
  2583                           ; Initialize objects allocated to BIGRAM
  2584  0193  30FB               	movlw	low __pidataBIGRAM
  2585  0194  0084               	movwf	4
  2586  0195  3084               	movlw	(high __pidataBIGRAM)| (0+128)
  2587  0196  0085               	movwf	5
  2588  0197  30F2               	movlw	low (0+9202)
  2589  0198  0086               	movwf	6
  2590  0199  3023               	movlw	high (0+9202)
  2591  019A  0087               	movwf	7
  2592  019B  3001               	movlw	1
  2593  019C  00FF               	movwf	btemp+1
  2594  019D  30FE               	movlw	254
  2595  019E  3199  2167  3181   	fcall	init_ram
  2596                           
  2597                           ; Initialize objects allocated to BANK2
  2598  01A1  3091               	movlw	low __pidataBANK2
  2599  01A2  0084               	movwf	4
  2600  01A3  3099               	movlw	(high __pidataBANK2)| (0+128)
  2601  01A4  0085               	movwf	5
  2602  01A5  305D               	movlw	low __pdataBANK2
  2603  01A6  0086               	movwf	6
  2604  01A7  3001               	movlw	high __pdataBANK2
  2605  01A8  0087               	movwf	7
  2606  01A9  3000               	movlw	0
  2607  01AA  00FF               	movwf	btemp+1
  2608  01AB  3012               	movlw	18
  2609  01AC  3199  2167  3181   	fcall	init_ram
  2610                           
  2611                           ; Initialize objects allocated to BANK3
  2612  01AF  307F               	movlw	low __pidataBANK3
  2613  01B0  0084               	movwf	4
  2614  01B1  3099               	movlw	(high __pidataBANK3)| (0+128)
  2615  01B2  0085               	movwf	5
  2616  01B3  30DC               	movlw	low __pdataBANK3
  2617  01B4  0086               	movwf	6
  2618  01B5  3001               	movlw	high __pdataBANK3
  2619  01B6  0087               	movwf	7
  2620  01B7  3000               	movlw	0
  2621  01B8  00FF               	movwf	btemp+1
  2622  01B9  3012               	movlw	18
  2623  01BA  3199  2167  3181   	fcall	init_ram
  2624                           
  2625                           ; Initialize objects allocated to BANK4
  2626  01BD  30FC               	movlw	low __pidataBANK4
  2627  01BE  0084               	movwf	4
  2628  01BF  3087               	movlw	(high __pidataBANK4)| (0+128)
  2629  01C0  0085               	movwf	5
  2630  01C1  3050               	movlw	low __pdataBANK4
  2631  01C2  0086               	movwf	6
  2632  01C3  3002               	movlw	high __pdataBANK4
  2633  01C4  0087               	movwf	7
  2634  01C5  3000               	movlw	0
  2635  01C6  00FF               	movwf	btemp+1
  2636  01C7  3004               	movlw	4
  2637  01C8  3199  2167  3181   	fcall	init_ram
  2638                           
  2639                           ; Initialize objects allocated to BANK5
  2640  01CB  30FD               	movlw	low __pidataBANK5
  2641  01CC  0084               	movwf	4
  2642  01CD  309B               	movlw	(high __pidataBANK5)| (0+128)
  2643  01CE  0085               	movwf	5
  2644  01CF  30A0               	movlw	low __pdataBANK5
  2645  01D0  0086               	movwf	6
  2646  01D1  3002               	movlw	high __pdataBANK5
  2647  01D2  0087               	movwf	7
  2648  01D3  3000               	movlw	0
  2649  01D4  00FF               	movwf	btemp+1
  2650  01D5  303C               	movlw	60
  2651  01D6  3199  2167  3181   	fcall	init_ram
  2652                           
  2653                           ; Initialize objects allocated to BANK7
  2654  01D9  3087               	movlw	low __pidataBANK7
  2655  01DA  0084               	movwf	4
  2656  01DB  309B               	movlw	(high __pidataBANK7)| (0+128)
  2657  01DC  0085               	movwf	5
  2658  01DD  30A0               	movlw	low __pdataBANK7
  2659  01DE  0086               	movwf	6
  2660  01DF  3003               	movlw	high __pdataBANK7
  2661  01E0  0087               	movwf	7
  2662  01E1  3000               	movlw	0
  2663  01E2  00FF               	movwf	btemp+1
  2664  01E3  303A               	movlw	58
  2665  01E4  3199  2167  3181   	fcall	init_ram
  2666                           
  2667                           ; Initialize objects allocated to BANK8
  2668  01E7  308B               	movlw	low __pidataBANK8
  2669  01E8  0084               	movwf	4
  2670  01E9  309D               	movlw	(high __pidataBANK8)| (0+128)
  2671  01EA  0085               	movwf	5
  2672  01EB  3020               	movlw	low __pdataBANK8
  2673  01EC  0086               	movwf	6
  2674  01ED  3004               	movlw	high __pdataBANK8
  2675  01EE  0087               	movwf	7
  2676  01EF  3000               	movlw	0
  2677  01F0  00FF               	movwf	btemp+1
  2678  01F1  3050               	movlw	80
  2679  01F2  3199  2167  3181   	fcall	init_ram
  2680                           
  2681                           ; Initialize objects allocated to BANK9
  2682  01F5  303B               	movlw	low __pidataBANK9
  2683  01F6  0084               	movwf	4
  2684  01F7  309D               	movlw	(high __pidataBANK9)| (0+128)
  2685  01F8  0085               	movwf	5
  2686  01F9  30A0               	movlw	low __pdataBANK9
  2687  01FA  0086               	movwf	6
  2688  01FB  3004               	movlw	high __pdataBANK9
  2689  01FC  0087               	movwf	7
  2690  01FD  3000               	movlw	0
  2691  01FE  00FF               	movwf	btemp+1
  2692  01FF  3050               	movlw	80
  2693  0200  3199  2167  3181   	fcall	init_ram
  2694                           
  2695                           ; Initialize objects allocated to BANK10
  2696  0203  304D               	movlw	low __pidataBANK10
  2697  0204  0084               	movwf	4
  2698  0205  309B               	movlw	(high __pidataBANK10)| (0+128)
  2699  0206  0085               	movwf	5
  2700  0207  3020               	movlw	low __pdataBANK10
  2701  0208  0086               	movwf	6
  2702  0209  3005               	movlw	high __pdataBANK10
  2703  020A  0087               	movwf	7
  2704  020B  3000               	movlw	0
  2705  020C  00FF               	movwf	btemp+1
  2706  020D  303A               	movlw	58
  2707  020E  3199  2167  3181   	fcall	init_ram
  2708                           
  2709                           ; Initialize objects allocated to BANK11
  2710  0211  3013               	movlw	low __pidataBANK11
  2711  0212  0084               	movwf	4
  2712  0213  309B               	movlw	(high __pidataBANK11)| (0+128)
  2713  0214  0085               	movwf	5
  2714  0215  30A0               	movlw	low __pdataBANK11
  2715  0216  0086               	movwf	6
  2716  0217  3005               	movlw	high __pdataBANK11
  2717  0218  0087               	movwf	7
  2718  0219  3000               	movlw	0
  2719  021A  00FF               	movwf	btemp+1
  2720  021B  303A               	movlw	58
  2721  021C  3199  2167         	fcall	init_ram
  2722  021E                     end_of_initialization:	
  2723                           ;End of C runtime variable initialization code
  2724                           
  2725  021E                     __end_of__initialization:	
  2726  021E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2727  021F  0020               	movlb	0
  2728  0220  3194  2CF1         	ljmp	_main	;jump to C main() function
  2729                           
  2730                           	psect	bssCOMMON
  2731  0079                     __pbssCOMMON:	
  2732  0079                     _tap_timer:	
  2733  0079                     	ds	4
  2734                           
  2735                           	psect	bssBANK1
  2736  00ED                     __pbssBANK1:	
  2737  00ED                     _knob_4_pos:	
  2738  00ED                     	ds	2
  2739                           
  2740                           	psect	bssBANK2
  2741  0145                     __pbssBANK2:	
  2742  0145                     _sub_timer:	
  2743  0145                     	ds	4
  2744  0149                     _timer:	
  2745  0149                     	ds	4
  2746  014D                     _bypass_state:	
  2747  014D                     	ds	2
  2748  014F                     _flash_saving:	
  2749  014F                     	ds	2
  2750  0151                     _iCnt:	
  2751  0151                     	ds	2
  2752  0153                     _knob_1_pos:	
  2753  0153                     	ds	2
  2754  0155                     _knob_2_pos:	
  2755  0155                     	ds	2
  2756  0157                     _knob_3_pos:	
  2757  0157                     	ds	2
  2758  0159                     _mod_counter:	
  2759  0159                     	ds	2
  2760  015B                     _saving_state:	
  2761  015B                     	ds	2
  2762                           
  2763                           	psect	dataBANK2
  2764  015D                     __pdataBANK2:	
  2765  015D                     _baseline_delay_time:	
  2766  015D                     	ds	4
  2767  0161                     _delay_time:	
  2768  0161                     	ds	4
  2769  0165                     _bottom_push_state:	
  2770  0165                     	ds	2
  2771  0167                     _knob1_prev:	
  2772  0167                     	ds	2
  2773  0169                     _num_taps:	
  2774  0169                     	ds	2
  2775  016B                     _tap_iteration:	
  2776  016B                     	ds	2
  2777  016D                     _top_push_state:	
  2778  016D                     	ds	2
  2779                           
  2780                           	psect	bssBANK3
  2781  01A0                     __pbssBANK3:	
  2782  01A0                     _tap_history:	
  2783  01A0                     	ds	20
  2784  01B4                     _bypass_flash_timer:	
  2785  01B4                     	ds	4
  2786  01B8                     _mod_timer:	
  2787  01B8                     	ds	4
  2788  01BC                     _tap_longpress_timer:	
  2789  01BC                     	ds	4
  2790  01C0                     _tap_total:	
  2791  01C0                     	ds	4
  2792  01C4                     wait_ms@timel:	
  2793  01C4                     	ds	4
  2794  01C8                     _SPI_Value:	
  2795  01C8                     	ds	2
  2796  01CA                     _debounce_bypass:	
  2797  01CA                     	ds	2
  2798  01CC                     _debounce_count:	
  2799  01CC                     	ds	2
  2800  01CE                     _delay_counter:	
  2801  01CE                     	ds	2
  2802  01D0                     _delayfound:	
  2803  01D0                     	ds	2
  2804  01D2                     _errno:	
  2805  01D2                     	ds	2
  2806  01D4                     _knob_5_pos:	
  2807  01D4                     	ds	2
  2808  01D6                     _mod_value:	
  2809  01D6                     	ds	2
  2810  01D8                     _preset:	
  2811  01D8                     	ds	2
  2812  01DA                     _temp_tap_count:	
  2813  01DA                     	ds	2
  2814                           
  2815                           	psect	dataBANK3
  2816  01DC                     __pdataBANK3:	
  2817  01DC                     _blink_state:	
  2818  01DC                     	ds	2
  2819  01DE                     _delay_time_changed:	
  2820  01DE                     	ds	2
  2821  01E0                     _incoming_data:	
  2822  01E0                     	ds	2
  2823  01E2                     _knob2_prev:	
  2824  01E2                     	ds	2
  2825  01E4                     _knob3_prev:	
  2826  01E4                     	ds	2
  2827  01E6                     _knob4_prev:	
  2828  01E6                     	ds	2
  2829  01E8                     _knob5_prev:	
  2830  01E8                     	ds	2
  2831  01EA                     _mod_delay_time:	
  2832  01EA                     	ds	2
  2833  01EC                     _tap_longpress_time:	
  2834  01EC                     	ds	2
  2835                           
  2836                           	psect	bssBANK4
  2837  0220                     __pbssBANK4:	
  2838  0220                     _tap:	
  2839  0220                     	ds	44
  2840  024C                     _temp_tap_time:	
  2841  024C                     	ds	4
  2842                           
  2843                           	psect	dataBANK4
  2844  0250                     __pdataBANK4:	
  2845  0250                     _mod1_amplitude:	
  2846  0250                     	ds	4
  2847                           
  2848                           	psect	dataBANK5
  2849  02A0                     __pdataBANK5:	
  2850  02A0                     _mod1:	
  2851  02A0                     	ds	60
  2852                           
  2853                           	psect	bssBANK6
  2854  0320                     __pbssBANK6:	
  2855  0320                     _myBuf:	
  2856  0320                     	ds	64
  2857                           
  2858                           	psect	dataBANK7
  2859  03A0                     __pdataBANK7:	
  2860  03A0                     _mod4:	
  2861  03A0                     	ds	58
  2862                           
  2863                           	psect	dataBANK8
  2864  0420                     __pdataBANK8:	
  2865  0420                     _B25k:	
  2866  0420                     	ds	80
  2867                           
  2868                           	psect	dataBANK9
  2869  04A0                     __pdataBANK9:	
  2870  04A0                     _iB25k:	
  2871  04A0                     	ds	80
  2872                           
  2873                           	psect	dataBANK10
  2874  0520                     __pdataBANK10:	
  2875  0520                     _mod2:	
  2876  0520                     	ds	58
  2877                           
  2878                           	psect	dataBANK11
  2879  05A0                     __pdataBANK11:	
  2880  05A0                     _mod3:	
  2881  05A0                     	ds	58
  2882                           
  2883                           	psect	clrtext
  2884  1973                     clear_ram0:	
  2885                           ;	Called with FSR0 containing the base address, and
  2886                           ;	btemp/btemp+1 has the size to clear
  2887                           
  2888  1973  0064               	clrwdt	;clear the watchdog before getting into this loop
  2889  1974                     clrloop0:	
  2890  1974  0180               	clrf	0	;clear RAM location pointed to by FSR
  2891  1975  3101               	addfsr 0,1
  2892  1976  3001               	movlw	1
  2893  1977  02FE               	subwf	126,f
  2894  1978  3000               	movlw	0
  2895  1979  3BFF               	subwfb	127,f
  2896  197A  087F               	movf	127,w
  2897  197B  047E               	iorwf	126,w
  2898  197C  1903               	btfsc	3,2
  2899  197D  3400               	retlw	0	;all done for this memory range, return
  2900  197E  2974               	goto	clrloop0	;have we reached the end yet?
  2901                           
  2902                           	psect	inittext
  2903  1967                     init_ram:	
  2904  1967  00FE               	movwf	126
  2905  1968                     initloop:	
  2906  1968  0012               	moviw fsr0++
  2907  1969  001E               	movwi fsr1++
  2908  196A  3001               	movlw	1
  2909  196B  02FE               	subwf	126,f
  2910  196C  3000               	movlw	0
  2911  196D  3BFF               	subwfb	127,f
  2912  196E  087F               	movf	127,w
  2913  196F  047E               	iorwf	126,w
  2914  1970  1903               	btfsc	3,2
  2915  1971  3400               	retlw	0
  2916  1972  2968               	goto	initloop
  2917                           
  2918                           	psect	cstackBANK2
  2919  0120                     __pcstackBANK2:	
  2920  0120                     main@i:	
  2921                           
  2922                           ; 2 bytes @ 0x0
  2923  0120                     	ds	2
  2924  0122                     main@tapCntDivisor:	
  2925                           
  2926                           ; 2 bytes @ 0x2
  2927  0122                     	ds	2
  2928  0124                     main@adjusted_pot_value:	
  2929                           
  2930                           ; 2 bytes @ 0x4
  2931  0124                     	ds	2
  2932  0126                     main@step_size:	
  2933                           
  2934                           ; 3 bytes @ 0x6
  2935  0126                     	ds	3
  2936  0129                     main@rad_conversion:	
  2937                           
  2938                           ; 3 bytes @ 0x9
  2939  0129                     	ds	3
  2940  012C                     main@i_407:	
  2941                           
  2942                           ; 2 bytes @ 0xC
  2943  012C                     	ds	2
  2944  012E                     main@i_408:	
  2945                           
  2946                           ; 2 bytes @ 0xE
  2947  012E                     	ds	2
  2948  0130                     main@fancy_mod_cycle:	
  2949                           
  2950                           ; 2 bytes @ 0x10
  2951  0130                     	ds	2
  2952  0132                     main@freq:	
  2953                           
  2954                           ; 2 bytes @ 0x12
  2955  0132                     	ds	2
  2956  0134                     _main$1660:	
  2957                           
  2958                           ; 3 bytes @ 0x14
  2959  0134                     	ds	3
  2960  0137                     _main$1661:	
  2961                           
  2962                           ; 3 bytes @ 0x17
  2963  0137                     	ds	3
  2964  013A                     _main$1662:	
  2965                           
  2966                           ; 3 bytes @ 0x1A
  2967  013A                     	ds	3
  2968  013D                     _main$1663:	
  2969                           
  2970                           ; 3 bytes @ 0x1D
  2971  013D                     	ds	3
  2972  0140                     _main$1664:	
  2973                           
  2974                           ; 3 bytes @ 0x20
  2975  0140                     	ds	3
  2976  0143                     main@count:	
  2977                           
  2978                           ; 2 bytes @ 0x23
  2979  0143                     	ds	2
  2980                           
  2981                           	psect	cstackBANK1
  2982  00A0                     __pcstackBANK1:	
  2983  00A0                     ?_map:	
  2984  00A0                     map@x:	
  2985                           ; 3 bytes @ 0x0
  2986                           
  2987                           
  2988                           ; 3 bytes @ 0x0
  2989  00A0                     	ds	3
  2990  00A3                     map@in_min:	
  2991                           
  2992                           ; 3 bytes @ 0x3
  2993  00A3                     	ds	3
  2994  00A6                     map@in_max:	
  2995                           
  2996                           ; 3 bytes @ 0x6
  2997  00A6                     	ds	3
  2998  00A9                     map@out_min:	
  2999                           
  3000                           ; 3 bytes @ 0x9
  3001  00A9                     	ds	3
  3002  00AC                     map@out_max:	
  3003                           
  3004                           ; 3 bytes @ 0xC
  3005  00AC                     	ds	3
  3006  00AF                     ?___fttol:	
  3007  00AF                     ___fttol@f1:	
  3008                           ; 4 bytes @ 0xF
  3009                           
  3010                           
  3011                           ; 3 bytes @ 0xF
  3012  00AF                     	ds	4
  3013  00B3                     ??___fttol:	
  3014                           
  3015                           ; 1 bytes @ 0x13
  3016  00B3                     	ds	4
  3017  00B7                     ___fttol@sign1:	
  3018                           
  3019                           ; 1 bytes @ 0x17
  3020  00B7                     	ds	1
  3021  00B8                     ___fttol@lval:	
  3022                           
  3023                           ; 4 bytes @ 0x18
  3024  00B8                     	ds	4
  3025  00BC                     ___fttol@exp1:	
  3026                           
  3027                           ; 1 bytes @ 0x1C
  3028  00BC                     	ds	1
  3029  00BD                     ?_set_subdivision:	
  3030  00BD                     ?_trunc:	
  3031                           ; 2 bytes @ 0x1D
  3032                           
  3033  00BD                     ?_floor:	
  3034                           ; 3 bytes @ 0x1D
  3035                           
  3036  00BD                     set_subdivision@x:	
  3037                           ; 3 bytes @ 0x1D
  3038                           
  3039  00BD                     trunc@x:	
  3040                           ; 2 bytes @ 0x1D
  3041                           
  3042  00BD                     floor@x:	
  3043                           ; 3 bytes @ 0x1D
  3044                           
  3045                           
  3046                           ; 3 bytes @ 0x1D
  3047  00BD                     	ds	2
  3048  00BF                     set_subdivision@y:	
  3049                           
  3050                           ; 2 bytes @ 0x1F
  3051  00BF                     	ds	1
  3052  00C0                     trunc@i:	
  3053  00C0                     floor@i:	
  3054                           ; 3 bytes @ 0x20
  3055                           
  3056                           
  3057                           ; 3 bytes @ 0x20
  3058  00C0                     	ds	3
  3059  00C3                     trunc@expon:	
  3060  00C3                     floor@expon:	
  3061                           ; 2 bytes @ 0x23
  3062                           
  3063                           
  3064                           ; 2 bytes @ 0x23
  3065  00C3                     	ds	2
  3066  00C5                     ?___ftsub:	
  3067  00C5                     ___ftsub@f2:	
  3068                           ; 3 bytes @ 0x25
  3069                           
  3070                           
  3071                           ; 3 bytes @ 0x25
  3072  00C5                     	ds	3
  3073  00C8                     ___ftsub@f1:	
  3074                           
  3075                           ; 3 bytes @ 0x28
  3076  00C8                     	ds	3
  3077  00CB                     ?_sin:	
  3078  00CB                     sin@f:	
  3079                           ; 3 bytes @ 0x2B
  3080                           
  3081                           
  3082                           ; 3 bytes @ 0x2B
  3083  00CB                     	ds	3
  3084  00CE                     sin@y:	
  3085                           
  3086                           ; 3 bytes @ 0x2E
  3087  00CE                     	ds	3
  3088  00D1                     _sin$1666:	
  3089                           
  3090                           ; 3 bytes @ 0x31
  3091  00D1                     	ds	3
  3092  00D4                     sin@x2:	
  3093                           
  3094                           ; 3 bytes @ 0x34
  3095  00D4                     	ds	3
  3096  00D7                     sin@sgn:	
  3097                           
  3098                           ; 1 bytes @ 0x37
  3099  00D7                     	ds	1
  3100  00D8                     ?_round:	
  3101  00D8                     round@x:	
  3102                           ; 3 bytes @ 0x38
  3103                           
  3104                           
  3105                           ; 3 bytes @ 0x38
  3106  00D8                     	ds	3
  3107  00DB                     round@f:	
  3108                           
  3109                           ; 3 bytes @ 0x3B
  3110  00DB                     	ds	3
  3111  00DE                     ??_main:	
  3112                           
  3113                           ; 1 bytes @ 0x3E
  3114  00DE                     	ds	15
  3115                           
  3116                           	psect	cstackCOMMON
  3117  0070                     __pcstackCOMMON:	
  3118  0070                     ?_ConfigureOscillator:	
  3119  0070                     ?_InitApp:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0070                     ?_init_adc:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0070                     ?_init_pwm:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0070                     ?_init_timer2:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0070                     ?_init_timer0:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0070                     ?_isr:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137  0070                     ?_main:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140  0070                     ?i1_set_leds_top:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143  0070                     i1set_leds_top@x:	
  3144                           ; 1 bytes @ 0x0
  3145                           
  3146                           
  3147                           ; 2 bytes @ 0x0
  3148  0070                     	ds	2
  3149  0072                     i1set_leds_top@ledState:	
  3150                           
  3151                           ; 2 bytes @ 0x2
  3152  0072                     	ds	2
  3153  0074                     ??_isr:	
  3154  0074                     ??i1_set_leds_top:	
  3155                           ; 1 bytes @ 0x4
  3156                           
  3157                           
  3158                           ; 1 bytes @ 0x4
  3159  0074                     	ds	5
  3160                           
  3161                           	psect	cstackBANK0
  3162  0020                     __pcstackBANK0:	
  3163  0020                     ?___ftge:	
  3164  0020                     ?_set_leds_top:	
  3165                           ; 1 bit 
  3166                           
  3167  0020                     ??_ConfigureOscillator:	
  3168                           ; 1 bytes @ 0x0
  3169                           
  3170  0020                     ??_InitApp:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0020                     ?_set_leds_bottom:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0020                     ??_init_adc:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0020                     ??_init_pwm:	
  3180                           ; 1 bytes @ 0x0
  3181                           
  3182  0020                     ??_init_timer2:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0020                     ??_init_timer0:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0020                     ?_FLASH_EraseBlock:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191  0020                     ?_FLASH_ReadWord:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194  0020                     ?_adc_convert:	
  3195                           ; 2 bytes @ 0x0
  3196                           
  3197  0020                     ?___wmul:	
  3198                           ; 2 bytes @ 0x0
  3199                           
  3200  0020                     ?___awdiv:	
  3201                           ; 2 bytes @ 0x0
  3202                           
  3203  0020                     ?___ftpack:	
  3204                           ; 2 bytes @ 0x0
  3205                           
  3206  0020                     ?_frexp:	
  3207                           ; 3 bytes @ 0x0
  3208                           
  3209  0020                     ?___lmul:	
  3210                           ; 3 bytes @ 0x0
  3211                           
  3212  0020                     set_leds_bottom@x:	
  3213                           ; 4 bytes @ 0x0
  3214                           
  3215  0020                     set_leds_top@x:	
  3216                           ; 2 bytes @ 0x0
  3217                           
  3218  0020                     FLASH_ReadWord@flashAddr:	
  3219                           ; 2 bytes @ 0x0
  3220                           
  3221  0020                     FLASH_EraseBlock@startAddr:	
  3222                           ; 2 bytes @ 0x0
  3223                           
  3224  0020                     ___wmul@multiplier:	
  3225                           ; 2 bytes @ 0x0
  3226                           
  3227  0020                     ___awdiv@divisor:	
  3228                           ; 2 bytes @ 0x0
  3229                           
  3230  0020                     ___ftpack@arg:	
  3231                           ; 2 bytes @ 0x0
  3232                           
  3233  0020                     ___ftge@ff1:	
  3234                           ; 3 bytes @ 0x0
  3235                           
  3236  0020                     frexp@value:	
  3237                           ; 3 bytes @ 0x0
  3238                           
  3239  0020                     ___lmul@multiplier:	
  3240                           ; 3 bytes @ 0x0
  3241                           
  3242                           
  3243                           ; 4 bytes @ 0x0
  3244  0020                     	ds	2
  3245  0022                     ??_FLASH_ReadWord:	
  3246  0022                     ??_set_leds_bottom:	
  3247                           ; 1 bytes @ 0x2
  3248                           
  3249  0022                     ??_adc_convert:	
  3250                           ; 1 bytes @ 0x2
  3251                           
  3252  0022                     ??_FLASH_EraseBlock:	
  3253                           ; 1 bytes @ 0x2
  3254                           
  3255  0022                     FLASH_ReadWord@GIEBitValue:	
  3256                           ; 1 bytes @ 0x2
  3257                           
  3258  0022                     FLASH_EraseBlock@GIEBitValue:	
  3259                           ; 1 bytes @ 0x2
  3260                           
  3261  0022                     set_leds_top@ledState:	
  3262                           ; 1 bytes @ 0x2
  3263                           
  3264  0022                     ___wmul@multiplicand:	
  3265                           ; 2 bytes @ 0x2
  3266                           
  3267  0022                     ___awdiv@dividend:	
  3268                           ; 2 bytes @ 0x2
  3269                           
  3270                           
  3271                           ; 2 bytes @ 0x2
  3272  0022                     	ds	1
  3273  0023                     ?_FLASH_WriteBlock:	
  3274  0023                     adc_convert@channel:	
  3275                           ; 1 bytes @ 0x3
  3276                           
  3277  0023                     ___ftpack@exp:	
  3278                           ; 1 bytes @ 0x3
  3279                           
  3280  0023                     frexp@eptr:	
  3281                           ; 1 bytes @ 0x3
  3282                           
  3283  0023                     FLASH_WriteBlock@writeAddr:	
  3284                           ; 1 bytes @ 0x3
  3285                           
  3286  0023                     ___ftge@ff2:	
  3287                           ; 2 bytes @ 0x3
  3288                           
  3289                           
  3290                           ; 3 bytes @ 0x3
  3291  0023                     	ds	1
  3292  0024                     ??_set_leds_top:	
  3293  0024                     ??_frexp:	
  3294                           ; 1 bytes @ 0x4
  3295                           
  3296  0024                     ??___wmul:	
  3297                           ; 1 bytes @ 0x4
  3298                           
  3299  0024                     ??___awdiv:	
  3300                           ; 1 bytes @ 0x4
  3301                           
  3302  0024                     ___ftpack@sign:	
  3303                           ; 1 bytes @ 0x4
  3304                           
  3305  0024                     ___wmul@product:	
  3306                           ; 1 bytes @ 0x4
  3307                           
  3308  0024                     ___lmul@multiplicand:	
  3309                           ; 2 bytes @ 0x4
  3310                           
  3311                           
  3312                           ; 4 bytes @ 0x4
  3313  0024                     	ds	1
  3314  0025                     ??___ftpack:	
  3315  0025                     FLASH_WriteBlock@flashWordArray:	
  3316                           ; 1 bytes @ 0x5
  3317                           
  3318  0025                     ___awdiv@counter:	
  3319                           ; 1 bytes @ 0x5
  3320                           
  3321                           
  3322                           ; 1 bytes @ 0x5
  3323  0025                     	ds	1
  3324  0026                     ??_FLASH_WriteBlock:	
  3325  0026                     ??___ftge:	
  3326                           ; 1 bytes @ 0x6
  3327                           
  3328  0026                     ?___aldiv:	
  3329                           ; 1 bytes @ 0x6
  3330                           
  3331  0026                     ___awdiv@sign:	
  3332                           ; 4 bytes @ 0x6
  3333                           
  3334  0026                     ___aldiv@divisor:	
  3335                           ; 1 bytes @ 0x6
  3336                           
  3337                           
  3338                           ; 4 bytes @ 0x6
  3339  0026                     	ds	1
  3340  0027                     ___awdiv@quotient:	
  3341                           
  3342                           ; 2 bytes @ 0x7
  3343  0027                     	ds	1
  3344  0028                     ??___lmul:	
  3345  0028                     ?___altoft:	
  3346                           ; 1 bytes @ 0x8
  3347                           
  3348  0028                     ___lmul@product:	
  3349                           ; 3 bytes @ 0x8
  3350                           
  3351  0028                     ___altoft@c:	
  3352                           ; 4 bytes @ 0x8
  3353                           
  3354                           
  3355                           ; 4 bytes @ 0x8
  3356  0028                     	ds	1
  3357  0029                     ?___awtoft:	
  3358  0029                     FLASH_WriteBlock@blockStartAddr:	
  3359                           ; 3 bytes @ 0x9
  3360                           
  3361  0029                     ___awtoft@c:	
  3362                           ; 2 bytes @ 0x9
  3363                           
  3364                           
  3365                           ; 2 bytes @ 0x9
  3366  0029                     	ds	1
  3367  002A                     ___aldiv@dividend:	
  3368                           
  3369                           ; 4 bytes @ 0xA
  3370  002A                     	ds	1
  3371  002B                     FLASH_WriteBlock@GIEBitValue:	
  3372                           
  3373                           ; 1 bytes @ 0xB
  3374  002B                     	ds	1
  3375  002C                     ?_wait_ms:	
  3376  002C                     ??___altoft:	
  3377                           ; 1 bytes @ 0xC
  3378                           
  3379  002C                     ??___awtoft:	
  3380                           ; 1 bytes @ 0xC
  3381                           
  3382  002C                     FLASH_WriteBlock@i:	
  3383                           ; 1 bytes @ 0xC
  3384                           
  3385  002C                     wait_ms@time:	
  3386                           ; 1 bytes @ 0xC
  3387                           
  3388                           
  3389                           ; 2 bytes @ 0xC
  3390  002C                     	ds	1
  3391  002D                     ?_FLASH_WriteWord:	
  3392  002D                     FLASH_WriteWord@flashAddr:	
  3393                           ; 1 bytes @ 0xD
  3394                           
  3395                           
  3396                           ; 2 bytes @ 0xD
  3397  002D                     	ds	1
  3398  002E                     ??_wait_ms:	
  3399  002E                     ??___aldiv:	
  3400                           ; 1 bytes @ 0xE
  3401                           
  3402  002E                     ___altoft@exp:	
  3403                           ; 1 bytes @ 0xE
  3404                           
  3405  002E                     ___awtoft@sign:	
  3406                           ; 1 bytes @ 0xE
  3407                           
  3408                           
  3409                           ; 1 bytes @ 0xE
  3410  002E                     	ds	1
  3411  002F                     FLASH_WriteWord@ramBuf:	
  3412  002F                     ___aldiv@counter:	
  3413                           ; 1 bytes @ 0xF
  3414                           
  3415  002F                     ___altoft@sign:	
  3416                           ; 1 bytes @ 0xF
  3417                           
  3418                           
  3419                           ; 1 bytes @ 0xF
  3420  002F                     	ds	1
  3421  0030                     ?___ftneg:	
  3422  0030                     ___aldiv@sign:	
  3423                           ; 3 bytes @ 0x10
  3424                           
  3425  0030                     FLASH_WriteWord@word:	
  3426                           ; 1 bytes @ 0x10
  3427                           
  3428  0030                     ___ftneg@f1:	
  3429                           ; 2 bytes @ 0x10
  3430                           
  3431                           
  3432                           ; 3 bytes @ 0x10
  3433  0030                     	ds	1
  3434  0031                     ___aldiv@quotient:	
  3435                           
  3436                           ; 4 bytes @ 0x11
  3437  0031                     	ds	1
  3438  0032                     ??_FLASH_WriteWord:	
  3439                           
  3440                           ; 1 bytes @ 0x12
  3441  0032                     	ds	1
  3442  0033                     ??___ftneg:	
  3443  0033                     ?___ftmul:	
  3444                           ; 1 bytes @ 0x13
  3445                           
  3446  0033                     FLASH_WriteWord@offset:	
  3447                           ; 3 bytes @ 0x13
  3448                           
  3449  0033                     ___ftmul@f1:	
  3450                           ; 1 bytes @ 0x13
  3451                           
  3452                           
  3453                           ; 3 bytes @ 0x13
  3454  0033                     	ds	1
  3455  0034                     FLASH_WriteWord@blockStartAddr:	
  3456                           
  3457                           ; 2 bytes @ 0x14
  3458  0034                     	ds	1
  3459  0035                     ?_modulation:	
  3460  0035                     modulation@x:	
  3461                           ; 2 bytes @ 0x15
  3462                           
  3463                           
  3464                           ; 2 bytes @ 0x15
  3465  0035                     	ds	1
  3466  0036                     FLASH_WriteWord@i:	
  3467  0036                     ___ftmul@f2:	
  3468                           ; 1 bytes @ 0x16
  3469                           
  3470                           
  3471                           ; 3 bytes @ 0x16
  3472  0036                     	ds	1
  3473  0037                     modulation@y:	
  3474                           
  3475                           ; 2 bytes @ 0x17
  3476  0037                     	ds	2
  3477  0039                     ??_modulation:	
  3478  0039                     ??___ftmul:	
  3479                           ; 1 bytes @ 0x19
  3480                           
  3481                           
  3482                           ; 1 bytes @ 0x19
  3483  0039                     	ds	4
  3484  003D                     ___ftmul@exp:	
  3485                           
  3486                           ; 1 bytes @ 0x1D
  3487  003D                     	ds	1
  3488  003E                     ___ftmul@f3_as_product:	
  3489                           
  3490                           ; 3 bytes @ 0x1E
  3491  003E                     	ds	3
  3492  0041                     ___ftmul@cntr:	
  3493                           
  3494                           ; 1 bytes @ 0x21
  3495  0041                     	ds	1
  3496  0042                     ___ftmul@sign:	
  3497                           
  3498                           ; 1 bytes @ 0x22
  3499  0042                     	ds	1
  3500  0043                     ?___ftadd:	
  3501  0043                     ___ftadd@f1:	
  3502                           ; 3 bytes @ 0x23
  3503                           
  3504                           
  3505                           ; 3 bytes @ 0x23
  3506  0043                     	ds	3
  3507  0046                     ___ftadd@f2:	
  3508                           
  3509                           ; 3 bytes @ 0x26
  3510  0046                     	ds	3
  3511  0049                     ??___ftadd:	
  3512                           
  3513                           ; 1 bytes @ 0x29
  3514  0049                     	ds	4
  3515  004D                     ___ftadd@sign:	
  3516                           
  3517                           ; 1 bytes @ 0x2D
  3518  004D                     	ds	1
  3519  004E                     ___ftadd@exp2:	
  3520                           
  3521                           ; 1 bytes @ 0x2E
  3522  004E                     	ds	1
  3523  004F                     ___ftadd@exp1:	
  3524                           
  3525                           ; 1 bytes @ 0x2F
  3526  004F                     	ds	1
  3527  0050                     ?_eval_poly:	
  3528  0050                     eval_poly@x:	
  3529                           ; 3 bytes @ 0x30
  3530                           
  3531                           
  3532                           ; 3 bytes @ 0x30
  3533  0050                     	ds	3
  3534  0053                     eval_poly@d:	
  3535                           
  3536                           ; 2 bytes @ 0x33
  3537  0053                     	ds	2
  3538  0055                     eval_poly@n:	
  3539                           
  3540                           ; 2 bytes @ 0x35
  3541  0055                     	ds	2
  3542  0057                     ??_eval_poly:	
  3543  0057                     eval_poly@res:	
  3544                           ; 1 bytes @ 0x37
  3545                           
  3546                           
  3547                           ; 3 bytes @ 0x37
  3548  0057                     	ds	3
  3549  005A                     ?___ftdiv:	
  3550  005A                     ___ftdiv@f2:	
  3551                           ; 3 bytes @ 0x3A
  3552                           
  3553                           
  3554                           ; 3 bytes @ 0x3A
  3555  005A                     	ds	3
  3556  005D                     ___ftdiv@f1:	
  3557                           
  3558                           ; 3 bytes @ 0x3D
  3559  005D                     	ds	3
  3560  0060                     ??___ftdiv:	
  3561                           
  3562                           ; 1 bytes @ 0x40
  3563  0060                     	ds	4
  3564  0064                     ___ftdiv@cntr:	
  3565                           
  3566                           ; 1 bytes @ 0x44
  3567  0064                     	ds	1
  3568  0065                     ___ftdiv@f3:	
  3569                           
  3570                           ; 3 bytes @ 0x45
  3571  0065                     	ds	3
  3572  0068                     ___ftdiv@exp:	
  3573                           
  3574                           ; 1 bytes @ 0x48
  3575  0068                     	ds	1
  3576  0069                     ___ftdiv@sign:	
  3577                           
  3578                           ; 1 bytes @ 0x49
  3579  0069                     	ds	1
  3580  006A                     ??_map:	
  3581  006A                     _map$1665:	
  3582                           ; 1 bytes @ 0x4A
  3583                           
  3584                           
  3585                           ; 3 bytes @ 0x4A
  3586  006A                     	ds	3
  3587  006D                     ??_set_subdivision:	
  3588  006D                     ??_trunc:	
  3589                           ; 1 bytes @ 0x4D
  3590                           
  3591  006D                     ??_floor:	
  3592                           ; 1 bytes @ 0x4D
  3593                           
  3594                           
  3595                           ; 1 bytes @ 0x4D
  3596  006D                     	ds	1
  3597  006E                     ??_sin:	
  3598  006E                     ??___ftsub:	
  3599                           ; 1 bytes @ 0x4E
  3600                           
  3601                           
  3602                           ; 1 bytes @ 0x4E
  3603  006E                     	ds	1
  3604  006F                     ??_round:	
  3605                           
  3606                           	psect	maintext
  3607  14F1                     __pmaintext:	
  3608                           ; 1 bytes @ 0x4F
  3609 ;;
  3610 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  3611 ;;
  3612 ;; *************** function _main *****************
  3613 ;; Defined at:
  3614 ;;		line 107 in file "main.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  tapCntDiviso    2    2[BANK2 ] int 
  3619 ;;  rad_conversi    3    9[BANK2 ] int 
  3620 ;;  step_size       3    6[BANK2 ] int 
  3621 ;;  freq            2   18[BANK2 ] int 
  3622 ;;  fancy_mod_cy    2   16[BANK2 ] int 
  3623 ;;  adjusted_pot    2    4[BANK2 ] int 
  3624 ;;  i               2   14[BANK2 ] int 
  3625 ;;  i               2   12[BANK2 ] int 
  3626 ;;  i               2    0[BANK2 ] int 
  3627 ;;  count           2   35[BANK2 ] int 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  1    wreg      void 
  3630 ;; Registers used:
  3631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3632 ;; Tracked objects:
  3633 ;;		On entry : B1F/0
  3634 ;;		On exit  : 0/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  3637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  3638 ;;      Locals:         0       0       0      37       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  3639 ;;      Temps:          0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  3640 ;;      Totals:         0       0      15      37       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  3641 ;;Total ram usage:       52 bytes
  3642 ;; Hardware stack levels required when called:    6
  3643 ;; This function calls:
  3644 ;;		_ConfigureOscillator
  3645 ;;		_FLASH_ReadWord
  3646 ;;		_FLASH_WriteWord
  3647 ;;		_InitApp
  3648 ;;		___aldiv
  3649 ;;		___altoft
  3650 ;;		___awdiv
  3651 ;;		___awtoft
  3652 ;;		___ftdiv
  3653 ;;		___ftmul
  3654 ;;		___fttol
  3655 ;;		_adc_convert
  3656 ;;		_map
  3657 ;;		_modulation
  3658 ;;		_round
  3659 ;;		_set_leds_bottom
  3660 ;;		_set_leds_top
  3661 ;;		_set_subdivision
  3662 ;;		_sin
  3663 ;;		_wait_ms
  3664 ;; This function is called by:
  3665 ;;		Startup code after reset
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           
  3670                           ;psect for function _main
  3671  14F1                     _main:	
  3672                           
  3673                           ;main.c: 108: ConfigureOscillator();
  3674                           
  3675                           ;incstack = 0
  3676                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3677  14F1  3199  2140  3194   	fcall	_ConfigureOscillator
  3678                           
  3679                           ;main.c: 109: InitApp();
  3680  14F4  319A  224C  3194   	fcall	_InitApp
  3681                           
  3682                           ;main.c: 110: tap[0] = 0;
  3683  14F7  3000               	movlw	0
  3684  14F8  0024               	movlb	4	; select bank4
  3685  14F9  00A3               	movwf	(_tap+3)^(0+512)
  3686  14FA  3000               	movlw	0
  3687  14FB  00A2               	movwf	(_tap+2)^(0+512)
  3688  14FC  3000               	movlw	0
  3689  14FD  00A1               	movwf	(_tap+1)^(0+512)
  3690  14FE  3000               	movlw	0
  3691  14FF  00A0               	movwf	_tap^(0+512)
  3692                           
  3693                           ;main.c: 111: tap[1] = 0;
  3694  1500  3000               	movlw	0
  3695  1501  00A7               	movwf	((_tap+3)^(0+512)+4)
  3696  1502  3000               	movlw	0
  3697  1503  00A6               	movwf	((_tap+2)^(0+512)+4)
  3698  1504  3000               	movlw	0
  3699  1505  00A5               	movwf	((_tap+1)^(0+512)+4)
  3700  1506  3000               	movlw	0
  3701  1507  00A4               	movwf	(_tap^(0+512)+4)
  3702                           
  3703                           ;main.c: 112: tap[2] = 0;
  3704  1508  3000               	movlw	0
  3705  1509  00AB               	movwf	((_tap+3)^(0+512)+8)
  3706  150A  3000               	movlw	0
  3707  150B  00AA               	movwf	((_tap+2)^(0+512)+8)
  3708  150C  3000               	movlw	0
  3709  150D  00A9               	movwf	((_tap+1)^(0+512)+8)
  3710  150E  3000               	movlw	0
  3711  150F  00A8               	movwf	(_tap^(0+512)+8)
  3712                           
  3713                           ;main.c: 113: tap[3] = 0;
  3714  1510  3000               	movlw	0
  3715  1511  00AF               	movwf	((_tap+3)^(0+512)+12)
  3716  1512  3000               	movlw	0
  3717  1513  00AE               	movwf	((_tap+2)^(0+512)+12)
  3718  1514  3000               	movlw	0
  3719  1515  00AD               	movwf	((_tap+1)^(0+512)+12)
  3720  1516  3000               	movlw	0
  3721  1517  00AC               	movwf	(_tap^(0+512)+12)
  3722                           
  3723                           ;main.c: 114: tap[4] = 0;
  3724  1518  3000               	movlw	0
  3725  1519  00B3               	movwf	((_tap+3)^(0+512)+16)
  3726  151A  3000               	movlw	0
  3727  151B  00B2               	movwf	((_tap+2)^(0+512)+16)
  3728  151C  3000               	movlw	0
  3729  151D  00B1               	movwf	((_tap+1)^(0+512)+16)
  3730  151E  3000               	movlw	0
  3731  151F  00B0               	movwf	(_tap^(0+512)+16)
  3732                           
  3733                           ;main.c: 115: tap[5] = 0;
  3734  1520  3000               	movlw	0
  3735  1521  00B7               	movwf	((_tap+3)^(0+512)+20)
  3736  1522  3000               	movlw	0
  3737  1523  00B6               	movwf	((_tap+2)^(0+512)+20)
  3738  1524  3000               	movlw	0
  3739  1525  00B5               	movwf	((_tap+1)^(0+512)+20)
  3740  1526  3000               	movlw	0
  3741  1527  00B4               	movwf	(_tap^(0+512)+20)
  3742                           
  3743                           ;main.c: 116: tap[6] = 0;
  3744  1528  3000               	movlw	0
  3745  1529  00BB               	movwf	((_tap+3)^(0+512)+24)
  3746  152A  3000               	movlw	0
  3747  152B  00BA               	movwf	((_tap+2)^(0+512)+24)
  3748  152C  3000               	movlw	0
  3749  152D  00B9               	movwf	((_tap+1)^(0+512)+24)
  3750  152E  3000               	movlw	0
  3751  152F  00B8               	movwf	(_tap^(0+512)+24)
  3752                           
  3753                           ;main.c: 117: tap[7] = 0;
  3754  1530  3000               	movlw	0
  3755  1531  00BF               	movwf	((_tap+3)^(0+512)+28)
  3756  1532  3000               	movlw	0
  3757  1533  00BE               	movwf	((_tap+2)^(0+512)+28)
  3758  1534  3000               	movlw	0
  3759  1535  00BD               	movwf	((_tap+1)^(0+512)+28)
  3760  1536  3000               	movlw	0
  3761  1537  00BC               	movwf	(_tap^(0+512)+28)
  3762                           
  3763                           ;main.c: 118: tap[8] = 0;
  3764  1538  3000               	movlw	0
  3765  1539  00C3               	movwf	((_tap+3)^(0+512)+32)
  3766  153A  3000               	movlw	0
  3767  153B  00C2               	movwf	((_tap+2)^(0+512)+32)
  3768  153C  3000               	movlw	0
  3769  153D  00C1               	movwf	((_tap+1)^(0+512)+32)
  3770  153E  3000               	movlw	0
  3771  153F  00C0               	movwf	(_tap^(0+512)+32)
  3772                           
  3773                           ;main.c: 119: tap[9] = 0;
  3774  1540  3000               	movlw	0
  3775  1541  00C7               	movwf	((_tap+3)^(0+512)+36)
  3776  1542  3000               	movlw	0
  3777  1543  00C6               	movwf	((_tap+2)^(0+512)+36)
  3778  1544  3000               	movlw	0
  3779  1545  00C5               	movwf	((_tap+1)^(0+512)+36)
  3780  1546  3000               	movlw	0
  3781  1547  00C4               	movwf	(_tap^(0+512)+36)
  3782                           
  3783                           ;main.c: 120: tap[10] = 0;
  3784  1548  3000               	movlw	0
  3785  1549  00CB               	movwf	((_tap+3)^(0+512)+40)
  3786  154A  3000               	movlw	0
  3787  154B  00CA               	movwf	((_tap+2)^(0+512)+40)
  3788  154C  3000               	movlw	0
  3789  154D  00C9               	movwf	((_tap+1)^(0+512)+40)
  3790  154E  3000               	movlw	0
  3791  154F  00C8               	movwf	(_tap^(0+512)+40)
  3792                           
  3793                           ;main.c: 123: top_push_state = FLASH_ReadWord(0x1F81);
  3794  1550  3081               	movlw	129
  3795  1551  0020               	movlb	0	; select bank0
  3796  1552  00A0               	movwf	FLASH_ReadWord@flashAddr
  3797  1553  301F               	movlw	31
  3798  1554  00A1               	movwf	FLASH_ReadWord@flashAddr+1
  3799  1555  3199  21BC  3194   	fcall	_FLASH_ReadWord
  3800  1558  0020               	movlb	0	; select bank0
  3801  1559  0821               	movf	?_FLASH_ReadWord+1,w
  3802  155A  0022               	movlb	2	; select bank2
  3803  155B  00EE               	movwf	(_top_push_state+1)^(0+256)	;volatile
  3804  155C  0020               	movlb	0	; select bank0
  3805  155D  0820               	movf	?_FLASH_ReadWord,w
  3806  155E  0022               	movlb	2	; select bank2
  3807  155F  00ED               	movwf	_top_push_state^(0+256)	;volatile
  3808                           
  3809                           ;main.c: 124: bottom_push_state = FLASH_ReadWord(0x1F82);
  3810  1560  3082               	movlw	130
  3811  1561  0020               	movlb	0	; select bank0
  3812  1562  00A0               	movwf	FLASH_ReadWord@flashAddr
  3813  1563  301F               	movlw	31
  3814  1564  00A1               	movwf	FLASH_ReadWord@flashAddr+1
  3815  1565  3199  21BC  3194   	fcall	_FLASH_ReadWord
  3816  1568  0020               	movlb	0	; select bank0
  3817  1569  0821               	movf	?_FLASH_ReadWord+1,w
  3818  156A  0022               	movlb	2	; select bank2
  3819  156B  00E6               	movwf	(_bottom_push_state+1)^(0+256)
  3820  156C  0020               	movlb	0	; select bank0
  3821  156D  0820               	movf	?_FLASH_ReadWord,w
  3822  156E  0022               	movlb	2	; select bank2
  3823  156F  00E5               	movwf	_bottom_push_state^(0+256)
  3824                           
  3825                           ;main.c: 127: LATGbits.LATG1 = !bypass_state;
  3826  1570  084D               	movf	_bypass_state^(0+256),w	;volatile
  3827  1571  044E               	iorwf	(_bypass_state+1)^(0+256),w	;volatile
  3828  1572  1D03               	btfss	3,2
  3829  1573  2D77               	goto	u3320
  3830  1574  0027               	movlb	7	; select bank7
  3831  1575  148D               	bsf	13,1	;volatile
  3832  1576  2D79               	goto	l3193
  3833  1577                     u3320:	
  3834  1577  0027               	movlb	7	; select bank7
  3835  1578  108D               	bcf	13,1	;volatile
  3836  1579                     l3193:	
  3837                           
  3838                           ;main.c: 128: LATGbits.LATG2 = bypass_state;
  3839  1579  0022               	movlb	2	; select bank2
  3840  157A  0C4D               	rrf	_bypass_state^(0+256),w	;volatile
  3841  157B  0027               	movlb	7	; select bank7
  3842  157C  1C03               	skipc
  3843  157D  110D               	bcf	13,2	;volatile
  3844  157E  1803               	skipnc
  3845  157F  150D               	bsf	13,2	;volatile
  3846                           
  3847                           ;main.c: 129: LATFbits.LATF6 = bypass_state;
  3848  1580  0022               	movlb	2	; select bank2
  3849  1581  0C4D               	rrf	_bypass_state^(0+256),w	;volatile
  3850  1582  0027               	movlb	7	; select bank7
  3851  1583  1C03               	skipc
  3852  1584  130C               	bcf	12,6	;volatile
  3853  1585  1803               	skipnc
  3854  1586  170C               	bsf	12,6	;volatile
  3855                           
  3856                           ;main.c: 130: set_leds_top(top_push_state, 1);
  3857  1587  0022               	movlb	2	; select bank2
  3858  1588  086E               	movf	(_top_push_state+1)^(0+256),w	;volatile
  3859  1589  0020               	movlb	0	; select bank0
  3860  158A  00A1               	movwf	set_leds_top@x+1
  3861  158B  0022               	movlb	2	; select bank2
  3862  158C  086D               	movf	_top_push_state^(0+256),w	;volatile
  3863  158D  0020               	movlb	0	; select bank0
  3864  158E  00A0               	movwf	set_leds_top@x
  3865  158F  3001               	movlw	1
  3866  1590  00A2               	movwf	set_leds_top@ledState
  3867  1591  3000               	movlw	0
  3868  1592  00A3               	movwf	set_leds_top@ledState+1
  3869  1593  319F  2738  3194   	fcall	_set_leds_top
  3870                           
  3871                           ;main.c: 131: set_leds_bottom(bottom_push_state);
  3872  1596  0022               	movlb	2	; select bank2
  3873  1597  0866               	movf	(_bottom_push_state+1)^(0+256),w
  3874  1598  0020               	movlb	0	; select bank0
  3875  1599  00A1               	movwf	set_leds_bottom@x+1
  3876  159A  0022               	movlb	2	; select bank2
  3877  159B  0865               	movf	_bottom_push_state^(0+256),w
  3878  159C  0020               	movlb	0	; select bank0
  3879  159D  00A0               	movwf	set_leds_bottom@x
  3880  159E  319C  24F5  3194   	fcall	_set_leds_bottom
  3881  15A1                     l3201:	
  3882                           ;main.c: 133: while (1) {
  3883                           
  3884                           
  3885                           ;main.c: 135: if (PORTBbits.RB0 == 1) {
  3886  15A1  0020               	movlb	0	; select bank0
  3887  15A2  3189  1C0D         	btfss	13,0	;volatile
  3888  15A4  2922               	goto	l3239
  3889                           
  3890                           ;main.c: 136: LATBbits.LATB5 = 1;
  3891  15A5  0022               	movlb	2	; select bank2
  3892  15A6  168D               	bsf	13,5	;volatile
  3893                           
  3894                           ;main.c: 137: LATBbits.LATB1 = 1;
  3895  15A7  148D               	bsf	13,1	;volatile
  3896                           
  3897                           ;main.c: 138: wait_ms(1);
  3898  15A8  3001               	movlw	1
  3899  15A9  0020               	movlb	0	; select bank0
  3900  15AA  00AC               	movwf	wait_ms@time
  3901  15AB  3000               	movlw	0
  3902  15AC  00AD               	movwf	wait_ms@time+1
  3903  15AD  319A  22AC  3194   	fcall	_wait_ms
  3904                           
  3905                           ;main.c: 139: LATBbits.LATB1 = 0;
  3906  15B0  0022               	movlb	2	; select bank2
  3907  15B1  108D               	bcf	13,1	;volatile
  3908                           
  3909                           ;main.c: 140: int count = 1;
  3910  15B2  3001               	movlw	1
  3911  15B3  00C3               	movwf	main@count^(0+256)
  3912  15B4  3000               	movlw	0
  3913  15B5  00C4               	movwf	(main@count^(0+256)+1)
  3914                           
  3915                           ;main.c: 141: preset = 0;
  3916  15B6  0023               	movlb	3	; select bank3
  3917  15B7  01D8               	clrf	_preset^(0+384)
  3918  15B8  01D9               	clrf	(_preset+1)^(0+384)
  3919  15B9                     l3221:	
  3920                           ;main.c: 142: while (count <= 8) {
  3921                           
  3922  15B9  0022               	movlb	2	; select bank2
  3923  15BA  0844               	movf	(main@count+1)^(0+256),w
  3924  15BB  3A80               	xorlw	128
  3925  15BC  0021               	movlb	1	; select bank1
  3926  15BD  00DE               	movwf	??_main^(0+128)
  3927  15BE  3080               	movlw	128
  3928  15BF  025E               	subwf	??_main^(0+128),w
  3929  15C0  1D03               	skipz
  3930  15C1  2DC5               	goto	u3375
  3931  15C2  3009               	movlw	9
  3932  15C3  0022               	movlb	2	; select bank2
  3933  15C4  0243               	subwf	main@count^(0+256),w
  3934  15C5                     u3375:	
  3935  15C5  1803               	btfsc	3,0
  3936  15C6  2DE8               	goto	l212
  3937                           
  3938                           ;main.c: 143: if (PORTBbits.RB2 == 1) {
  3939  15C7  0020               	movlb	0	; select bank0
  3940  15C8  1D0D               	btfss	13,2	;volatile
  3941  15C9  2DB9               	goto	l3221
  3942                           
  3943                           ;main.c: 144: LATBbits.LATB4 = 1;
  3944  15CA  0022               	movlb	2	; select bank2
  3945  15CB  160D               	bsf	13,4	;volatile
  3946                           
  3947                           ;main.c: 145: if (PORTBbits.RB3 == 1) {
  3948  15CC  0020               	movlb	0	; select bank0
  3949  15CD  1D8D               	btfss	13,3	;volatile
  3950  15CE  2DD6               	goto	l211
  3951                           
  3952                           ;main.c: 146: preset = preset + 1;
  3953  15CF  0023               	movlb	3	; select bank3
  3954  15D0  0858               	movf	_preset^(0+384),w
  3955  15D1  3E01               	addlw	1
  3956  15D2  00D8               	movwf	_preset^(0+384)
  3957  15D3  3000               	movlw	0
  3958  15D4  3D59               	addwfc	(_preset+1)^(0+384),w
  3959  15D5  00D9               	movwf	(_preset+1)^(0+384)
  3960  15D6                     l211:	
  3961                           
  3962                           ;main.c: 147: }
  3963                           ;main.c: 148: count = count + 1;
  3964  15D6  0022               	movlb	2	; select bank2
  3965  15D7  0843               	movf	main@count^(0+256),w
  3966  15D8  3E01               	addlw	1
  3967  15D9  00C3               	movwf	main@count^(0+256)
  3968  15DA  3000               	movlw	0
  3969  15DB  3D44               	addwfc	(main@count+1)^(0+256),w
  3970  15DC  00C4               	movwf	(main@count+1)^(0+256)
  3971                           
  3972                           ;main.c: 149: wait_ms(2);
  3973  15DD  3002               	movlw	2
  3974  15DE  0020               	movlb	0	; select bank0
  3975  15DF  00AC               	movwf	wait_ms@time
  3976  15E0  3000               	movlw	0
  3977  15E1  00AD               	movwf	wait_ms@time+1
  3978  15E2  319A  22AC  3194   	fcall	_wait_ms
  3979                           
  3980                           ;main.c: 150: LATBbits.LATB4 = 0;
  3981  15E5  0022               	movlb	2	; select bank2
  3982  15E6  120D               	bcf	13,4	;volatile
  3983  15E7  2DB9               	goto	l3221
  3984  15E8                     l212:	
  3985                           
  3986                           ;main.c: 151: }
  3987                           ;main.c: 152: }
  3988                           ;main.c: 153: LATBbits.LATB5 = 0;
  3989  15E8  0022               	movlb	2	; select bank2
  3990  15E9  128D               	bcf	13,5	;volatile
  3991                           
  3992                           ;main.c: 154: LATFbits.LATF6 = 0;
  3993  15EA  0027               	movlb	7	; select bank7
  3994  15EB  130C               	bcf	12,6	;volatile
  3995                           
  3996                           ;main.c: 155: wait_ms(2);
  3997  15EC  3002               	movlw	2
  3998  15ED  0020               	movlb	0	; select bank0
  3999  15EE  00AC               	movwf	wait_ms@time
  4000  15EF  3000               	movlw	0
  4001  15F0  00AD               	movwf	wait_ms@time+1
  4002  15F1  319A  22AC  3194   	fcall	_wait_ms
  4003                           
  4004                           ;main.c: 156: for (count = 0; count < preset; count++) {
  4005  15F4  0022               	movlb	2	; select bank2
  4006  15F5  01C3               	clrf	main@count^(0+256)
  4007  15F6  01C4               	clrf	(main@count+1)^(0+256)
  4008  15F7                     l3233:	
  4009  15F7  0844               	movf	(main@count+1)^(0+256),w
  4010  15F8  3A80               	xorlw	128
  4011  15F9  0021               	movlb	1	; select bank1
  4012  15FA  00DE               	movwf	??_main^(0+128)
  4013  15FB  0023               	movlb	3	; select bank3
  4014  15FC  0859               	movf	(_preset+1)^(0+384),w
  4015  15FD  3A80               	xorlw	128
  4016  15FE  0021               	movlb	1	; select bank1
  4017  15FF  025E               	subwf	??_main^(0+128),w
  4018  1600  1D03               	skipz
  4019  1601  2E06               	goto	u3385
  4020  1602  0023               	movlb	3	; select bank3
  4021  1603  0858               	movf	_preset^(0+384),w
  4022  1604  0022               	movlb	2	; select bank2
  4023  1605  0243               	subwf	main@count^(0+256),w
  4024  1606                     u3385:	
  4025  1606  3189  1803         	btfsc	3,0
  4026  1608  2913               	goto	l3235
  4027                           
  4028                           ;main.c: 157: LATFbits.LATF6 = 1;
  4029  1609  0027               	movlb	7	; select bank7
  4030  160A  170C               	bsf	12,6	;volatile
  4031                           
  4032                           ;main.c: 158: wait_ms(40);
  4033  160B  3028               	movlw	40
  4034  160C  0020               	movlb	0	; select bank0
  4035  160D  00AC               	movwf	wait_ms@time
  4036  160E  3000               	movlw	0
  4037  160F  00AD               	movwf	wait_ms@time+1
  4038  1610  319A  22AC  3194   	fcall	_wait_ms
  4039                           
  4040                           ;main.c: 159: LATFbits.LATF6 = 0;
  4041  1613  0027               	movlb	7	; select bank7
  4042  1614  130C               	bcf	12,6	;volatile
  4043                           
  4044                           ;main.c: 160: wait_ms(40);
  4045  1615  3028               	movlw	40
  4046  1616  0020               	movlb	0	; select bank0
  4047  1617  00AC               	movwf	wait_ms@time
  4048  1618  3000               	movlw	0
  4049  1619  00AD               	movwf	wait_ms@time+1
  4050  161A  319A  22AC  3194   	fcall	_wait_ms
  4051  161D  3001               	movlw	1
  4052  161E  0022               	movlb	2	; select bank2
  4053  161F  07C3               	addwf	main@count^(0+256),f
  4054  1620  3000               	movlw	0
  4055  1621  3DC4               	addwfc	(main@count+1)^(0+256),f
  4056  1622  2DF7               	goto	l3233
  4057                           
  4058                           	psect	text1
  4059  1AAC                     __ptext1:	
  4060 ;; *************** function _wait_ms *****************
  4061 ;; Defined at:
  4062 ;;		line 23 in file "system.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  time            2   12[BANK0 ] unsigned int 
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;		None
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      void 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0, pclath, cstack
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4079 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4080 ;;Total ram usage:        2 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    3
  4083 ;; This function calls:
  4084 ;;		___lmul
  4085 ;; This function is called by:
  4086 ;;		_main
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           
  4091                           ;psect for function _wait_ms
  4092  1AAC                     _wait_ms:	
  4093                           
  4094                           ;system.c: 25: static long timel = 0;
  4095                           ;system.c: 26: timel = time * 1000l;
  4096                           
  4097                           ;incstack = 0
  4098                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  4099  1AAC  0020               	movlb	0	; select bank0
  4100  1AAD  082C               	movf	wait_ms@time,w
  4101  1AAE  00A0               	movwf	___lmul@multiplier
  4102  1AAF  082D               	movf	wait_ms@time+1,w
  4103  1AB0  00A1               	movwf	___lmul@multiplier+1
  4104  1AB1  01A2               	clrf	___lmul@multiplier+2
  4105  1AB2  01A3               	clrf	___lmul@multiplier+3
  4106  1AB3  3000               	movlw	0
  4107  1AB4  00A7               	movwf	___lmul@multiplicand+3
  4108  1AB5  3000               	movlw	0
  4109  1AB6  00A6               	movwf	___lmul@multiplicand+2
  4110  1AB7  3003               	movlw	3
  4111  1AB8  00A5               	movwf	___lmul@multiplicand+1
  4112  1AB9  30E8               	movlw	232
  4113  1ABA  00A4               	movwf	___lmul@multiplicand
  4114  1ABB  319A  227C  319A   	fcall	___lmul
  4115  1ABE  0020               	movlb	0	; select bank0
  4116  1ABF  0823               	movf	?___lmul+3,w
  4117  1AC0  0023               	movlb	3	; select bank3
  4118  1AC1  00C7               	movwf	(wait_ms@timel+3)^(0+384)
  4119  1AC2  0020               	movlb	0	; select bank0
  4120  1AC3  0822               	movf	?___lmul+2,w
  4121  1AC4  0023               	movlb	3	; select bank3
  4122  1AC5  00C6               	movwf	(wait_ms@timel+2)^(0+384)
  4123  1AC6  0020               	movlb	0	; select bank0
  4124  1AC7  0821               	movf	?___lmul+1,w
  4125  1AC8  0023               	movlb	3	; select bank3
  4126  1AC9  00C5               	movwf	(wait_ms@timel+1)^(0+384)
  4127  1ACA  0020               	movlb	0	; select bank0
  4128  1ACB  0820               	movf	?___lmul,w
  4129  1ACC  0023               	movlb	3	; select bank3
  4130  1ACD  00C4               	movwf	wait_ms@timel^(0+384)
  4131  1ACE                     l304:	
  4132                           ;system.c: 27: for( ; timel; timel--);
  4133                           
  4134  1ACE  0847               	movf	(wait_ms@timel+3)^(0+384),w
  4135  1ACF  0446               	iorwf	(wait_ms@timel+2)^(0+384),w
  4136  1AD0  0445               	iorwf	(wait_ms@timel+1)^(0+384),w
  4137  1AD1  0444               	iorwf	wait_ms@timel^(0+384),w
  4138  1AD2  1903               	btfsc	3,2
  4139  1AD3  0008               	return
  4140  1AD4  30FF               	movlw	255
  4141  1AD5  07C4               	addwf	wait_ms@timel^(0+384),f
  4142  1AD6  30FF               	movlw	255
  4143  1AD7  3DC5               	addwfc	(wait_ms@timel+1)^(0+384),f
  4144  1AD8  30FF               	movlw	255
  4145  1AD9  3DC6               	addwfc	(wait_ms@timel+2)^(0+384),f
  4146  1ADA  30FF               	movlw	255
  4147  1ADB  3DC7               	addwfc	(wait_ms@timel+3)^(0+384),f
  4148  1ADC  2ACE               	goto	l304
  4149  1ADD                     __end_of_wait_ms:	
  4150                           
  4151                           	psect	text2
  4152  1A7C                     __ptext2:	
  4153 ;; *************** function ___lmul *****************
  4154 ;; Defined at:
  4155 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4158 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  product         4    8[BANK0 ] unsigned long 
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  4    0[BANK0 ] unsigned long 
  4163 ;; Registers used:
  4164 ;;		wreg, status,2, status,0
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4170 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4171 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4173 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4174 ;;Total ram usage:       12 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; Hardware stack levels required when called:    2
  4177 ;; This function calls:
  4178 ;;		Nothing
  4179 ;; This function is called by:
  4180 ;;		_wait_ms
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           
  4185                           ;psect for function ___lmul
  4186  1A7C                     ___lmul:	
  4187                           
  4188                           ;incstack = 0
  4189                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4190  1A7C  3000               	movlw	0
  4191  1A7D  0020               	movlb	0	; select bank0
  4192  1A7E  00AB               	movwf	___lmul@product+3
  4193  1A7F  3000               	movlw	0
  4194  1A80  00AA               	movwf	___lmul@product+2
  4195  1A81  3000               	movlw	0
  4196  1A82  00A9               	movwf	___lmul@product+1
  4197  1A83  3000               	movlw	0
  4198  1A84  00A8               	movwf	___lmul@product
  4199  1A85                     l2689:	
  4200  1A85  1C20               	btfss	___lmul@multiplier,0
  4201  1A86  2A8F               	goto	l2693
  4202  1A87  0824               	movf	___lmul@multiplicand,w
  4203  1A88  07A8               	addwf	___lmul@product,f
  4204  1A89  0825               	movf	___lmul@multiplicand+1,w
  4205  1A8A  3DA9               	addwfc	___lmul@product+1,f
  4206  1A8B  0826               	movf	___lmul@multiplicand+2,w
  4207  1A8C  3DAA               	addwfc	___lmul@product+2,f
  4208  1A8D  0827               	movf	___lmul@multiplicand+3,w
  4209  1A8E  3DAB               	addwfc	___lmul@product+3,f
  4210  1A8F                     l2693:	
  4211  1A8F  3001               	movlw	1
  4212  1A90                     u2695:	
  4213  1A90  35A4               	lslf	___lmul@multiplicand,f
  4214  1A91  0DA5               	rlf	___lmul@multiplicand+1,f
  4215  1A92  0DA6               	rlf	___lmul@multiplicand+2,f
  4216  1A93  0DA7               	rlf	___lmul@multiplicand+3,f
  4217  1A94  0B89               	decfsz	9,f
  4218  1A95  2A90               	goto	u2695
  4219  1A96  3001               	movlw	1
  4220  1A97                     u2705:	
  4221  1A97  36A3               	lsrf	___lmul@multiplier+3,f
  4222  1A98  0CA2               	rrf	___lmul@multiplier+2,f
  4223  1A99  0CA1               	rrf	___lmul@multiplier+1,f
  4224  1A9A  0CA0               	rrf	___lmul@multiplier,f
  4225  1A9B  0B89               	decfsz	9,f
  4226  1A9C  2A97               	goto	u2705
  4227  1A9D  0823               	movf	___lmul@multiplier+3,w
  4228  1A9E  0422               	iorwf	___lmul@multiplier+2,w
  4229  1A9F  0421               	iorwf	___lmul@multiplier+1,w
  4230  1AA0  0420               	iorwf	___lmul@multiplier,w
  4231  1AA1  1D03               	skipz
  4232  1AA2  2A85               	goto	l2689
  4233  1AA3  082B               	movf	___lmul@product+3,w
  4234  1AA4  00A3               	movwf	?___lmul+3
  4235  1AA5  082A               	movf	___lmul@product+2,w
  4236  1AA6  00A2               	movwf	?___lmul+2
  4237  1AA7  0829               	movf	___lmul@product+1,w
  4238  1AA8  00A1               	movwf	?___lmul+1
  4239  1AA9  0828               	movf	___lmul@product,w
  4240  1AAA  00A0               	movwf	?___lmul
  4241  1AAB  0008               	return
  4242  1AAC                     __end_of___lmul:	
  4243                           
  4244                           	psect	text3
  4245  1623                     __ptext3:	
  4246 ;; *************** function _sin *****************
  4247 ;; Defined at:
  4248 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sin.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  f               3   43[BANK1 ] unsigned long 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;  x2              3   52[BANK1 ] unsigned long 
  4253 ;;  y               3   46[BANK1 ] unsigned long 
  4254 ;;  sgn             1   55[BANK1 ] unsigned char 
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  3   43[BANK1 ] unsigned char 
  4257 ;; Registers used:
  4258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4264 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4265 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4267 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4268 ;;Total ram usage:       14 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    5
  4271 ;; This function calls:
  4272 ;;		___ftadd
  4273 ;;		___ftdiv
  4274 ;;		___ftge
  4275 ;;		___ftmul
  4276 ;;		___ftneg
  4277 ;;		___ftsub
  4278 ;;		_eval_poly
  4279 ;;		_floor
  4280 ;; This function is called by:
  4281 ;;		_main
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           
  4286                           ;psect for function _sin
  4287  1623                     _sin:	
  4288                           
  4289                           ;incstack = 0
  4290                           ; Regs used in _sin: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4291  1623  0021               	movlb	1	; select bank1
  4292  1624  01D7               	clrf	sin@sgn^(0+128)
  4293  1625  084B               	movf	sin@f^(0+128),w
  4294  1626  0020               	movlb	0	; select bank0
  4295  1627  00A0               	movwf	___ftge@ff1
  4296  1628  0021               	movlb	1	; select bank1
  4297  1629  084C               	movf	(sin@f+1)^(0+128),w
  4298  162A  0020               	movlb	0	; select bank0
  4299  162B  00A1               	movwf	___ftge@ff1+1
  4300  162C  0021               	movlb	1	; select bank1
  4301  162D  084D               	movf	(sin@f+2)^(0+128),w
  4302  162E  0020               	movlb	0	; select bank0
  4303  162F  00A2               	movwf	___ftge@ff1+2
  4304  1630  3000               	movlw	0
  4305  1631  00A3               	movwf	___ftge@ff2
  4306  1632  3000               	movlw	0
  4307  1633  00A4               	movwf	___ftge@ff2+1
  4308  1634  3000               	movlw	0
  4309  1635  00A5               	movwf	___ftge@ff2+2
  4310  1636  319B  23C1  3196   	fcall	___ftge
  4311  1639  1803               	btfsc	3,0
  4312  163A  2E58               	goto	l2971
  4313  163B  0021               	movlb	1	; select bank1
  4314  163C  084B               	movf	sin@f^(0+128),w
  4315  163D  0020               	movlb	0	; select bank0
  4316  163E  00B0               	movwf	___ftneg@f1
  4317  163F  0021               	movlb	1	; select bank1
  4318  1640  084C               	movf	(sin@f+1)^(0+128),w
  4319  1641  0020               	movlb	0	; select bank0
  4320  1642  00B1               	movwf	___ftneg@f1+1
  4321  1643  0021               	movlb	1	; select bank1
  4322  1644  084D               	movf	(sin@f+2)^(0+128),w
  4323  1645  0020               	movlb	0	; select bank0
  4324  1646  00B2               	movwf	___ftneg@f1+2
  4325  1647  3199  2154  3196   	fcall	___ftneg
  4326  164A  0020               	movlb	0	; select bank0
  4327  164B  0830               	movf	?___ftneg,w
  4328  164C  0021               	movlb	1	; select bank1
  4329  164D  00CB               	movwf	sin@f^(0+128)
  4330  164E  0020               	movlb	0	; select bank0
  4331  164F  0831               	movf	?___ftneg+1,w
  4332  1650  0021               	movlb	1	; select bank1
  4333  1651  00CC               	movwf	(sin@f+1)^(0+128)
  4334  1652  0020               	movlb	0	; select bank0
  4335  1653  0832               	movf	?___ftneg+2,w
  4336  1654  0021               	movlb	1	; select bank1
  4337  1655  00CD               	movwf	(sin@f+2)^(0+128)
  4338  1656  01D7               	clrf	sin@sgn^(0+128)
  4339  1657  0AD7               	incf	sin@sgn^(0+128),f
  4340  1658                     l2971:	
  4341  1658  30FA               	movlw	250
  4342  1659  0020               	movlb	0	; select bank0
  4343  165A  00B3               	movwf	___ftmul@f1
  4344  165B  3022               	movlw	34
  4345  165C  00B4               	movwf	___ftmul@f1+1
  4346  165D  303E               	movlw	62
  4347  165E  00B5               	movwf	___ftmul@f1+2
  4348  165F  0021               	movlb	1	; select bank1
  4349  1660  084B               	movf	sin@f^(0+128),w
  4350  1661  0020               	movlb	0	; select bank0
  4351  1662  00B6               	movwf	___ftmul@f2
  4352  1663  0021               	movlb	1	; select bank1
  4353  1664  084C               	movf	(sin@f+1)^(0+128),w
  4354  1665  0020               	movlb	0	; select bank0
  4355  1666  00B7               	movwf	___ftmul@f2+1
  4356  1667  0021               	movlb	1	; select bank1
  4357  1668  084D               	movf	(sin@f+2)^(0+128),w
  4358  1669  0020               	movlb	0	; select bank0
  4359  166A  00B8               	movwf	___ftmul@f2+2
  4360  166B  3193  2384  3196   	fcall	___ftmul
  4361  166E  0020               	movlb	0	; select bank0
  4362  166F  0833               	movf	?___ftmul,w
  4363  1670  0021               	movlb	1	; select bank1
  4364  1671  00CB               	movwf	sin@f^(0+128)
  4365  1672  0020               	movlb	0	; select bank0
  4366  1673  0834               	movf	?___ftmul+1,w
  4367  1674  0021               	movlb	1	; select bank1
  4368  1675  00CC               	movwf	(sin@f+1)^(0+128)
  4369  1676  0020               	movlb	0	; select bank0
  4370  1677  0835               	movf	?___ftmul+2,w
  4371  1678  0021               	movlb	1	; select bank1
  4372  1679  00CD               	movwf	(sin@f+2)^(0+128)
  4373  167A  084B               	movf	sin@f^(0+128),w
  4374  167B  00BD               	movwf	floor@x^(0+128)
  4375  167C  084C               	movf	(sin@f+1)^(0+128),w
  4376  167D  00BE               	movwf	(floor@x+1)^(0+128)
  4377  167E  084D               	movf	(sin@f+2)^(0+128),w
  4378  167F  00BF               	movwf	(floor@x+2)^(0+128)
  4379  1680  3192  22D3  3196   	fcall	_floor
  4380  1683  0021               	movlb	1	; select bank1
  4381  1684  083D               	movf	?_floor^(0+128),w
  4382  1685  00C5               	movwf	___ftsub@f2^(0+128)
  4383  1686  083E               	movf	(?_floor+1)^(0+128),w
  4384  1687  00C6               	movwf	(___ftsub@f2+1)^(0+128)
  4385  1688  083F               	movf	(?_floor+2)^(0+128),w
  4386  1689  00C7               	movwf	(___ftsub@f2+2)^(0+128)
  4387  168A  084B               	movf	sin@f^(0+128),w
  4388  168B  00C8               	movwf	___ftsub@f1^(0+128)
  4389  168C  084C               	movf	(sin@f+1)^(0+128),w
  4390  168D  00C9               	movwf	(___ftsub@f1+1)^(0+128)
  4391  168E  084D               	movf	(sin@f+2)^(0+128),w
  4392  168F  00CA               	movwf	(___ftsub@f1+2)^(0+128)
  4393  1690  319A  221E  3196   	fcall	___ftsub
  4394  1693  0021               	movlb	1	; select bank1
  4395  1694  0845               	movf	?___ftsub^(0+128),w
  4396  1695  00CB               	movwf	sin@f^(0+128)
  4397  1696  0846               	movf	(?___ftsub+1)^(0+128),w
  4398  1697  00CC               	movwf	(sin@f+1)^(0+128)
  4399  1698  0847               	movf	(?___ftsub+2)^(0+128),w
  4400  1699  00CD               	movwf	(sin@f+2)^(0+128)
  4401  169A  3000               	movlw	0
  4402  169B  0020               	movlb	0	; select bank0
  4403  169C  00B3               	movwf	___ftmul@f1
  4404  169D  3080               	movlw	128
  4405  169E  00B4               	movwf	___ftmul@f1+1
  4406  169F  3040               	movlw	64
  4407  16A0  00B5               	movwf	___ftmul@f1+2
  4408  16A1  0021               	movlb	1	; select bank1
  4409  16A2  084B               	movf	sin@f^(0+128),w
  4410  16A3  0020               	movlb	0	; select bank0
  4411  16A4  00B6               	movwf	___ftmul@f2
  4412  16A5  0021               	movlb	1	; select bank1
  4413  16A6  084C               	movf	(sin@f+1)^(0+128),w
  4414  16A7  0020               	movlb	0	; select bank0
  4415  16A8  00B7               	movwf	___ftmul@f2+1
  4416  16A9  0021               	movlb	1	; select bank1
  4417  16AA  084D               	movf	(sin@f+2)^(0+128),w
  4418  16AB  0020               	movlb	0	; select bank0
  4419  16AC  00B8               	movwf	___ftmul@f2+2
  4420  16AD  3193  2384  3196   	fcall	___ftmul
  4421  16B0  0020               	movlb	0	; select bank0
  4422  16B1  0833               	movf	?___ftmul,w
  4423  16B2  0021               	movlb	1	; select bank1
  4424  16B3  00CB               	movwf	sin@f^(0+128)
  4425  16B4  0020               	movlb	0	; select bank0
  4426  16B5  0834               	movf	?___ftmul+1,w
  4427  16B6  0021               	movlb	1	; select bank1
  4428  16B7  00CC               	movwf	(sin@f+1)^(0+128)
  4429  16B8  0020               	movlb	0	; select bank0
  4430  16B9  0835               	movf	?___ftmul+2,w
  4431  16BA  0021               	movlb	1	; select bank1
  4432  16BB  00CD               	movwf	(sin@f+2)^(0+128)
  4433  16BC  3000               	movlw	0
  4434  16BD  0020               	movlb	0	; select bank0
  4435  16BE  00A0               	movwf	___ftge@ff1
  4436  16BF  3000               	movlw	0
  4437  16C0  00A1               	movwf	___ftge@ff1+1
  4438  16C1  3040               	movlw	64
  4439  16C2  00A2               	movwf	___ftge@ff1+2
  4440  16C3  0021               	movlb	1	; select bank1
  4441  16C4  084B               	movf	sin@f^(0+128),w
  4442  16C5  0020               	movlb	0	; select bank0
  4443  16C6  00A3               	movwf	___ftge@ff2
  4444  16C7  0021               	movlb	1	; select bank1
  4445  16C8  084C               	movf	(sin@f+1)^(0+128),w
  4446  16C9  0020               	movlb	0	; select bank0
  4447  16CA  00A4               	movwf	___ftge@ff2+1
  4448  16CB  0021               	movlb	1	; select bank1
  4449  16CC  084D               	movf	(sin@f+2)^(0+128),w
  4450  16CD  0020               	movlb	0	; select bank0
  4451  16CE  00A5               	movwf	___ftge@ff2+2
  4452  16CF  319B  23C1  3196   	fcall	___ftge
  4453  16D2  1803               	btfsc	3,0
  4454  16D3  2EF6               	goto	l2983
  4455  16D4  3000               	movlw	0
  4456  16D5  0021               	movlb	1	; select bank1
  4457  16D6  00C5               	movwf	___ftsub@f2^(0+128)
  4458  16D7  3000               	movlw	0
  4459  16D8  00C6               	movwf	(___ftsub@f2+1)^(0+128)
  4460  16D9  3040               	movlw	64
  4461  16DA  00C7               	movwf	(___ftsub@f2+2)^(0+128)
  4462  16DB  084B               	movf	sin@f^(0+128),w
  4463  16DC  00C8               	movwf	___ftsub@f1^(0+128)
  4464  16DD  084C               	movf	(sin@f+1)^(0+128),w
  4465  16DE  00C9               	movwf	(___ftsub@f1+1)^(0+128)
  4466  16DF  084D               	movf	(sin@f+2)^(0+128),w
  4467  16E0  00CA               	movwf	(___ftsub@f1+2)^(0+128)
  4468  16E1  319A  221E  3196   	fcall	___ftsub
  4469  16E4  0021               	movlb	1	; select bank1
  4470  16E5  0845               	movf	?___ftsub^(0+128),w
  4471  16E6  00CB               	movwf	sin@f^(0+128)
  4472  16E7  0846               	movf	(?___ftsub+1)^(0+128),w
  4473  16E8  00CC               	movwf	(sin@f+1)^(0+128)
  4474  16E9  0847               	movf	(?___ftsub+2)^(0+128),w
  4475  16EA  00CD               	movwf	(sin@f+2)^(0+128)
  4476  16EB  0857               	movf	sin@sgn^(0+128),w
  4477  16EC  1D03               	btfss	3,2
  4478  16ED  2EF0               	goto	u3060
  4479  16EE  3001               	movlw	1
  4480  16EF  2EF1               	goto	u3070
  4481  16F0                     u3060:	
  4482  16F0  3000               	movlw	0
  4483  16F1                     u3070:	
  4484  16F1  0020               	movlb	0	; select bank0
  4485  16F2  00EE               	movwf	??_sin
  4486  16F3  086E               	movf	??_sin,w
  4487  16F4  0021               	movlb	1	; select bank1
  4488  16F5  00D7               	movwf	sin@sgn^(0+128)
  4489  16F6                     l2983:	
  4490  16F6  3000               	movlw	0
  4491  16F7  0020               	movlb	0	; select bank0
  4492  16F8  00A0               	movwf	___ftge@ff1
  4493  16F9  3080               	movlw	128
  4494  16FA  00A1               	movwf	___ftge@ff1+1
  4495  16FB  303F               	movlw	63
  4496  16FC  00A2               	movwf	___ftge@ff1+2
  4497  16FD  0021               	movlb	1	; select bank1
  4498  16FE  084B               	movf	sin@f^(0+128),w
  4499  16FF  0020               	movlb	0	; select bank0
  4500  1700  00A3               	movwf	___ftge@ff2
  4501  1701  0021               	movlb	1	; select bank1
  4502  1702  084C               	movf	(sin@f+1)^(0+128),w
  4503  1703  0020               	movlb	0	; select bank0
  4504  1704  00A4               	movwf	___ftge@ff2+1
  4505  1705  0021               	movlb	1	; select bank1
  4506  1706  084D               	movf	(sin@f+2)^(0+128),w
  4507  1707  0020               	movlb	0	; select bank0
  4508  1708  00A5               	movwf	___ftge@ff2+2
  4509  1709  319B  23C1  3196   	fcall	___ftge
  4510  170C  1803               	btfsc	3,0
  4511  170D  2F3A               	goto	l863
  4512  170E  3000               	movlw	0
  4513  170F  0020               	movlb	0	; select bank0
  4514  1710  00C3               	movwf	___ftadd@f1
  4515  1711  3000               	movlw	0
  4516  1712  00C4               	movwf	___ftadd@f1+1
  4517  1713  3040               	movlw	64
  4518  1714  00C5               	movwf	___ftadd@f1+2
  4519  1715  0021               	movlb	1	; select bank1
  4520  1716  084B               	movf	sin@f^(0+128),w
  4521  1717  0020               	movlb	0	; select bank0
  4522  1718  00B0               	movwf	___ftneg@f1
  4523  1719  0021               	movlb	1	; select bank1
  4524  171A  084C               	movf	(sin@f+1)^(0+128),w
  4525  171B  0020               	movlb	0	; select bank0
  4526  171C  00B1               	movwf	___ftneg@f1+1
  4527  171D  0021               	movlb	1	; select bank1
  4528  171E  084D               	movf	(sin@f+2)^(0+128),w
  4529  171F  0020               	movlb	0	; select bank0
  4530  1720  00B2               	movwf	___ftneg@f1+2
  4531  1721  3199  2154  3196   	fcall	___ftneg
  4532  1724  0020               	movlb	0	; select bank0
  4533  1725  0830               	movf	?___ftneg,w
  4534  1726  00C6               	movwf	___ftadd@f2
  4535  1727  0831               	movf	?___ftneg+1,w
  4536  1728  00C7               	movwf	___ftadd@f2+1
  4537  1729  0832               	movf	?___ftneg+2,w
  4538  172A  00C8               	movwf	___ftadd@f2+2
  4539  172B  3188  201D  3196   	fcall	___ftadd
  4540  172E  0020               	movlb	0	; select bank0
  4541  172F  0843               	movf	?___ftadd,w
  4542  1730  0021               	movlb	1	; select bank1
  4543  1731  00CB               	movwf	sin@f^(0+128)
  4544  1732  0020               	movlb	0	; select bank0
  4545  1733  0844               	movf	?___ftadd+1,w
  4546  1734  0021               	movlb	1	; select bank1
  4547  1735  00CC               	movwf	(sin@f+1)^(0+128)
  4548  1736  0020               	movlb	0	; select bank0
  4549  1737  0845               	movf	?___ftadd+2,w
  4550  1738  0021               	movlb	1	; select bank1
  4551  1739  00CD               	movwf	(sin@f+2)^(0+128)
  4552  173A                     l863:	
  4553  173A  0021               	movlb	1	; select bank1
  4554  173B  084B               	movf	sin@f^(0+128),w
  4555  173C  0020               	movlb	0	; select bank0
  4556  173D  00B3               	movwf	___ftmul@f1
  4557  173E  0021               	movlb	1	; select bank1
  4558  173F  084C               	movf	(sin@f+1)^(0+128),w
  4559  1740  0020               	movlb	0	; select bank0
  4560  1741  00B4               	movwf	___ftmul@f1+1
  4561  1742  0021               	movlb	1	; select bank1
  4562  1743  084D               	movf	(sin@f+2)^(0+128),w
  4563  1744  0020               	movlb	0	; select bank0
  4564  1745  00B5               	movwf	___ftmul@f1+2
  4565  1746  0021               	movlb	1	; select bank1
  4566  1747  084B               	movf	sin@f^(0+128),w
  4567  1748  0020               	movlb	0	; select bank0
  4568  1749  00B6               	movwf	___ftmul@f2
  4569  174A  0021               	movlb	1	; select bank1
  4570  174B  084C               	movf	(sin@f+1)^(0+128),w
  4571  174C  0020               	movlb	0	; select bank0
  4572  174D  00B7               	movwf	___ftmul@f2+1
  4573  174E  0021               	movlb	1	; select bank1
  4574  174F  084D               	movf	(sin@f+2)^(0+128),w
  4575  1750  0020               	movlb	0	; select bank0
  4576  1751  00B8               	movwf	___ftmul@f2+2
  4577  1752  3193  2384  3196   	fcall	___ftmul
  4578  1755  0020               	movlb	0	; select bank0
  4579  1756  0833               	movf	?___ftmul,w
  4580  1757  0021               	movlb	1	; select bank1
  4581  1758  00D4               	movwf	sin@x2^(0+128)
  4582  1759  0020               	movlb	0	; select bank0
  4583  175A  0834               	movf	?___ftmul+1,w
  4584  175B  0021               	movlb	1	; select bank1
  4585  175C  00D5               	movwf	(sin@x2+1)^(0+128)
  4586  175D  0020               	movlb	0	; select bank0
  4587  175E  0835               	movf	?___ftmul+2,w
  4588  175F  0021               	movlb	1	; select bank1
  4589  1760  00D6               	movwf	(sin@x2+2)^(0+128)
  4590  1761  0854               	movf	sin@x2^(0+128),w
  4591  1762  0020               	movlb	0	; select bank0
  4592  1763  00D0               	movwf	eval_poly@x
  4593  1764  0021               	movlb	1	; select bank1
  4594  1765  0855               	movf	(sin@x2+1)^(0+128),w
  4595  1766  0020               	movlb	0	; select bank0
  4596  1767  00D1               	movwf	eval_poly@x+1
  4597  1768  0021               	movlb	1	; select bank1
  4598  1769  0856               	movf	(sin@x2+2)^(0+128),w
  4599  176A  0020               	movlb	0	; select bank0
  4600  176B  00D2               	movwf	eval_poly@x+2
  4601  176C  300F               	movlw	low (sin@coeff_b| (0+32768))
  4602  176D  00D3               	movwf	eval_poly@d
  4603  176E  30A0               	movlw	high (sin@coeff_b| (0+32768))
  4604  176F  00D4               	movwf	eval_poly@d+1
  4605  1770  3003               	movlw	3
  4606  1771  00D5               	movwf	eval_poly@n
  4607  1772  3000               	movlw	0
  4608  1773  00D6               	movwf	eval_poly@n+1
  4609  1774  319E  26D8  3196   	fcall	_eval_poly
  4610  1777  0020               	movlb	0	; select bank0
  4611  1778  0850               	movf	?_eval_poly,w
  4612  1779  0021               	movlb	1	; select bank1
  4613  177A  00CE               	movwf	sin@y^(0+128)
  4614  177B  0020               	movlb	0	; select bank0
  4615  177C  0851               	movf	?_eval_poly+1,w
  4616  177D  0021               	movlb	1	; select bank1
  4617  177E  00CF               	movwf	(sin@y+1)^(0+128)
  4618  177F  0020               	movlb	0	; select bank0
  4619  1780  0852               	movf	?_eval_poly+2,w
  4620  1781  0021               	movlb	1	; select bank1
  4621  1782  00D0               	movwf	(sin@y+2)^(0+128)
  4622  1783  3004               	movlw	4
  4623  1784  0020               	movlb	0	; select bank0
  4624  1785  00D5               	movwf	eval_poly@n
  4625  1786  3000               	movlw	0
  4626  1787  00D6               	movwf	eval_poly@n+1
  4627  1788  3000               	movlw	low (sin@coeff_a| (0+32768))
  4628  1789  00D3               	movwf	eval_poly@d
  4629  178A  30A0               	movlw	high (sin@coeff_a| (0+32768))
  4630  178B  00D4               	movwf	eval_poly@d+1
  4631  178C  0021               	movlb	1	; select bank1
  4632  178D  0854               	movf	sin@x2^(0+128),w
  4633  178E  0020               	movlb	0	; select bank0
  4634  178F  00D0               	movwf	eval_poly@x
  4635  1790  0021               	movlb	1	; select bank1
  4636  1791  0855               	movf	(sin@x2+1)^(0+128),w
  4637  1792  0020               	movlb	0	; select bank0
  4638  1793  00D1               	movwf	eval_poly@x+1
  4639  1794  0021               	movlb	1	; select bank1
  4640  1795  0856               	movf	(sin@x2+2)^(0+128),w
  4641  1796  0020               	movlb	0	; select bank0
  4642  1797  00D2               	movwf	eval_poly@x+2
  4643  1798  319E  26D8  3196   	fcall	_eval_poly
  4644  179B  0020               	movlb	0	; select bank0
  4645  179C  0850               	movf	?_eval_poly,w
  4646  179D  00DD               	movwf	___ftdiv@f1
  4647  179E  0851               	movf	?_eval_poly+1,w
  4648  179F  00DE               	movwf	___ftdiv@f1+1
  4649  17A0  0852               	movf	?_eval_poly+2,w
  4650  17A1  00DF               	movwf	___ftdiv@f1+2
  4651  17A2  0021               	movlb	1	; select bank1
  4652  17A3  084E               	movf	sin@y^(0+128),w
  4653  17A4  0020               	movlb	0	; select bank0
  4654  17A5  00DA               	movwf	___ftdiv@f2
  4655  17A6  0021               	movlb	1	; select bank1
  4656  17A7  084F               	movf	(sin@y+1)^(0+128),w
  4657  17A8  0020               	movlb	0	; select bank0
  4658  17A9  00DB               	movwf	___ftdiv@f2+1
  4659  17AA  0021               	movlb	1	; select bank1
  4660  17AB  0850               	movf	(sin@y+2)^(0+128),w
  4661  17AC  0020               	movlb	0	; select bank0
  4662  17AD  00DC               	movwf	___ftdiv@f2+2
  4663  17AE  3192  222A  3196   	fcall	___ftdiv
  4664  17B1  0020               	movlb	0	; select bank0
  4665  17B2  085A               	movf	?___ftdiv,w
  4666  17B3  0021               	movlb	1	; select bank1
  4667  17B4  00D1               	movwf	_sin$1666^(0+128)
  4668  17B5  0020               	movlb	0	; select bank0
  4669  17B6  085B               	movf	?___ftdiv+1,w
  4670  17B7  0021               	movlb	1	; select bank1
  4671  17B8  00D2               	movwf	(_sin$1666+1)^(0+128)
  4672  17B9  0020               	movlb	0	; select bank0
  4673  17BA  085C               	movf	?___ftdiv+2,w
  4674  17BB  0021               	movlb	1	; select bank1
  4675  17BC  00D3               	movwf	(_sin$1666+2)^(0+128)
  4676  17BD  0851               	movf	_sin$1666^(0+128),w
  4677  17BE  0020               	movlb	0	; select bank0
  4678  17BF  00B3               	movwf	___ftmul@f1
  4679  17C0  0021               	movlb	1	; select bank1
  4680  17C1  0852               	movf	(_sin$1666+1)^(0+128),w
  4681  17C2  0020               	movlb	0	; select bank0
  4682  17C3  00B4               	movwf	___ftmul@f1+1
  4683  17C4  0021               	movlb	1	; select bank1
  4684  17C5  0853               	movf	(_sin$1666+2)^(0+128),w
  4685  17C6  0020               	movlb	0	; select bank0
  4686  17C7  00B5               	movwf	___ftmul@f1+2
  4687  17C8  0021               	movlb	1	; select bank1
  4688  17C9  084B               	movf	sin@f^(0+128),w
  4689  17CA  0020               	movlb	0	; select bank0
  4690  17CB  00B6               	movwf	___ftmul@f2
  4691  17CC  0021               	movlb	1	; select bank1
  4692  17CD  084C               	movf	(sin@f+1)^(0+128),w
  4693  17CE  0020               	movlb	0	; select bank0
  4694  17CF  00B7               	movwf	___ftmul@f2+1
  4695  17D0  0021               	movlb	1	; select bank1
  4696  17D1  084D               	movf	(sin@f+2)^(0+128),w
  4697  17D2  0020               	movlb	0	; select bank0
  4698  17D3  00B8               	movwf	___ftmul@f2+2
  4699  17D4  3193  2384  3196   	fcall	___ftmul
  4700  17D7  0020               	movlb	0	; select bank0
  4701  17D8  0833               	movf	?___ftmul,w
  4702  17D9  0021               	movlb	1	; select bank1
  4703  17DA  00CB               	movwf	sin@f^(0+128)
  4704  17DB  0020               	movlb	0	; select bank0
  4705  17DC  0834               	movf	?___ftmul+1,w
  4706  17DD  0021               	movlb	1	; select bank1
  4707  17DE  00CC               	movwf	(sin@f+1)^(0+128)
  4708  17DF  0020               	movlb	0	; select bank0
  4709  17E0  0835               	movf	?___ftmul+2,w
  4710  17E1  0021               	movlb	1	; select bank1
  4711  17E2  00CD               	movwf	(sin@f+2)^(0+128)
  4712  17E3  0857               	movf	sin@sgn^(0+128),w
  4713  17E4  1903               	btfsc	3,2
  4714  17E5  0008               	return
  4715  17E6  084B               	movf	sin@f^(0+128),w
  4716  17E7  0020               	movlb	0	; select bank0
  4717  17E8  00B0               	movwf	___ftneg@f1
  4718  17E9  0021               	movlb	1	; select bank1
  4719  17EA  084C               	movf	(sin@f+1)^(0+128),w
  4720  17EB  0020               	movlb	0	; select bank0
  4721  17EC  00B1               	movwf	___ftneg@f1+1
  4722  17ED  0021               	movlb	1	; select bank1
  4723  17EE  084D               	movf	(sin@f+2)^(0+128),w
  4724  17EF  0020               	movlb	0	; select bank0
  4725  17F0  00B2               	movwf	___ftneg@f1+2
  4726  17F1  3199  2154         	fcall	___ftneg
  4727  17F3  0020               	movlb	0	; select bank0
  4728  17F4  0830               	movf	?___ftneg,w
  4729  17F5  0021               	movlb	1	; select bank1
  4730  17F6  00CB               	movwf	?_sin^(0+128)
  4731  17F7  0020               	movlb	0	; select bank0
  4732  17F8  0831               	movf	?___ftneg+1,w
  4733  17F9  0021               	movlb	1	; select bank1
  4734  17FA  00CC               	movwf	(?_sin+1)^(0+128)
  4735  17FB  0020               	movlb	0	; select bank0
  4736  17FC  0832               	movf	?___ftneg+2,w
  4737  17FD  0021               	movlb	1	; select bank1
  4738  17FE  00CD               	movwf	(?_sin+2)^(0+128)
  4739  17FF  0008               	return
  4740  1800                     __end_of_sin:	
  4741                           
  4742                           	psect	text4
  4743  12D3                     __ptext4:	
  4744 ;; *************** function _floor *****************
  4745 ;; Defined at:
  4746 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  x               3   29[BANK1 ] unsigned char 
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;  i               3   32[BANK1 ] unsigned char 
  4751 ;;  expon           2   35[BANK1 ] int 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  3   29[BANK1 ] int 
  4754 ;; Registers used:
  4755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4761 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4762 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4764 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4765 ;;Total ram usage:        9 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    4
  4768 ;; This function calls:
  4769 ;;		___altoft
  4770 ;;		___ftadd
  4771 ;;		___ftge
  4772 ;;		___fttol
  4773 ;;		_frexp
  4774 ;; This function is called by:
  4775 ;;		_sin
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           
  4780                           ;psect for function _floor
  4781  12D3                     _floor:	
  4782                           
  4783                           ;incstack = 0
  4784                           ; Regs used in _floor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4785  12D3  0021               	movlb	1	; select bank1
  4786  12D4  083D               	movf	floor@x^(0+128),w
  4787  12D5  0020               	movlb	0	; select bank0
  4788  12D6  00A0               	movwf	frexp@value
  4789  12D7  0021               	movlb	1	; select bank1
  4790  12D8  083E               	movf	(floor@x+1)^(0+128),w
  4791  12D9  0020               	movlb	0	; select bank0
  4792  12DA  00A1               	movwf	frexp@value+1
  4793  12DB  0021               	movlb	1	; select bank1
  4794  12DC  083F               	movf	(floor@x+2)^(0+128),w
  4795  12DD  0020               	movlb	0	; select bank0
  4796  12DE  00A2               	movwf	frexp@value+2
  4797  12DF  30C3               	movlw	(low (floor@expon| 0))& (0+255)
  4798  12E0  00ED               	movwf	??_floor
  4799  12E1  086D               	movf	??_floor,w
  4800  12E2  00A3               	movwf	frexp@eptr
  4801  12E3  319A  22DD  3192   	fcall	_frexp
  4802  12E6  0021               	movlb	1	; select bank1
  4803  12E7  1FC4               	btfss	(floor@expon+1)^(0+128),7
  4804  12E8  2B0F               	goto	l2843
  4805  12E9  083D               	movf	floor@x^(0+128),w
  4806  12EA  0020               	movlb	0	; select bank0
  4807  12EB  00A0               	movwf	___ftge@ff1
  4808  12EC  0021               	movlb	1	; select bank1
  4809  12ED  083E               	movf	(floor@x+1)^(0+128),w
  4810  12EE  0020               	movlb	0	; select bank0
  4811  12EF  00A1               	movwf	___ftge@ff1+1
  4812  12F0  0021               	movlb	1	; select bank1
  4813  12F1  083F               	movf	(floor@x+2)^(0+128),w
  4814  12F2  0020               	movlb	0	; select bank0
  4815  12F3  00A2               	movwf	___ftge@ff1+2
  4816  12F4  3000               	movlw	0
  4817  12F5  00A3               	movwf	___ftge@ff2
  4818  12F6  3000               	movlw	0
  4819  12F7  00A4               	movwf	___ftge@ff2+1
  4820  12F8  3000               	movlw	0
  4821  12F9  00A5               	movwf	___ftge@ff2+2
  4822  12FA  319B  23C1  3192   	fcall	___ftge
  4823  12FD  1803               	btfsc	3,0
  4824  12FE  2B07               	goto	l2839
  4825  12FF  3000               	movlw	0
  4826  1300  0021               	movlb	1	; select bank1
  4827  1301  00BD               	movwf	?_floor^(0+128)
  4828  1302  3080               	movlw	128
  4829  1303  00BE               	movwf	(?_floor+1)^(0+128)
  4830  1304  30BF               	movlw	191
  4831  1305  00BF               	movwf	(?_floor+2)^(0+128)
  4832  1306  0008               	return
  4833  1307                     l2839:	
  4834  1307  3000               	movlw	0
  4835  1308  0021               	movlb	1	; select bank1
  4836  1309  00BD               	movwf	?_floor^(0+128)
  4837  130A  3000               	movlw	0
  4838  130B  00BE               	movwf	(?_floor+1)^(0+128)
  4839  130C  3000               	movlw	0
  4840  130D  00BF               	movwf	(?_floor+2)^(0+128)
  4841  130E  0008               	return
  4842  130F                     l2843:	
  4843  130F  3000               	movlw	0
  4844  1310  0244               	subwf	(floor@expon+1)^(0+128),w
  4845  1311  3015               	movlw	21
  4846  1312  1903               	skipnz
  4847  1313  0243               	subwf	floor@expon^(0+128),w
  4848  1314  1803               	btfsc	3,0
  4849  1315  0008               	return
  4850  1316  083D               	movf	floor@x^(0+128),w
  4851  1317  00AF               	movwf	___fttol@f1^(0+128)
  4852  1318  083E               	movf	(floor@x+1)^(0+128),w
  4853  1319  00B0               	movwf	(___fttol@f1+1)^(0+128)
  4854  131A  083F               	movf	(floor@x+2)^(0+128),w
  4855  131B  00B1               	movwf	(___fttol@f1+2)^(0+128)
  4856  131C  3191  21A3  3192   	fcall	___fttol
  4857  131F  0021               	movlb	1	; select bank1
  4858  1320  0832               	movf	(?___fttol+3)^(0+128),w
  4859  1321  0020               	movlb	0	; select bank0
  4860  1322  00AB               	movwf	___altoft@c+3
  4861  1323  0021               	movlb	1	; select bank1
  4862  1324  0831               	movf	(?___fttol+2)^(0+128),w
  4863  1325  0020               	movlb	0	; select bank0
  4864  1326  00AA               	movwf	___altoft@c+2
  4865  1327  0021               	movlb	1	; select bank1
  4866  1328  0830               	movf	(?___fttol+1)^(0+128),w
  4867  1329  0020               	movlb	0	; select bank0
  4868  132A  00A9               	movwf	___altoft@c+1
  4869  132B  0021               	movlb	1	; select bank1
  4870  132C  082F               	movf	?___fttol^(0+128),w
  4871  132D  0020               	movlb	0	; select bank0
  4872  132E  00A8               	movwf	___altoft@c
  4873  132F  319C  2439  3192   	fcall	___altoft
  4874  1332  0020               	movlb	0	; select bank0
  4875  1333  0828               	movf	?___altoft,w
  4876  1334  0021               	movlb	1	; select bank1
  4877  1335  00C0               	movwf	floor@i^(0+128)
  4878  1336  0020               	movlb	0	; select bank0
  4879  1337  0829               	movf	?___altoft+1,w
  4880  1338  0021               	movlb	1	; select bank1
  4881  1339  00C1               	movwf	(floor@i+1)^(0+128)
  4882  133A  0020               	movlb	0	; select bank0
  4883  133B  082A               	movf	?___altoft+2,w
  4884  133C  0021               	movlb	1	; select bank1
  4885  133D  00C2               	movwf	(floor@i+2)^(0+128)
  4886  133E  083D               	movf	floor@x^(0+128),w
  4887  133F  0020               	movlb	0	; select bank0
  4888  1340  00A0               	movwf	___ftge@ff1
  4889  1341  0021               	movlb	1	; select bank1
  4890  1342  083E               	movf	(floor@x+1)^(0+128),w
  4891  1343  0020               	movlb	0	; select bank0
  4892  1344  00A1               	movwf	___ftge@ff1+1
  4893  1345  0021               	movlb	1	; select bank1
  4894  1346  083F               	movf	(floor@x+2)^(0+128),w
  4895  1347  0020               	movlb	0	; select bank0
  4896  1348  00A2               	movwf	___ftge@ff1+2
  4897  1349  0021               	movlb	1	; select bank1
  4898  134A  0840               	movf	floor@i^(0+128),w
  4899  134B  0020               	movlb	0	; select bank0
  4900  134C  00A3               	movwf	___ftge@ff2
  4901  134D  0021               	movlb	1	; select bank1
  4902  134E  0841               	movf	(floor@i+1)^(0+128),w
  4903  134F  0020               	movlb	0	; select bank0
  4904  1350  00A4               	movwf	___ftge@ff2+1
  4905  1351  0021               	movlb	1	; select bank1
  4906  1352  0842               	movf	(floor@i+2)^(0+128),w
  4907  1353  0020               	movlb	0	; select bank0
  4908  1354  00A5               	movwf	___ftge@ff2+2
  4909  1355  319B  23C1  3192   	fcall	___ftge
  4910  1358  1803               	btfsc	3,0
  4911  1359  2B7C               	goto	l2853
  4912  135A  3000               	movlw	0
  4913  135B  0020               	movlb	0	; select bank0
  4914  135C  00C3               	movwf	___ftadd@f1
  4915  135D  3080               	movlw	128
  4916  135E  00C4               	movwf	___ftadd@f1+1
  4917  135F  30BF               	movlw	191
  4918  1360  00C5               	movwf	___ftadd@f1+2
  4919  1361  0021               	movlb	1	; select bank1
  4920  1362  0840               	movf	floor@i^(0+128),w
  4921  1363  0020               	movlb	0	; select bank0
  4922  1364  00C6               	movwf	___ftadd@f2
  4923  1365  0021               	movlb	1	; select bank1
  4924  1366  0841               	movf	(floor@i+1)^(0+128),w
  4925  1367  0020               	movlb	0	; select bank0
  4926  1368  00C7               	movwf	___ftadd@f2+1
  4927  1369  0021               	movlb	1	; select bank1
  4928  136A  0842               	movf	(floor@i+2)^(0+128),w
  4929  136B  0020               	movlb	0	; select bank0
  4930  136C  00C8               	movwf	___ftadd@f2+2
  4931  136D  3188  201D         	fcall	___ftadd
  4932  136F  0020               	movlb	0	; select bank0
  4933  1370  0843               	movf	?___ftadd,w
  4934  1371  0021               	movlb	1	; select bank1
  4935  1372  00BD               	movwf	?_floor^(0+128)
  4936  1373  0020               	movlb	0	; select bank0
  4937  1374  0844               	movf	?___ftadd+1,w
  4938  1375  0021               	movlb	1	; select bank1
  4939  1376  00BE               	movwf	(?_floor+1)^(0+128)
  4940  1377  0020               	movlb	0	; select bank0
  4941  1378  0845               	movf	?___ftadd+2,w
  4942  1379  0021               	movlb	1	; select bank1
  4943  137A  00BF               	movwf	(?_floor+2)^(0+128)
  4944  137B  0008               	return
  4945  137C                     l2853:	
  4946  137C  0021               	movlb	1	; select bank1
  4947  137D  0840               	movf	floor@i^(0+128),w
  4948  137E  00BD               	movwf	?_floor^(0+128)
  4949  137F  0841               	movf	(floor@i+1)^(0+128),w
  4950  1380  00BE               	movwf	(?_floor+1)^(0+128)
  4951  1381  0842               	movf	(floor@i+2)^(0+128),w
  4952  1382  00BF               	movwf	(?_floor+2)^(0+128)
  4953  1383  0008               	return
  4954  1384                     __end_of_floor:	
  4955                           
  4956                           	psect	text5
  4957  1BC1                     __ptext5:	
  4958 ;; *************** function ___ftge *****************
  4959 ;; Defined at:
  4960 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
  4961 ;; Parameters:    Size  Location     Type
  4962 ;;  ff1             3    0[BANK0 ] float 
  4963 ;;  ff2             3    3[BANK0 ] float 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;		None
  4966 ;; Return value:  Size  Location     Type
  4967 ;;		None               void
  4968 ;; Registers used:
  4969 ;;		wreg, status,2, status,0
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4975 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4977 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4978 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4979 ;;Total ram usage:        9 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    2
  4982 ;; This function calls:
  4983 ;;		Nothing
  4984 ;; This function is called by:
  4985 ;;		_sin
  4986 ;;		_floor
  4987 ;; This function uses a non-reentrant model
  4988 ;;
  4989                           
  4990                           
  4991                           ;psect for function ___ftge
  4992  1BC1                     ___ftge:	
  4993                           
  4994                           ;incstack = 0
  4995                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4996  1BC1  0020               	movlb	0	; select bank0
  4997  1BC2  1FA2               	btfss	___ftge@ff1+2,7
  4998  1BC3  2BD8               	goto	l2463
  4999  1BC4  0920               	comf	___ftge@ff1,w
  5000  1BC5  00A6               	movwf	??___ftge
  5001  1BC6  0921               	comf	___ftge@ff1+1,w
  5002  1BC7  00A7               	movwf	??___ftge+1
  5003  1BC8  0922               	comf	___ftge@ff1+2,w
  5004  1BC9  00A8               	movwf	??___ftge+2
  5005  1BCA  0AA6               	incf	??___ftge,f
  5006  1BCB  1903               	skipnz
  5007  1BCC  0AA7               	incf	??___ftge+1,f
  5008  1BCD  1903               	skipnz
  5009  1BCE  0AA8               	incf	??___ftge+2,f
  5010  1BCF  3000               	movlw	0
  5011  1BD0  0726               	addwf	??___ftge,w
  5012  1BD1  00A0               	movwf	___ftge@ff1
  5013  1BD2  3000               	movlw	0
  5014  1BD3  3D27               	addwfc	??___ftge+1,w
  5015  1BD4  00A1               	movwf	___ftge@ff1+1
  5016  1BD5  3080               	movlw	128
  5017  1BD6  3D28               	addwfc	??___ftge+2,w
  5018  1BD7  00A2               	movwf	___ftge@ff1+2
  5019  1BD8                     l2463:	
  5020  1BD8  1FA5               	btfss	___ftge@ff2+2,7
  5021  1BD9  2BEE               	goto	l2467
  5022  1BDA  0923               	comf	___ftge@ff2,w
  5023  1BDB  00A6               	movwf	??___ftge
  5024  1BDC  0924               	comf	___ftge@ff2+1,w
  5025  1BDD  00A7               	movwf	??___ftge+1
  5026  1BDE  0925               	comf	___ftge@ff2+2,w
  5027  1BDF  00A8               	movwf	??___ftge+2
  5028  1BE0  0AA6               	incf	??___ftge,f
  5029  1BE1  1903               	skipnz
  5030  1BE2  0AA7               	incf	??___ftge+1,f
  5031  1BE3  1903               	skipnz
  5032  1BE4  0AA8               	incf	??___ftge+2,f
  5033  1BE5  3000               	movlw	0
  5034  1BE6  0726               	addwf	??___ftge,w
  5035  1BE7  00A3               	movwf	___ftge@ff2
  5036  1BE8  3000               	movlw	0
  5037  1BE9  3D27               	addwfc	??___ftge+1,w
  5038  1BEA  00A4               	movwf	___ftge@ff2+1
  5039  1BEB  3080               	movlw	128
  5040  1BEC  3D28               	addwfc	??___ftge+2,w
  5041  1BED  00A5               	movwf	___ftge@ff2+2
  5042  1BEE                     l2467:	
  5043  1BEE  3080               	movlw	128
  5044  1BEF  06A2               	xorwf	___ftge@ff1+2,f
  5045  1BF0  3080               	movlw	128
  5046  1BF1  06A5               	xorwf	___ftge@ff2+2,f
  5047  1BF2  0825               	movf	___ftge@ff2+2,w
  5048  1BF3  0222               	subwf	___ftge@ff1+2,w
  5049  1BF4  1D03               	skipz
  5050  1BF5  0008               	return
  5051  1BF6  0824               	movf	___ftge@ff2+1,w
  5052  1BF7  0221               	subwf	___ftge@ff1+1,w
  5053  1BF8  1D03               	skipz
  5054  1BF9  0008               	return
  5055  1BFA  0823               	movf	___ftge@ff2,w
  5056  1BFB  0220               	subwf	___ftge@ff1,w
  5057  1BFC  0008               	return
  5058  1BFD                     __end_of___ftge:	
  5059                           
  5060                           	psect	text6
  5061  1ED8                     __ptext6:	
  5062 ;; *************** function _eval_poly *****************
  5063 ;; Defined at:
  5064 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\evalpoly.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  x               3   48[BANK0 ] float 
  5067 ;;  d               2   51[BANK0 ] PTR const 
  5068 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  5069 ;;  n               2   53[BANK0 ] int 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;  res             3   55[BANK0 ] int 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  3   48[BANK0 ] int 
  5074 ;; Registers used:
  5075 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5081 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5082 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5084 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5085 ;;Total ram usage:       10 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    4
  5088 ;; This function calls:
  5089 ;;		___ftadd
  5090 ;;		___ftmul
  5091 ;;		___wmul
  5092 ;; This function is called by:
  5093 ;;		_sin
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _eval_poly
  5099  1ED8                     _eval_poly:	
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5103  1ED8  0020               	movlb	0	; select bank0
  5104  1ED9  0856               	movf	eval_poly@n+1,w
  5105  1EDA  00A1               	movwf	___wmul@multiplier+1
  5106  1EDB  0855               	movf	eval_poly@n,w
  5107  1EDC  00A0               	movwf	___wmul@multiplier
  5108  1EDD  3003               	movlw	3
  5109  1EDE  00A2               	movwf	___wmul@multiplicand
  5110  1EDF  3000               	movlw	0
  5111  1EE0  00A3               	movwf	___wmul@multiplicand+1
  5112  1EE1  3188  2001  319E   	fcall	___wmul
  5113  1EE4  0020               	movlb	0	; select bank0
  5114  1EE5  0853               	movf	eval_poly@d,w
  5115  1EE6  0720               	addwf	?___wmul,w
  5116  1EE7  0084               	movwf	4
  5117  1EE8  0854               	movf	eval_poly@d+1,w
  5118  1EE9  3D21               	addwfc	?___wmul+1,w
  5119  1EEA  0085               	movwf	5
  5120  1EEB  3F00               	moviw [0]fsr0
  5121  1EEC  00D7               	movwf	eval_poly@res
  5122  1EED  3F01               	moviw [1]fsr0
  5123  1EEE  00D8               	movwf	eval_poly@res+1
  5124  1EEF  3F02               	moviw [2]fsr0
  5125  1EF0                     L5:	
  5126  1EF0  00D9               	movwf	eval_poly@res+2
  5127  1EF1  0855               	movf	eval_poly@n,w
  5128  1EF2  0456               	iorwf	eval_poly@n+1,w
  5129  1EF3  1903               	btfsc	3,2
  5130  1EF4  2F31               	goto	l2863
  5131  1EF5  30FF               	movlw	255
  5132  1EF6  07D5               	addwf	eval_poly@n,f
  5133  1EF7  30FF               	movlw	255
  5134  1EF8  3DD6               	addwfc	eval_poly@n+1,f
  5135  1EF9  0856               	movf	eval_poly@n+1,w
  5136  1EFA  00A1               	movwf	___wmul@multiplier+1
  5137  1EFB  0855               	movf	eval_poly@n,w
  5138  1EFC  00A0               	movwf	___wmul@multiplier
  5139  1EFD  3003               	movlw	3
  5140  1EFE  00A2               	movwf	___wmul@multiplicand
  5141  1EFF  3000               	movlw	0
  5142  1F00  00A3               	movwf	___wmul@multiplicand+1
  5143  1F01  3188  2001  319E   	fcall	___wmul
  5144  1F04  0020               	movlb	0	; select bank0
  5145  1F05  0853               	movf	eval_poly@d,w
  5146  1F06  0720               	addwf	?___wmul,w
  5147  1F07  0084               	movwf	4
  5148  1F08  0854               	movf	eval_poly@d+1,w
  5149  1F09  3D21               	addwfc	?___wmul+1,w
  5150  1F0A  0085               	movwf	5
  5151  1F0B  3F00               	moviw [0]fsr0
  5152  1F0C  00C3               	movwf	___ftadd@f1
  5153  1F0D  3F01               	moviw [1]fsr0
  5154  1F0E  00C4               	movwf	___ftadd@f1+1
  5155  1F0F  3F02               	moviw [2]fsr0
  5156  1F10  00C5               	movwf	___ftadd@f1+2
  5157  1F11  0857               	movf	eval_poly@res,w
  5158  1F12  00B3               	movwf	___ftmul@f1
  5159  1F13  0858               	movf	eval_poly@res+1,w
  5160  1F14  00B4               	movwf	___ftmul@f1+1
  5161  1F15  0859               	movf	eval_poly@res+2,w
  5162  1F16  00B5               	movwf	___ftmul@f1+2
  5163  1F17  0850               	movf	eval_poly@x,w
  5164  1F18  00B6               	movwf	___ftmul@f2
  5165  1F19  0851               	movf	eval_poly@x+1,w
  5166  1F1A  00B7               	movwf	___ftmul@f2+1
  5167  1F1B  0852               	movf	eval_poly@x+2,w
  5168  1F1C  00B8               	movwf	___ftmul@f2+2
  5169  1F1D  3193  2384  319E   	fcall	___ftmul
  5170  1F20  0020               	movlb	0	; select bank0
  5171  1F21  0833               	movf	?___ftmul,w
  5172  1F22  00C6               	movwf	___ftadd@f2
  5173  1F23  0834               	movf	?___ftmul+1,w
  5174  1F24  00C7               	movwf	___ftadd@f2+1
  5175  1F25  0835               	movf	?___ftmul+2,w
  5176  1F26  00C8               	movwf	___ftadd@f2+2
  5177  1F27  3188  201D  319E   	fcall	___ftadd
  5178  1F2A  0020               	movlb	0	; select bank0
  5179  1F2B  0843               	movf	?___ftadd,w
  5180  1F2C  00D7               	movwf	eval_poly@res
  5181  1F2D  0844               	movf	?___ftadd+1,w
  5182  1F2E  00D8               	movwf	eval_poly@res+1
  5183  1F2F  0845               	movf	?___ftadd+2,w
  5184  1F30  2EF0               	goto	L5
  5185  1F31                     l2863:	
  5186  1F31  0857               	movf	eval_poly@res,w
  5187  1F32  00D0               	movwf	?_eval_poly
  5188  1F33  0858               	movf	eval_poly@res+1,w
  5189  1F34  00D1               	movwf	?_eval_poly+1
  5190  1F35  0859               	movf	eval_poly@res+2,w
  5191  1F36  00D2               	movwf	?_eval_poly+2
  5192  1F37  0008               	return
  5193  1F38                     __end_of_eval_poly:	
  5194                           
  5195                           	psect	text7
  5196  1A1E                     __ptext7:	
  5197 ;; *************** function ___ftsub *****************
  5198 ;; Defined at:
  5199 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;  f2              3   37[BANK1 ] float 
  5202 ;;  f1              3   40[BANK1 ] float 
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;		None
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  3   37[BANK1 ] float 
  5207 ;; Registers used:
  5208 ;;		wreg, status,2, status,0, pclath, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5214 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5217 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5218 ;;Total ram usage:        6 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    4
  5221 ;; This function calls:
  5222 ;;		___ftadd
  5223 ;; This function is called by:
  5224 ;;		_sin
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           
  5229                           ;psect for function ___ftsub
  5230  1A1E                     ___ftsub:	
  5231                           
  5232                           ;incstack = 0
  5233                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5234  1A1E  0021               	movlb	1	; select bank1
  5235  1A1F  0847               	movf	(___ftsub@f2+2)^(0+128),w
  5236  1A20  0446               	iorwf	(___ftsub@f2+1)^(0+128),w
  5237  1A21  0445               	iorwf	___ftsub@f2^(0+128),w
  5238  1A22  1903               	skipnz
  5239  1A23  2A26               	goto	l2807
  5240  1A24  3080               	movlw	128
  5241  1A25  06C7               	xorwf	(___ftsub@f2+2)^(0+128),f
  5242  1A26                     l2807:	
  5243  1A26  0848               	movf	___ftsub@f1^(0+128),w
  5244  1A27  0020               	movlb	0	; select bank0
  5245  1A28  00C3               	movwf	___ftadd@f1
  5246  1A29  0021               	movlb	1	; select bank1
  5247  1A2A  0849               	movf	(___ftsub@f1+1)^(0+128),w
  5248  1A2B  0020               	movlb	0	; select bank0
  5249  1A2C  00C4               	movwf	___ftadd@f1+1
  5250  1A2D  0021               	movlb	1	; select bank1
  5251  1A2E  084A               	movf	(___ftsub@f1+2)^(0+128),w
  5252  1A2F  0020               	movlb	0	; select bank0
  5253  1A30  00C5               	movwf	___ftadd@f1+2
  5254  1A31  0021               	movlb	1	; select bank1
  5255  1A32  0845               	movf	___ftsub@f2^(0+128),w
  5256  1A33  0020               	movlb	0	; select bank0
  5257  1A34  00C6               	movwf	___ftadd@f2
  5258  1A35  0021               	movlb	1	; select bank1
  5259  1A36  0846               	movf	(___ftsub@f2+1)^(0+128),w
  5260  1A37  0020               	movlb	0	; select bank0
  5261  1A38  00C7               	movwf	___ftadd@f2+1
  5262  1A39  0021               	movlb	1	; select bank1
  5263  1A3A  0847               	movf	(___ftsub@f2+2)^(0+128),w
  5264  1A3B  0020               	movlb	0	; select bank0
  5265  1A3C  00C8               	movwf	___ftadd@f2+2
  5266  1A3D  3188  201D         	fcall	___ftadd
  5267  1A3F  0020               	movlb	0	; select bank0
  5268  1A40  0843               	movf	?___ftadd,w
  5269  1A41  0021               	movlb	1	; select bank1
  5270  1A42  00C5               	movwf	?___ftsub^(0+128)
  5271  1A43  0020               	movlb	0	; select bank0
  5272  1A44  0844               	movf	?___ftadd+1,w
  5273  1A45  0021               	movlb	1	; select bank1
  5274  1A46  00C6               	movwf	(?___ftsub+1)^(0+128)
  5275  1A47  0020               	movlb	0	; select bank0
  5276  1A48  0845               	movf	?___ftadd+2,w
  5277  1A49  0021               	movlb	1	; select bank1
  5278  1A4A  00C7               	movwf	(?___ftsub+2)^(0+128)
  5279  1A4B  0008               	return
  5280  1A4C                     __end_of___ftsub:	
  5281                           
  5282                           	psect	text8
  5283  06F9                     __ptext8:	
  5284 ;; *************** function _set_subdivision *****************
  5285 ;; Defined at:
  5286 ;;		line 116 in file "user.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  x               2   29[BANK1 ] int 
  5289 ;;  y               2   31[BANK1 ] int 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  2   29[BANK1 ] int 
  5294 ;; Registers used:
  5295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5301 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5304 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5305 ;;Total ram usage:        4 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    4
  5308 ;; This function calls:
  5309 ;;		___awtoft
  5310 ;;		___ftmul
  5311 ;;		___fttol
  5312 ;; This function is called by:
  5313 ;;		_main
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           
  5318                           ;psect for function _set_subdivision
  5319  06F9                     _set_subdivision:	
  5320                           
  5321                           ;user.c: 119: switch (y) {
  5322                           
  5323                           ;incstack = 0
  5324                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5325  06F9  2FE1               	goto	l3025
  5326  06FA                     l3013:	
  5327                           ;user.c: 120: case 1:
  5328                           
  5329                           
  5330                           ;user.c: 121: x = x * .75;
  5331  06FA  0021               	movlb	1	; select bank1
  5332  06FB  083E               	movf	(set_subdivision@x+1)^(0+128),w
  5333  06FC  0020               	movlb	0	; select bank0
  5334  06FD  00AA               	movwf	___awtoft@c+1
  5335  06FE  0021               	movlb	1	; select bank1
  5336  06FF  083D               	movf	set_subdivision@x^(0+128),w
  5337  0700  0020               	movlb	0	; select bank0
  5338  0701  00A9               	movwf	___awtoft@c
  5339  0702  3199  21FC  3186   	fcall	___awtoft
  5340  0705  0020               	movlb	0	; select bank0
  5341  0706  0829               	movf	?___awtoft,w
  5342  0707  00B6               	movwf	___ftmul@f2
  5343  0708  082A               	movf	?___awtoft+1,w
  5344  0709  00B7               	movwf	___ftmul@f2+1
  5345  070A  082B               	movf	?___awtoft+2,w
  5346  070B  00B8               	movwf	___ftmul@f2+2
  5347  070C  3000               	movlw	0
  5348  070D  00B3               	movwf	___ftmul@f1
  5349  070E  3040               	movlw	64
  5350  070F  00B4               	movwf	___ftmul@f1+1
  5351  0710  303F               	movlw	63
  5352  0711  00B5               	movwf	___ftmul@f1+2
  5353  0712  3193  2384  3186   	fcall	___ftmul
  5354  0715  0020               	movlb	0	; select bank0
  5355  0716  0833               	movf	?___ftmul,w
  5356  0717  0021               	movlb	1	; select bank1
  5357  0718  00AF               	movwf	___fttol@f1^(0+128)
  5358  0719  0020               	movlb	0	; select bank0
  5359  071A  0834               	movf	?___ftmul+1,w
  5360  071B  0021               	movlb	1	; select bank1
  5361  071C  00B0               	movwf	(___fttol@f1+1)^(0+128)
  5362  071D  0020               	movlb	0	; select bank0
  5363  071E  0835               	movf	?___ftmul+2,w
  5364  071F  0021               	movlb	1	; select bank1
  5365  0720  00B1               	movwf	(___fttol@f1+2)^(0+128)
  5366  0721  3191  21A3         	fcall	___fttol
  5367  0723  0021               	movlb	1	; select bank1
  5368  0724  0830               	movf	(?___fttol^(0+128)+1),w
  5369  0725  00BE               	movwf	(set_subdivision@x+1)^(0+128)
  5370  0726  082F               	movf	?___fttol^(0+128),w
  5371  0727  00BD               	movwf	set_subdivision@x^(0+128)
  5372                           
  5373                           ;user.c: 122: break;
  5374  0728  0008               	return
  5375  0729                     l3015:	
  5376                           ;user.c: 123: case 2:
  5377                           
  5378                           
  5379                           ;user.c: 124: x = x * .66666;
  5380  0729  083E               	movf	(set_subdivision@x+1)^(0+128),w
  5381  072A  0020               	movlb	0	; select bank0
  5382  072B  00AA               	movwf	___awtoft@c+1
  5383  072C  0021               	movlb	1	; select bank1
  5384  072D  083D               	movf	set_subdivision@x^(0+128),w
  5385  072E  0020               	movlb	0	; select bank0
  5386  072F  00A9               	movwf	___awtoft@c
  5387  0730  3199  21FC  3186   	fcall	___awtoft
  5388  0733  0020               	movlb	0	; select bank0
  5389  0734  0829               	movf	?___awtoft,w
  5390  0735  00B6               	movwf	___ftmul@f2
  5391  0736  082A               	movf	?___awtoft+1,w
  5392  0737  00B7               	movwf	___ftmul@f2+1
  5393  0738  082B               	movf	?___awtoft+2,w
  5394  0739  00B8               	movwf	___ftmul@f2+2
  5395  073A  30AA               	movlw	170
  5396  073B  00B3               	movwf	___ftmul@f1
  5397  073C  302A               	movlw	42
  5398  073D  00B4               	movwf	___ftmul@f1+1
  5399  073E  303F               	movlw	63
  5400  073F  00B5               	movwf	___ftmul@f1+2
  5401  0740  3193  2384  3186   	fcall	___ftmul
  5402  0743  0020               	movlb	0	; select bank0
  5403  0744  0833               	movf	?___ftmul,w
  5404  0745  0021               	movlb	1	; select bank1
  5405  0746  00AF               	movwf	___fttol@f1^(0+128)
  5406  0747  0020               	movlb	0	; select bank0
  5407  0748  0834               	movf	?___ftmul+1,w
  5408  0749  0021               	movlb	1	; select bank1
  5409  074A  00B0               	movwf	(___fttol@f1+1)^(0+128)
  5410  074B  0020               	movlb	0	; select bank0
  5411  074C  0835               	movf	?___ftmul+2,w
  5412  074D  0021               	movlb	1	; select bank1
  5413  074E  00B1               	movwf	(___fttol@f1+2)^(0+128)
  5414  074F  3191  21A3         	fcall	___fttol
  5415  0751  0021               	movlb	1	; select bank1
  5416  0752  0830               	movf	(?___fttol^(0+128)+1),w
  5417  0753  00BE               	movwf	(set_subdivision@x+1)^(0+128)
  5418  0754  082F               	movf	?___fttol^(0+128),w
  5419  0755  00BD               	movwf	set_subdivision@x^(0+128)
  5420                           
  5421                           ;user.c: 125: break;
  5422  0756  0008               	return
  5423  0757                     l3017:	
  5424                           ;user.c: 126: case 3:
  5425                           
  5426                           
  5427                           ;user.c: 127: x = x * .5;
  5428  0757  083E               	movf	(set_subdivision@x+1)^(0+128),w
  5429  0758  0020               	movlb	0	; select bank0
  5430  0759  00AA               	movwf	___awtoft@c+1
  5431  075A  0021               	movlb	1	; select bank1
  5432  075B  083D               	movf	set_subdivision@x^(0+128),w
  5433  075C  0020               	movlb	0	; select bank0
  5434  075D  00A9               	movwf	___awtoft@c
  5435  075E  3199  21FC  3186   	fcall	___awtoft
  5436  0761  0020               	movlb	0	; select bank0
  5437  0762  0829               	movf	?___awtoft,w
  5438  0763  00B6               	movwf	___ftmul@f2
  5439  0764  082A               	movf	?___awtoft+1,w
  5440  0765  00B7               	movwf	___ftmul@f2+1
  5441  0766  082B               	movf	?___awtoft+2,w
  5442  0767  00B8               	movwf	___ftmul@f2+2
  5443  0768  3000               	movlw	0
  5444  0769  00B3               	movwf	___ftmul@f1
  5445  076A  3000               	movlw	0
  5446  076B  00B4               	movwf	___ftmul@f1+1
  5447  076C  303F               	movlw	63
  5448  076D  00B5               	movwf	___ftmul@f1+2
  5449  076E  3193  2384  3186   	fcall	___ftmul
  5450  0771  0020               	movlb	0	; select bank0
  5451  0772  0833               	movf	?___ftmul,w
  5452  0773  0021               	movlb	1	; select bank1
  5453  0774  00AF               	movwf	___fttol@f1^(0+128)
  5454  0775  0020               	movlb	0	; select bank0
  5455  0776  0834               	movf	?___ftmul+1,w
  5456  0777  0021               	movlb	1	; select bank1
  5457  0778  00B0               	movwf	(___fttol@f1+1)^(0+128)
  5458  0779  0020               	movlb	0	; select bank0
  5459  077A  0835               	movf	?___ftmul+2,w
  5460  077B  0021               	movlb	1	; select bank1
  5461  077C  00B1               	movwf	(___fttol@f1+2)^(0+128)
  5462  077D  3191  21A3         	fcall	___fttol
  5463  077F  0021               	movlb	1	; select bank1
  5464  0780  0830               	movf	(?___fttol^(0+128)+1),w
  5465  0781  00BE               	movwf	(set_subdivision@x+1)^(0+128)
  5466  0782  082F               	movf	?___fttol^(0+128),w
  5467  0783  00BD               	movwf	set_subdivision@x^(0+128)
  5468                           
  5469                           ;user.c: 128: break;
  5470  0784  0008               	return
  5471  0785                     l3019:	
  5472                           ;user.c: 129: case 4:
  5473                           
  5474                           
  5475                           ;user.c: 130: x = x * .3333;
  5476  0785  083E               	movf	(set_subdivision@x+1)^(0+128),w
  5477  0786  0020               	movlb	0	; select bank0
  5478  0787  00AA               	movwf	___awtoft@c+1
  5479  0788  0021               	movlb	1	; select bank1
  5480  0789  083D               	movf	set_subdivision@x^(0+128),w
  5481  078A  0020               	movlb	0	; select bank0
  5482  078B  00A9               	movwf	___awtoft@c
  5483  078C  3199  21FC  3186   	fcall	___awtoft
  5484  078F  0020               	movlb	0	; select bank0
  5485  0790  0829               	movf	?___awtoft,w
  5486  0791  00B6               	movwf	___ftmul@f2
  5487  0792  082A               	movf	?___awtoft+1,w
  5488  0793  00B7               	movwf	___ftmul@f2+1
  5489  0794  082B               	movf	?___awtoft+2,w
  5490  0795  00B8               	movwf	___ftmul@f2+2
  5491  0796  30A6               	movlw	166
  5492  0797  00B3               	movwf	___ftmul@f1
  5493  0798  30AA               	movlw	170
  5494  0799  00B4               	movwf	___ftmul@f1+1
  5495  079A  303E               	movlw	62
  5496  079B  00B5               	movwf	___ftmul@f1+2
  5497  079C  3193  2384  3186   	fcall	___ftmul
  5498  079F  0020               	movlb	0	; select bank0
  5499  07A0  0833               	movf	?___ftmul,w
  5500  07A1  0021               	movlb	1	; select bank1
  5501  07A2  00AF               	movwf	___fttol@f1^(0+128)
  5502  07A3  0020               	movlb	0	; select bank0
  5503  07A4  0834               	movf	?___ftmul+1,w
  5504  07A5  0021               	movlb	1	; select bank1
  5505  07A6  00B0               	movwf	(___fttol@f1+1)^(0+128)
  5506  07A7  0020               	movlb	0	; select bank0
  5507  07A8  0835               	movf	?___ftmul+2,w
  5508  07A9  0021               	movlb	1	; select bank1
  5509  07AA  00B1               	movwf	(___fttol@f1+2)^(0+128)
  5510  07AB  3191  21A3         	fcall	___fttol
  5511  07AD  0021               	movlb	1	; select bank1
  5512  07AE  0830               	movf	(?___fttol^(0+128)+1),w
  5513  07AF  00BE               	movwf	(set_subdivision@x+1)^(0+128)
  5514  07B0  082F               	movf	?___fttol^(0+128),w
  5515  07B1  00BD               	movwf	set_subdivision@x^(0+128)
  5516                           
  5517                           ;user.c: 131: break;
  5518  07B2  0008               	return
  5519  07B3                     l3021:	
  5520                           ;user.c: 132: case 5:
  5521                           
  5522                           
  5523                           ;user.c: 133: x = x * .25;
  5524  07B3  083E               	movf	(set_subdivision@x+1)^(0+128),w
  5525  07B4  0020               	movlb	0	; select bank0
  5526  07B5  00AA               	movwf	___awtoft@c+1
  5527  07B6  0021               	movlb	1	; select bank1
  5528  07B7  083D               	movf	set_subdivision@x^(0+128),w
  5529  07B8  0020               	movlb	0	; select bank0
  5530  07B9  00A9               	movwf	___awtoft@c
  5531  07BA  3199  21FC  3186   	fcall	___awtoft
  5532  07BD  0020               	movlb	0	; select bank0
  5533  07BE  0829               	movf	?___awtoft,w
  5534  07BF  00B6               	movwf	___ftmul@f2
  5535  07C0  082A               	movf	?___awtoft+1,w
  5536  07C1  00B7               	movwf	___ftmul@f2+1
  5537  07C2  082B               	movf	?___awtoft+2,w
  5538  07C3  00B8               	movwf	___ftmul@f2+2
  5539  07C4  3000               	movlw	0
  5540  07C5  00B3               	movwf	___ftmul@f1
  5541  07C6  3080               	movlw	128
  5542  07C7  00B4               	movwf	___ftmul@f1+1
  5543  07C8  303E               	movlw	62
  5544  07C9  00B5               	movwf	___ftmul@f1+2
  5545  07CA  3193  2384  3186   	fcall	___ftmul
  5546  07CD  0020               	movlb	0	; select bank0
  5547  07CE  0833               	movf	?___ftmul,w
  5548  07CF  0021               	movlb	1	; select bank1
  5549  07D0  00AF               	movwf	___fttol@f1^(0+128)
  5550  07D1  0020               	movlb	0	; select bank0
  5551  07D2  0834               	movf	?___ftmul+1,w
  5552  07D3  0021               	movlb	1	; select bank1
  5553  07D4  00B0               	movwf	(___fttol@f1+1)^(0+128)
  5554  07D5  0020               	movlb	0	; select bank0
  5555  07D6  0835               	movf	?___ftmul+2,w
  5556  07D7  0021               	movlb	1	; select bank1
  5557  07D8  00B1               	movwf	(___fttol@f1+2)^(0+128)
  5558  07D9  3191  21A3         	fcall	___fttol
  5559  07DB  0021               	movlb	1	; select bank1
  5560  07DC  0830               	movf	(?___fttol^(0+128)+1),w
  5561  07DD  00BE               	movwf	(set_subdivision@x+1)^(0+128)
  5562  07DE  082F               	movf	?___fttol^(0+128),w
  5563  07DF  00BD               	movwf	set_subdivision@x^(0+128)
  5564                           
  5565                           ;user.c: 138: }
  5566                           
  5567                           ;user.c: 137: break;
  5568                           
  5569                           ;user.c: 135: case 6:
  5570                           
  5571                           ;user.c: 134: break;
  5572  07E0  0008               	return
  5573  07E1                     l3025:	
  5574                           
  5575                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5576                           ; Switch size 1, requested type "space"
  5577                           ; Number of cases is 1, Range of values is 0 to 0
  5578                           ; switch strategies available:
  5579                           ; Name         Instructions Cycles
  5580                           ; simple_byte            4     3 (average)
  5581                           ; direct_byte            8     6 (fixed)
  5582                           ; jumptable            260     6 (fixed)
  5583                           ;	Chosen strategy is simple_byte
  5584  07E1  0021               	movlb	1	; select bank1
  5585  07E2  0840               	movf	(set_subdivision@y+1)^(0+128),w
  5586  07E3  3A00               	xorlw	0	; case 0
  5587  07E4  1903               	skipnz
  5588  07E5  2FE7               	goto	l3625
  5589  07E6  2FFB               	goto	l408
  5590  07E7                     l3625:	
  5591                           
  5592                           ; Switch size 1, requested type "space"
  5593                           ; Number of cases is 6, Range of values is 1 to 6
  5594                           ; switch strategies available:
  5595                           ; Name         Instructions Cycles
  5596                           ; simple_byte           19    10 (average)
  5597                           ; direct_byte           21     9 (fixed)
  5598                           ; jumptable            263     9 (fixed)
  5599                           ;	Chosen strategy is simple_byte
  5600  07E7  083F               	movf	set_subdivision@y^(0+128),w
  5601  07E8  3A01               	xorlw	1	; case 1
  5602  07E9  1903               	skipnz
  5603  07EA  2EFA               	goto	l3013
  5604  07EB  3A03               	xorlw	3	; case 2
  5605  07EC  1903               	skipnz
  5606  07ED  2F29               	goto	l3015
  5607  07EE  3A01               	xorlw	1	; case 3
  5608  07EF  1903               	skipnz
  5609  07F0  2F57               	goto	l3017
  5610  07F1  3A07               	xorlw	7	; case 4
  5611  07F2  1903               	skipnz
  5612  07F3  2F85               	goto	l3019
  5613  07F4  3A01               	xorlw	1	; case 5
  5614  07F5  1903               	skipnz
  5615  07F6  2FB3               	goto	l3021
  5616  07F7  3A03               	xorlw	3	; case 6
  5617  07F8  1903               	skipnz
  5618  07F9  2FFB               	goto	l408
  5619  07FA  2FFB               	goto	l408
  5620  07FB                     l408:	
  5621                           
  5622                           ;user.c: 139: return x;
  5623  07FB  0008               	return
  5624  07FC                     __end_of_set_subdivision:	
  5625                           
  5626                           	psect	text9
  5627  19FC                     __ptext9:	
  5628 ;; *************** function ___awtoft *****************
  5629 ;; Defined at:
  5630 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  5631 ;; Parameters:    Size  Location     Type
  5632 ;;  c               2    9[BANK0 ] int 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;  sign            1   14[BANK0 ] unsigned char 
  5635 ;; Return value:  Size  Location     Type
  5636 ;;                  3    9[BANK0 ] float 
  5637 ;; Registers used:
  5638 ;;		wreg, status,2, status,0, pclath, cstack
  5639 ;; Tracked objects:
  5640 ;;		On entry : 0/0
  5641 ;;		On exit  : 0/0
  5642 ;;		Unchanged: 0/0
  5643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5644 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5646 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5647 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5648 ;;Total ram usage:        6 bytes
  5649 ;; Hardware stack levels used:    1
  5650 ;; Hardware stack levels required when called:    3
  5651 ;; This function calls:
  5652 ;;		___ftpack
  5653 ;; This function is called by:
  5654 ;;		_main
  5655 ;;		_set_subdivision
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           
  5660                           ;psect for function ___awtoft
  5661  19FC                     ___awtoft:	
  5662                           
  5663                           ;incstack = 0
  5664                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  5665  19FC  0020               	movlb	0	; select bank0
  5666  19FD  01AE               	clrf	___awtoft@sign
  5667  19FE  1FAA               	btfss	___awtoft@c+1,7
  5668  19FF  2A07               	goto	l2749
  5669  1A00  09A9               	comf	___awtoft@c,f
  5670  1A01  09AA               	comf	___awtoft@c+1,f
  5671  1A02  0AA9               	incf	___awtoft@c,f
  5672  1A03  1903               	skipnz
  5673  1A04  0AAA               	incf	___awtoft@c+1,f
  5674  1A05  01AE               	clrf	___awtoft@sign
  5675  1A06  0AAE               	incf	___awtoft@sign,f
  5676  1A07                     l2749:	
  5677  1A07  0829               	movf	___awtoft@c,w
  5678  1A08  00A0               	movwf	___ftpack@arg
  5679  1A09  082A               	movf	___awtoft@c+1,w
  5680  1A0A  00A1               	movwf	___ftpack@arg+1
  5681  1A0B  01A2               	clrf	___ftpack@arg+2
  5682  1A0C  308E               	movlw	142
  5683  1A0D  00AC               	movwf	??___awtoft
  5684  1A0E  082C               	movf	??___awtoft,w
  5685  1A0F  00A3               	movwf	___ftpack@exp
  5686  1A10  082E               	movf	___awtoft@sign,w
  5687  1A11  00AD               	movwf	??___awtoft+1
  5688  1A12  082D               	movf	??___awtoft+1,w
  5689  1A13  00A4               	movwf	___ftpack@sign
  5690  1A14  319F  279B         	fcall	___ftpack
  5691  1A16  0020               	movlb	0	; select bank0
  5692  1A17  0820               	movf	?___ftpack,w
  5693  1A18  00A9               	movwf	?___awtoft
  5694  1A19  0821               	movf	?___ftpack+1,w
  5695  1A1A  00AA               	movwf	?___awtoft+1
  5696  1A1B  0822               	movf	?___ftpack+2,w
  5697  1A1C  00AB               	movwf	?___awtoft+2
  5698  1A1D  0008               	return
  5699  1A1E                     __end_of___awtoft:	
  5700                           
  5701                           	psect	text10
  5702  1F38                     __ptext10:	
  5703 ;; *************** function _set_leds_top *****************
  5704 ;; Defined at:
  5705 ;;		line 142 in file "user.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  x               2    0[BANK0 ] int 
  5708 ;;  ledState        2    2[BANK0 ] int 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;		None
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  1    wreg      void 
  5713 ;; Registers used:
  5714 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5720 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5723 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5724 ;;Total ram usage:        4 bytes
  5725 ;; Hardware stack levels used:    1
  5726 ;; Hardware stack levels required when called:    2
  5727 ;; This function calls:
  5728 ;;		Nothing
  5729 ;; This function is called by:
  5730 ;;		_main
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           
  5735                           ;psect for function _set_leds_top
  5736  1F38                     _set_leds_top:	
  5737                           
  5738                           ;user.c: 143: switch (x) {
  5739                           
  5740                           ;incstack = 0
  5741                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
  5742  1F38  2F80               	goto	l2901
  5743  1F39                     l2869:	
  5744                           ;user.c: 144: case 1:
  5745                           
  5746                           
  5747                           ;user.c: 145: LATFbits.LATF0 = ledState;
  5748  1F39  0020               	movlb	0	; select bank0
  5749  1F3A  0C22               	rrf	set_leds_top@ledState,w
  5750  1F3B  0027               	movlb	7	; select bank7
  5751  1F3C  1C03               	skipc
  5752  1F3D  100C               	bcf	12,0	;volatile
  5753  1F3E  1803               	skipnc
  5754  1F3F  140C               	bsf	12,0	;volatile
  5755                           
  5756                           ;user.c: 146: LATFbits.LATF1 = 0;
  5757  1F40  108C               	bcf	12,1	;volatile
  5758                           
  5759                           ;user.c: 147: LATFbits.LATF2 = 0;
  5760  1F41  110C               	bcf	12,2	;volatile
  5761                           
  5762                           ;user.c: 148: LATFbits.LATF3 = 0;
  5763  1F42  118C               	bcf	12,3	;volatile
  5764                           
  5765                           ;user.c: 149: LATFbits.LATF4 = 0;
  5766  1F43  120C               	bcf	12,4	;volatile
  5767                           
  5768                           ;user.c: 150: break;
  5769  1F44  0008               	return
  5770  1F45                     l420:	
  5771                           ;user.c: 151: case 2:
  5772                           
  5773                           
  5774                           ;user.c: 152: LATFbits.LATF0 = 0;
  5775  1F45  0027               	movlb	7	; select bank7
  5776  1F46  100C               	bcf	12,0	;volatile
  5777                           
  5778                           ;user.c: 153: LATFbits.LATF1 = ledState;
  5779  1F47  0020               	movlb	0	; select bank0
  5780  1F48  0C22               	rrf	set_leds_top@ledState,w
  5781  1F49  0027               	movlb	7	; select bank7
  5782  1F4A  1C03               	skipc
  5783  1F4B  108C               	bcf	12,1	;volatile
  5784  1F4C  1803               	skipnc
  5785  1F4D  148C               	bsf	12,1	;volatile
  5786                           
  5787                           ;user.c: 154: LATFbits.LATF2 = 0;
  5788  1F4E  110C               	bcf	12,2	;volatile
  5789                           
  5790                           ;user.c: 155: LATFbits.LATF3 = 0;
  5791  1F4F  118C               	bcf	12,3	;volatile
  5792                           
  5793                           ;user.c: 156: LATFbits.LATF4 = 0;
  5794  1F50  120C               	bcf	12,4	;volatile
  5795                           
  5796                           ;user.c: 157: break;
  5797  1F51  0008               	return
  5798  1F52                     l421:	
  5799                           ;user.c: 158: case 3:
  5800                           
  5801                           
  5802                           ;user.c: 159: LATFbits.LATF0 = 0;
  5803  1F52  0027               	movlb	7	; select bank7
  5804  1F53  100C               	bcf	12,0	;volatile
  5805                           
  5806                           ;user.c: 160: LATFbits.LATF1 = 0;
  5807  1F54  108C               	bcf	12,1	;volatile
  5808                           
  5809                           ;user.c: 161: LATFbits.LATF2 = ledState;
  5810  1F55  0020               	movlb	0	; select bank0
  5811  1F56  0C22               	rrf	set_leds_top@ledState,w
  5812  1F57  0027               	movlb	7	; select bank7
  5813  1F58  1C03               	skipc
  5814  1F59  110C               	bcf	12,2	;volatile
  5815  1F5A  1803               	skipnc
  5816  1F5B  150C               	bsf	12,2	;volatile
  5817                           
  5818                           ;user.c: 162: LATFbits.LATF3 = 0;
  5819  1F5C  118C               	bcf	12,3	;volatile
  5820                           
  5821                           ;user.c: 163: LATFbits.LATF4 = 0;
  5822  1F5D  120C               	bcf	12,4	;volatile
  5823                           
  5824                           ;user.c: 164: break;
  5825  1F5E  0008               	return
  5826  1F5F                     l422:	
  5827                           ;user.c: 165: case 4:
  5828                           
  5829                           
  5830                           ;user.c: 166: LATFbits.LATF0 = 0;
  5831  1F5F  0027               	movlb	7	; select bank7
  5832  1F60  100C               	bcf	12,0	;volatile
  5833                           
  5834                           ;user.c: 167: LATFbits.LATF1 = 0;
  5835  1F61  108C               	bcf	12,1	;volatile
  5836                           
  5837                           ;user.c: 168: LATFbits.LATF2 = 0;
  5838  1F62  110C               	bcf	12,2	;volatile
  5839                           
  5840                           ;user.c: 169: LATFbits.LATF3 = ledState;
  5841  1F63  0020               	movlb	0	; select bank0
  5842  1F64  0C22               	rrf	set_leds_top@ledState,w
  5843  1F65  0027               	movlb	7	; select bank7
  5844  1F66  1C03               	skipc
  5845  1F67  118C               	bcf	12,3	;volatile
  5846  1F68  1803               	skipnc
  5847  1F69  158C               	bsf	12,3	;volatile
  5848                           
  5849                           ;user.c: 170: LATFbits.LATF4 = 0;
  5850  1F6A  120C               	bcf	12,4	;volatile
  5851                           
  5852                           ;user.c: 171: break;
  5853  1F6B  0008               	return
  5854  1F6C                     l423:	
  5855                           ;user.c: 172: case 5:
  5856                           
  5857                           
  5858                           ;user.c: 173: LATFbits.LATF0 = 0;
  5859  1F6C  0027               	movlb	7	; select bank7
  5860  1F6D  100C               	bcf	12,0	;volatile
  5861                           
  5862                           ;user.c: 174: LATFbits.LATF1 = 0;
  5863  1F6E  108C               	bcf	12,1	;volatile
  5864                           
  5865                           ;user.c: 175: LATFbits.LATF2 = 0;
  5866  1F6F  110C               	bcf	12,2	;volatile
  5867                           
  5868                           ;user.c: 176: LATFbits.LATF3 = 0;
  5869  1F70  118C               	bcf	12,3	;volatile
  5870                           
  5871                           ;user.c: 177: LATFbits.LATF4 = ledState;
  5872  1F71  0020               	movlb	0	; select bank0
  5873  1F72  0C22               	rrf	set_leds_top@ledState,w
  5874  1F73  0027               	movlb	7	; select bank7
  5875  1F74  1C03               	skipc
  5876  1F75  120C               	bcf	12,4	;volatile
  5877  1F76  1803               	skipnc
  5878  1F77  160C               	bsf	12,4	;volatile
  5879                           
  5880                           ;user.c: 178: break;
  5881  1F78  0008               	return
  5882  1F79                     l424:	
  5883                           ;user.c: 179: case 6:
  5884                           
  5885                           
  5886                           ;user.c: 180: LATFbits.LATF0 = 0;
  5887  1F79  0027               	movlb	7	; select bank7
  5888  1F7A  100C               	bcf	12,0	;volatile
  5889                           
  5890                           ;user.c: 181: LATFbits.LATF1 = 0;
  5891  1F7B  108C               	bcf	12,1	;volatile
  5892                           
  5893                           ;user.c: 182: LATFbits.LATF2 = 0;
  5894  1F7C  110C               	bcf	12,2	;volatile
  5895                           
  5896                           ;user.c: 183: LATFbits.LATF3 = 0;
  5897  1F7D  118C               	bcf	12,3	;volatile
  5898                           
  5899                           ;user.c: 184: LATFbits.LATF4 = 0;
  5900  1F7E  120C               	bcf	12,4	;volatile
  5901                           
  5902                           ;user.c: 186: }
  5903                           
  5904                           ;user.c: 185: break;
  5905  1F7F  0008               	return
  5906  1F80                     l2901:	
  5907                           
  5908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5909                           ; Switch size 1, requested type "space"
  5910                           ; Number of cases is 1, Range of values is 0 to 0
  5911                           ; switch strategies available:
  5912                           ; Name         Instructions Cycles
  5913                           ; simple_byte            4     3 (average)
  5914                           ; direct_byte            8     6 (fixed)
  5915                           ; jumptable            260     6 (fixed)
  5916                           ;	Chosen strategy is simple_byte
  5917  1F80  0020               	movlb	0	; select bank0
  5918  1F81  0821               	movf	set_leds_top@x+1,w
  5919  1F82  3A00               	xorlw	0	; case 0
  5920  1F83  1903               	skipnz
  5921  1F84  2F86               	goto	l3627
  5922  1F85  2F9A               	goto	l425
  5923  1F86                     l3627:	
  5924                           
  5925                           ; Switch size 1, requested type "space"
  5926                           ; Number of cases is 6, Range of values is 1 to 6
  5927                           ; switch strategies available:
  5928                           ; Name         Instructions Cycles
  5929                           ; simple_byte           19    10 (average)
  5930                           ; direct_byte           21     9 (fixed)
  5931                           ; jumptable            263     9 (fixed)
  5932                           ;	Chosen strategy is simple_byte
  5933  1F86  0820               	movf	set_leds_top@x,w
  5934  1F87  3A01               	xorlw	1	; case 1
  5935  1F88  1903               	skipnz
  5936  1F89  2F39               	goto	l2869
  5937  1F8A  3A03               	xorlw	3	; case 2
  5938  1F8B  1903               	skipnz
  5939  1F8C  2F45               	goto	l420
  5940  1F8D  3A01               	xorlw	1	; case 3
  5941  1F8E  1903               	skipnz
  5942  1F8F  2F52               	goto	l421
  5943  1F90  3A07               	xorlw	7	; case 4
  5944  1F91  1903               	skipnz
  5945  1F92  2F5F               	goto	l422
  5946  1F93  3A01               	xorlw	1	; case 5
  5947  1F94  1903               	skipnz
  5948  1F95  2F6C               	goto	l423
  5949  1F96  3A03               	xorlw	3	; case 6
  5950  1F97  1903               	skipnz
  5951  1F98  2F79               	goto	l424
  5952  1F99  2F9A               	goto	l425
  5953  1F9A                     l425:	
  5954  1F9A  0008               	return
  5955  1F9B                     __end_of_set_leds_top:	
  5956                           
  5957                           	psect	text11
  5958  1CF5                     __ptext11:	
  5959 ;; *************** function _set_leds_bottom *****************
  5960 ;; Defined at:
  5961 ;;		line 69 in file "user.c"
  5962 ;; Parameters:    Size  Location     Type
  5963 ;;  x               2    0[BANK0 ] int 
  5964 ;; Auto vars:     Size  Location     Type
  5965 ;;		None
  5966 ;; Return value:  Size  Location     Type
  5967 ;;                  1    wreg      void 
  5968 ;; Registers used:
  5969 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5970 ;; Tracked objects:
  5971 ;;		On entry : 0/0
  5972 ;;		On exit  : 0/0
  5973 ;;		Unchanged: 0/0
  5974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5975 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5978 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5979 ;;Total ram usage:        2 bytes
  5980 ;; Hardware stack levels used:    1
  5981 ;; Hardware stack levels required when called:    2
  5982 ;; This function calls:
  5983 ;;		Nothing
  5984 ;; This function is called by:
  5985 ;;		_main
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           
  5990                           ;psect for function _set_leds_bottom
  5991  1CF5                     _set_leds_bottom:	
  5992                           
  5993                           ;user.c: 70: switch (x) {
  5994                           
  5995                           ;incstack = 0
  5996                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
  5997  1CF5  2D20               	goto	l2923
  5998  1CF6                     l396:	
  5999                           ;user.c: 71: case 1:
  6000                           
  6001                           
  6002                           ;user.c: 72: LATDbits.LATD0 = 1;
  6003  1CF6  0022               	movlb	2	; select bank2
  6004  1CF7  140F               	bsf	15,0	;volatile
  6005                           
  6006                           ;user.c: 73: LATDbits.LATD1 = 0;
  6007  1CF8  108F               	bcf	15,1	;volatile
  6008                           
  6009                           ;user.c: 74: LATDbits.LATD2 = 0;
  6010  1CF9  110F               	bcf	15,2	;volatile
  6011                           
  6012                           ;user.c: 75: LATDbits.LATD3 = 0;
  6013  1CFA  118F               	bcf	15,3	;volatile
  6014                           
  6015                           ;user.c: 76: LATDbits.LATD4 = 0;
  6016  1CFB  120F               	bcf	15,4	;volatile
  6017                           
  6018                           ;user.c: 77: break;
  6019  1CFC  0008               	return
  6020  1CFD                     l398:	
  6021                           ;user.c: 78: case 2:
  6022                           
  6023                           
  6024                           ;user.c: 79: LATDbits.LATD0 = 0;
  6025  1CFD  0022               	movlb	2	; select bank2
  6026  1CFE  100F               	bcf	15,0	;volatile
  6027                           
  6028                           ;user.c: 80: LATDbits.LATD1 = 1;
  6029  1CFF  148F               	bsf	15,1	;volatile
  6030                           
  6031                           ;user.c: 81: LATDbits.LATD2 = 0;
  6032  1D00  110F               	bcf	15,2	;volatile
  6033                           
  6034                           ;user.c: 82: LATDbits.LATD3 = 0;
  6035  1D01  118F               	bcf	15,3	;volatile
  6036                           
  6037                           ;user.c: 83: LATDbits.LATD4 = 0;
  6038  1D02  120F               	bcf	15,4	;volatile
  6039                           
  6040                           ;user.c: 84: break;
  6041  1D03  0008               	return
  6042  1D04                     l399:	
  6043                           ;user.c: 85: case 3:
  6044                           
  6045                           
  6046                           ;user.c: 86: LATDbits.LATD0 = 0;
  6047  1D04  0022               	movlb	2	; select bank2
  6048  1D05  100F               	bcf	15,0	;volatile
  6049                           
  6050                           ;user.c: 87: LATDbits.LATD1 = 0;
  6051  1D06  108F               	bcf	15,1	;volatile
  6052                           
  6053                           ;user.c: 88: LATDbits.LATD2 = 1;
  6054  1D07  150F               	bsf	15,2	;volatile
  6055                           
  6056                           ;user.c: 89: LATDbits.LATD3 = 0;
  6057  1D08  118F               	bcf	15,3	;volatile
  6058                           
  6059                           ;user.c: 90: LATDbits.LATD4 = 0;
  6060  1D09  120F               	bcf	15,4	;volatile
  6061                           
  6062                           ;user.c: 91: break;
  6063  1D0A  0008               	return
  6064  1D0B                     l400:	
  6065                           ;user.c: 92: case 4:
  6066                           
  6067                           
  6068                           ;user.c: 93: LATDbits.LATD0 = 0;
  6069  1D0B  0022               	movlb	2	; select bank2
  6070  1D0C  100F               	bcf	15,0	;volatile
  6071                           
  6072                           ;user.c: 94: LATDbits.LATD1 = 0;
  6073  1D0D  108F               	bcf	15,1	;volatile
  6074                           
  6075                           ;user.c: 95: LATDbits.LATD2 = 0;
  6076  1D0E  110F               	bcf	15,2	;volatile
  6077                           
  6078                           ;user.c: 96: LATDbits.LATD3 = 1;
  6079  1D0F  158F               	bsf	15,3	;volatile
  6080                           
  6081                           ;user.c: 97: LATDbits.LATD4 = 0;
  6082  1D10  120F               	bcf	15,4	;volatile
  6083                           
  6084                           ;user.c: 98: break;
  6085  1D11  0008               	return
  6086  1D12                     l401:	
  6087                           ;user.c: 99: case 5:
  6088                           
  6089                           
  6090                           ;user.c: 100: LATDbits.LATD0 = 0;
  6091  1D12  0022               	movlb	2	; select bank2
  6092  1D13  100F               	bcf	15,0	;volatile
  6093                           
  6094                           ;user.c: 101: LATDbits.LATD1 = 0;
  6095  1D14  108F               	bcf	15,1	;volatile
  6096                           
  6097                           ;user.c: 102: LATDbits.LATD2 = 0;
  6098  1D15  110F               	bcf	15,2	;volatile
  6099                           
  6100                           ;user.c: 103: LATDbits.LATD3 = 0;
  6101  1D16  118F               	bcf	15,3	;volatile
  6102                           
  6103                           ;user.c: 104: LATDbits.LATD4 = 1;
  6104  1D17  160F               	bsf	15,4	;volatile
  6105                           
  6106                           ;user.c: 105: break;
  6107  1D18  0008               	return
  6108  1D19                     l402:	
  6109                           ;user.c: 106: case 6:
  6110                           
  6111                           
  6112                           ;user.c: 107: LATDbits.LATD0 = 0;
  6113  1D19  0022               	movlb	2	; select bank2
  6114  1D1A  100F               	bcf	15,0	;volatile
  6115                           
  6116                           ;user.c: 108: LATDbits.LATD1 = 0;
  6117  1D1B  108F               	bcf	15,1	;volatile
  6118                           
  6119                           ;user.c: 109: LATDbits.LATD2 = 0;
  6120  1D1C  110F               	bcf	15,2	;volatile
  6121                           
  6122                           ;user.c: 110: LATDbits.LATD3 = 0;
  6123  1D1D  118F               	bcf	15,3	;volatile
  6124                           
  6125                           ;user.c: 111: LATDbits.LATD4 = 0;
  6126  1D1E  120F               	bcf	15,4	;volatile
  6127                           
  6128                           ;user.c: 113: }
  6129                           
  6130                           ;user.c: 112: break;
  6131  1D1F  0008               	return
  6132  1D20                     l2923:	
  6133                           
  6134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6135                           ; Switch size 1, requested type "space"
  6136                           ; Number of cases is 1, Range of values is 0 to 0
  6137                           ; switch strategies available:
  6138                           ; Name         Instructions Cycles
  6139                           ; simple_byte            4     3 (average)
  6140                           ; direct_byte            8     6 (fixed)
  6141                           ; jumptable            260     6 (fixed)
  6142                           ;	Chosen strategy is simple_byte
  6143  1D20  0020               	movlb	0	; select bank0
  6144  1D21  0821               	movf	set_leds_bottom@x+1,w
  6145  1D22  3A00               	xorlw	0	; case 0
  6146  1D23  1903               	skipnz
  6147  1D24  2D26               	goto	l3629
  6148  1D25  2D3A               	goto	l403
  6149  1D26                     l3629:	
  6150                           
  6151                           ; Switch size 1, requested type "space"
  6152                           ; Number of cases is 6, Range of values is 1 to 6
  6153                           ; switch strategies available:
  6154                           ; Name         Instructions Cycles
  6155                           ; simple_byte           19    10 (average)
  6156                           ; direct_byte           21     9 (fixed)
  6157                           ; jumptable            263     9 (fixed)
  6158                           ;	Chosen strategy is simple_byte
  6159  1D26  0820               	movf	set_leds_bottom@x,w
  6160  1D27  3A01               	xorlw	1	; case 1
  6161  1D28  1903               	skipnz
  6162  1D29  2CF6               	goto	l396
  6163  1D2A  3A03               	xorlw	3	; case 2
  6164  1D2B  1903               	skipnz
  6165  1D2C  2CFD               	goto	l398
  6166  1D2D  3A01               	xorlw	1	; case 3
  6167  1D2E  1903               	skipnz
  6168  1D2F  2D04               	goto	l399
  6169  1D30  3A07               	xorlw	7	; case 4
  6170  1D31  1903               	skipnz
  6171  1D32  2D0B               	goto	l400
  6172  1D33  3A01               	xorlw	1	; case 5
  6173  1D34  1903               	skipnz
  6174  1D35  2D12               	goto	l401
  6175  1D36  3A03               	xorlw	3	; case 6
  6176  1D37  1903               	skipnz
  6177  1D38  2D19               	goto	l402
  6178  1D39  2D3A               	goto	l403
  6179  1D3A                     l403:	
  6180  1D3A  0008               	return
  6181  1D3B                     __end_of_set_leds_bottom:	
  6182                           
  6183                           	psect	text12
  6184  10B0                     __ptext12:	
  6185 ;; *************** function _round *****************
  6186 ;; Defined at:
  6187 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\round.c"
  6188 ;; Parameters:    Size  Location     Type
  6189 ;;  x               3   56[BANK1 ] void 
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;  f               3   59[BANK1 ] void 
  6192 ;; Return value:  Size  Location     Type
  6193 ;;                  3   56[BANK1 ] void 
  6194 ;; Registers used:
  6195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6196 ;; Tracked objects:
  6197 ;;		On entry : 0/0
  6198 ;;		On exit  : 0/0
  6199 ;;		Unchanged: 0/0
  6200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6201 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6202 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6204 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6205 ;;Total ram usage:        6 bytes
  6206 ;; Hardware stack levels used:    1
  6207 ;; Hardware stack levels required when called:    5
  6208 ;; This function calls:
  6209 ;;		___ftadd
  6210 ;;		___ftneg
  6211 ;;		_trunc
  6212 ;; This function is called by:
  6213 ;;		_main
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _round
  6219  10B0                     _round:	
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _round: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6223  10B0  0021               	movlb	1	; select bank1
  6224  10B1  0858               	movf	round@x^(0+128),w
  6225  10B2  0020               	movlb	0	; select bank0
  6226  10B3  00C3               	movwf	___ftadd@f1
  6227  10B4  0021               	movlb	1	; select bank1
  6228  10B5  0859               	movf	(round@x+1)^(0+128),w
  6229  10B6  0020               	movlb	0	; select bank0
  6230  10B7  00C4               	movwf	___ftadd@f1+1
  6231  10B8  0021               	movlb	1	; select bank1
  6232  10B9  085A               	movf	(round@x+2)^(0+128),w
  6233  10BA  0020               	movlb	0	; select bank0
  6234  10BB  00C5               	movwf	___ftadd@f1+2
  6235  10BC  0021               	movlb	1	; select bank1
  6236  10BD  0858               	movf	round@x^(0+128),w
  6237  10BE  00BD               	movwf	trunc@x^(0+128)
  6238  10BF  0859               	movf	(round@x+1)^(0+128),w
  6239  10C0  00BE               	movwf	(trunc@x+1)^(0+128)
  6240  10C1  085A               	movf	(round@x+2)^(0+128),w
  6241  10C2  00BF               	movwf	(trunc@x+2)^(0+128)
  6242  10C3  319E  262D  3190   	fcall	_trunc
  6243  10C6  0021               	movlb	1	; select bank1
  6244  10C7  083D               	movf	?_trunc^(0+128),w
  6245  10C8  0020               	movlb	0	; select bank0
  6246  10C9  00B0               	movwf	___ftneg@f1
  6247  10CA  0021               	movlb	1	; select bank1
  6248  10CB  083E               	movf	(?_trunc+1)^(0+128),w
  6249  10CC  0020               	movlb	0	; select bank0
  6250  10CD  00B1               	movwf	___ftneg@f1+1
  6251  10CE  0021               	movlb	1	; select bank1
  6252  10CF  083F               	movf	(?_trunc+2)^(0+128),w
  6253  10D0  0020               	movlb	0	; select bank0
  6254  10D1  00B2               	movwf	___ftneg@f1+2
  6255  10D2  3199  2154  3190   	fcall	___ftneg
  6256  10D5  0020               	movlb	0	; select bank0
  6257  10D6  0830               	movf	?___ftneg,w
  6258  10D7  00C6               	movwf	___ftadd@f2
  6259  10D8  0831               	movf	?___ftneg+1,w
  6260  10D9  00C7               	movwf	___ftadd@f2+1
  6261  10DA  0832               	movf	?___ftneg+2,w
  6262  10DB  00C8               	movwf	___ftadd@f2+2
  6263  10DC  3188  201D  3190   	fcall	___ftadd
  6264  10DF  0020               	movlb	0	; select bank0
  6265  10E0  0843               	movf	?___ftadd,w
  6266  10E1  0021               	movlb	1	; select bank1
  6267  10E2  00DB               	movwf	round@f^(0+128)
  6268  10E3  0020               	movlb	0	; select bank0
  6269  10E4  0844               	movf	?___ftadd+1,w
  6270  10E5  0021               	movlb	1	; select bank1
  6271  10E6  00DC               	movwf	(round@f+1)^(0+128)
  6272  10E7  0020               	movlb	0	; select bank0
  6273  10E8  0845               	movf	?___ftadd+2,w
  6274  10E9  0021               	movlb	1	; select bank1
  6275  10EA  00DD               	movwf	(round@f+2)^(0+128)
  6276  10EB  085B               	movf	round@f^(0+128),w
  6277  10EC  0020               	movlb	0	; select bank0
  6278  10ED  00C3               	movwf	___ftadd@f1
  6279  10EE  0021               	movlb	1	; select bank1
  6280  10EF  085C               	movf	(round@f+1)^(0+128),w
  6281  10F0  0020               	movlb	0	; select bank0
  6282  10F1  00C4               	movwf	___ftadd@f1+1
  6283  10F2  0021               	movlb	1	; select bank1
  6284  10F3  085D               	movf	(round@f+2)^(0+128),w
  6285  10F4  0020               	movlb	0	; select bank0
  6286  10F5  00C5               	movwf	___ftadd@f1+2
  6287  10F6  0021               	movlb	1	; select bank1
  6288  10F7  0858               	movf	round@x^(0+128),w
  6289  10F8  0020               	movlb	0	; select bank0
  6290  10F9  00C6               	movwf	___ftadd@f2
  6291  10FA  0021               	movlb	1	; select bank1
  6292  10FB  0859               	movf	(round@x+1)^(0+128),w
  6293  10FC  0020               	movlb	0	; select bank0
  6294  10FD  00C7               	movwf	___ftadd@f2+1
  6295  10FE  0021               	movlb	1	; select bank1
  6296  10FF  085A               	movf	(round@x+2)^(0+128),w
  6297  1100  0020               	movlb	0	; select bank0
  6298  1101  00C8               	movwf	___ftadd@f2+2
  6299  1102  3188  201D  3190   	fcall	___ftadd
  6300  1105  0020               	movlb	0	; select bank0
  6301  1106  0843               	movf	?___ftadd,w
  6302  1107  0021               	movlb	1	; select bank1
  6303  1108  00D8               	movwf	round@x^(0+128)
  6304  1109  0020               	movlb	0	; select bank0
  6305  110A  0844               	movf	?___ftadd+1,w
  6306  110B  0021               	movlb	1	; select bank1
  6307  110C  00D9               	movwf	(round@x+1)^(0+128)
  6308  110D  0020               	movlb	0	; select bank0
  6309  110E  0845               	movf	?___ftadd+2,w
  6310  110F  0021               	movlb	1	; select bank1
  6311  1110  00DA               	movwf	(round@x+2)^(0+128)
  6312  1111  0858               	movf	round@x^(0+128),w
  6313  1112  00BD               	movwf	trunc@x^(0+128)
  6314  1113  0859               	movf	(round@x+1)^(0+128),w
  6315  1114  00BE               	movwf	(trunc@x+1)^(0+128)
  6316  1115  085A               	movf	(round@x+2)^(0+128),w
  6317  1116  00BF               	movwf	(trunc@x+2)^(0+128)
  6318  1117  319E  262D         	fcall	_trunc
  6319  1119  0021               	movlb	1	; select bank1
  6320  111A  083D               	movf	?_trunc^(0+128),w
  6321  111B  00D8               	movwf	?_round^(0+128)
  6322  111C  083E               	movf	(?_trunc+1)^(0+128),w
  6323  111D  00D9               	movwf	(?_round+1)^(0+128)
  6324  111E  083F               	movf	(?_trunc+2)^(0+128),w
  6325  111F  00DA               	movwf	(?_round+2)^(0+128)
  6326  1120  0008               	return
  6327  1121                     __end_of_round:	
  6328                           
  6329                           	psect	text13
  6330  1E2D                     __ptext13:	
  6331 ;; *************** function _trunc *****************
  6332 ;; Defined at:
  6333 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  x               3   29[BANK1 ] void 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  i               3   32[BANK1 ] void 
  6338 ;;  expon           2   35[BANK1 ] int 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  3   29[BANK1 ] int 
  6341 ;; Registers used:
  6342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6348 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6349 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6351 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6352 ;;Total ram usage:        9 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    4
  6355 ;; This function calls:
  6356 ;;		___altoft
  6357 ;;		___fttol
  6358 ;;		_frexp
  6359 ;; This function is called by:
  6360 ;;		_round
  6361 ;; This function uses a non-reentrant model
  6362 ;;
  6363                           
  6364                           
  6365                           ;psect for function _trunc
  6366  1E2D                     _trunc:	
  6367                           
  6368                           ;incstack = 0
  6369                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6370  1E2D  0021               	movlb	1	; select bank1
  6371  1E2E  083D               	movf	trunc@x^(0+128),w
  6372  1E2F  0020               	movlb	0	; select bank0
  6373  1E30  00A0               	movwf	frexp@value
  6374  1E31  0021               	movlb	1	; select bank1
  6375  1E32  083E               	movf	(trunc@x+1)^(0+128),w
  6376  1E33  0020               	movlb	0	; select bank0
  6377  1E34  00A1               	movwf	frexp@value+1
  6378  1E35  0021               	movlb	1	; select bank1
  6379  1E36  083F               	movf	(trunc@x+2)^(0+128),w
  6380  1E37  0020               	movlb	0	; select bank0
  6381  1E38  00A2               	movwf	frexp@value+2
  6382  1E39  30C3               	movlw	(low (trunc@expon| 0))& (0+255)
  6383  1E3A  00ED               	movwf	??_trunc
  6384  1E3B  086D               	movf	??_trunc,w
  6385  1E3C  00A3               	movwf	frexp@eptr
  6386  1E3D  319A  22DD  319E   	fcall	_frexp
  6387  1E40  0021               	movlb	1	; select bank1
  6388  1E41  1FC4               	btfss	(trunc@expon+1)^(0+128),7
  6389  1E42  2E4A               	goto	l2819
  6390  1E43  3000               	movlw	0
  6391  1E44  00BD               	movwf	?_trunc^(0+128)
  6392  1E45  3000               	movlw	0
  6393  1E46  00BE               	movwf	(?_trunc+1)^(0+128)
  6394  1E47  3000               	movlw	0
  6395  1E48  00BF               	movwf	(?_trunc+2)^(0+128)
  6396  1E49  0008               	return
  6397  1E4A                     l2819:	
  6398  1E4A  3000               	movlw	0
  6399  1E4B  0244               	subwf	(trunc@expon+1)^(0+128),w
  6400  1E4C  3015               	movlw	21
  6401  1E4D  1903               	skipnz
  6402  1E4E  0243               	subwf	trunc@expon^(0+128),w
  6403  1E4F  1803               	btfsc	3,0
  6404  1E50  0008               	return
  6405  1E51  083D               	movf	trunc@x^(0+128),w
  6406  1E52  00AF               	movwf	___fttol@f1^(0+128)
  6407  1E53  083E               	movf	(trunc@x+1)^(0+128),w
  6408  1E54  00B0               	movwf	(___fttol@f1+1)^(0+128)
  6409  1E55  083F               	movf	(trunc@x+2)^(0+128),w
  6410  1E56  00B1               	movwf	(___fttol@f1+2)^(0+128)
  6411  1E57  3191  21A3  319E   	fcall	___fttol
  6412  1E5A  0021               	movlb	1	; select bank1
  6413  1E5B  0832               	movf	(?___fttol+3)^(0+128),w
  6414  1E5C  0020               	movlb	0	; select bank0
  6415  1E5D  00AB               	movwf	___altoft@c+3
  6416  1E5E  0021               	movlb	1	; select bank1
  6417  1E5F  0831               	movf	(?___fttol+2)^(0+128),w
  6418  1E60  0020               	movlb	0	; select bank0
  6419  1E61  00AA               	movwf	___altoft@c+2
  6420  1E62  0021               	movlb	1	; select bank1
  6421  1E63  0830               	movf	(?___fttol+1)^(0+128),w
  6422  1E64  0020               	movlb	0	; select bank0
  6423  1E65  00A9               	movwf	___altoft@c+1
  6424  1E66  0021               	movlb	1	; select bank1
  6425  1E67  082F               	movf	?___fttol^(0+128),w
  6426  1E68  0020               	movlb	0	; select bank0
  6427  1E69  00A8               	movwf	___altoft@c
  6428  1E6A  319C  2439         	fcall	___altoft
  6429  1E6C  0020               	movlb	0	; select bank0
  6430  1E6D  0828               	movf	?___altoft,w
  6431  1E6E  0021               	movlb	1	; select bank1
  6432  1E6F  00C0               	movwf	trunc@i^(0+128)
  6433  1E70  0020               	movlb	0	; select bank0
  6434  1E71  0829               	movf	?___altoft+1,w
  6435  1E72  0021               	movlb	1	; select bank1
  6436  1E73  00C1               	movwf	(trunc@i+1)^(0+128)
  6437  1E74  0020               	movlb	0	; select bank0
  6438  1E75  082A               	movf	?___altoft+2,w
  6439  1E76  0021               	movlb	1	; select bank1
  6440  1E77  00C2               	movwf	(trunc@i+2)^(0+128)
  6441  1E78  0840               	movf	trunc@i^(0+128),w
  6442  1E79  00BD               	movwf	?_trunc^(0+128)
  6443  1E7A  0841               	movf	(trunc@i+1)^(0+128),w
  6444  1E7B  00BE               	movwf	(?_trunc+1)^(0+128)
  6445  1E7C  0842               	movf	(trunc@i+2)^(0+128),w
  6446  1E7D  00BF               	movwf	(?_trunc+2)^(0+128)
  6447  1E7E  0008               	return
  6448  1E7F                     __end_of_trunc:	
  6449                           
  6450                           	psect	text14
  6451  1ADD                     __ptext14:	
  6452 ;; *************** function _frexp *****************
  6453 ;; Defined at:
  6454 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  value           3    0[BANK0 ] int 
  6457 ;;  eptr            1    3[BANK0 ] PTR int 
  6458 ;;		 -> floor@expon(2), trunc@expon(2), 
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;		None
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  3    0[BANK0 ] PTR int 
  6463 ;; Registers used:
  6464 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6470 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6472 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6473 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6474 ;;Total ram usage:        6 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    2
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_trunc
  6481 ;;		_floor
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           
  6486                           ;psect for function _frexp
  6487  1ADD                     _frexp:	
  6488                           
  6489                           ;incstack = 0
  6490                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  6491  1ADD  0020               	movlb	0	; select bank0
  6492  1ADE  0822               	movf	frexp@value+2,w
  6493  1ADF  0421               	iorwf	frexp@value+1,w
  6494  1AE0  0420               	iorwf	frexp@value,w
  6495  1AE1  1D03               	skipz
  6496  1AE2  2AEA               	goto	l2577
  6497  1AE3  0823               	movf	frexp@eptr,w
  6498  1AE4  0086               	movwf	6
  6499  1AE5  0187               	clrf	7
  6500  1AE6  3000               	movlw	0
  6501  1AE7  3FC0               	movwi [0]fsr1
  6502  1AE8  3FC1               	movwi [1]fsr1
  6503                           
  6504                           ;	Return value of _frexp is never used
  6505  1AE9  0008               	return
  6506  1AEA                     l2577:	
  6507  1AEA  0822               	movf	frexp@value+2,w
  6508  1AEB  397F               	andlw	127
  6509  1AEC  00A4               	movwf	??_frexp
  6510  1AED  01A5               	clrf	??_frexp+1
  6511  1AEE  35A4               	lslf	??_frexp,f
  6512  1AEF  0DA5               	rlf	??_frexp+1,f
  6513  1AF0  0823               	movf	frexp@eptr,w
  6514  1AF1  0086               	movwf	6
  6515  1AF2  0187               	clrf	7
  6516  1AF3  0824               	movf	??_frexp,w
  6517  1AF4  3FC0               	movwi [0]fsr1
  6518  1AF5  0825               	movf	??_frexp+1,w
  6519  1AF6  3FC1               	movwi [1]fsr1
  6520  1AF7  0D21               	rlf	frexp@value+1,w
  6521  1AF8  0D21               	rlf	frexp@value+1,w
  6522  1AF9  3901               	andlw	1
  6523  1AFA  00A4               	movwf	??_frexp
  6524  1AFB  01A5               	clrf	??_frexp+1
  6525  1AFC  0823               	movf	frexp@eptr,w
  6526  1AFD  0086               	movwf	6
  6527  1AFE  0187               	clrf	7
  6528  1AFF  0824               	movf	??_frexp,w
  6529  1B00  0481               	iorwf	1,f
  6530  1B01  3141               	addfsr 1,1
  6531  1B02  0825               	movf	??_frexp+1,w
  6532  1B03  0481               	iorwf	1,f
  6533  1B04  0823               	movf	frexp@eptr,w
  6534  1B05  0086               	movwf	6
  6535  1B06  0187               	clrf	7
  6536  1B07  3082               	movlw	130
  6537  1B08  0781               	addwf	1,f
  6538  1B09  3141               	addfsr 1,1
  6539  1B0A  30FF               	movlw	255
  6540  1B0B  3D81               	addwfc	1,f
  6541  1B0C  317F               	addfsr 1,-1
  6542  1B0D  0822               	movf	frexp@value+2,w
  6543  1B0E  3980               	andlw	-128
  6544  1B0F  383F               	iorlw	63
  6545  1B10  00A2               	movwf	frexp@value+2
  6546  1B11  13A1               	bcf	frexp@value+1,7
  6547  1B12  0008               	return
  6548  1B13                     __end_of_frexp:	
  6549                           ;	Return value of _frexp is never used
  6550                           
  6551                           
  6552                           	psect	text15
  6553  11A3                     __ptext15:	
  6554 ;; *************** function ___fttol *****************
  6555 ;; Defined at:
  6556 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  6557 ;; Parameters:    Size  Location     Type
  6558 ;;  f1              3   15[BANK1 ] float 
  6559 ;; Auto vars:     Size  Location     Type
  6560 ;;  lval            4   24[BANK1 ] unsigned long 
  6561 ;;  exp1            1   28[BANK1 ] unsigned char 
  6562 ;;  sign1           1   23[BANK1 ] unsigned char 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  4   15[BANK1 ] long 
  6565 ;; Registers used:
  6566 ;;		wreg, status,2, status,0
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6572 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6573 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6574 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6575 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6576 ;;Total ram usage:       14 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    2
  6579 ;; This function calls:
  6580 ;;		Nothing
  6581 ;; This function is called by:
  6582 ;;		_main
  6583 ;;		_set_subdivision
  6584 ;;		_trunc
  6585 ;;		_floor
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           
  6590                           ;psect for function ___fttol
  6591  11A3                     ___fttol:	
  6592                           
  6593                           ;incstack = 0
  6594                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6595  11A3  0021               	movlb	1	; select bank1
  6596  11A4  082F               	movf	___fttol@f1^(0+128),w
  6597  11A5  00B3               	movwf	??___fttol^(0+128)
  6598  11A6  0830               	movf	(___fttol@f1+1)^(0+128),w
  6599  11A7  00B4               	movwf	(??___fttol^(0+128)+1)
  6600  11A8  0831               	movf	(___fttol@f1+2)^(0+128),w
  6601  11A9  00B5               	movwf	(??___fttol^(0+128)+2)
  6602  11AA  1003               	clrc
  6603  11AB  0D34               	rlf	(??___fttol^(0+128)+1),w
  6604  11AC  0D35               	rlf	(??___fttol^(0+128)+2),w
  6605  11AD  00B6               	movwf	(??___fttol+3)^(0+128)
  6606  11AE  0836               	movf	(??___fttol+3)^(0+128),w
  6607  11AF  00BC               	movwf	___fttol@exp1^(0+128)
  6608  11B0  083C               	movf	___fttol@exp1^(0+128),w
  6609  11B1  1D03               	btfss	3,2
  6610  11B2  29BC               	goto	l2535
  6611  11B3  3000               	movlw	0
  6612  11B4  00B2               	movwf	(?___fttol+3)^(0+128)
  6613  11B5  3000               	movlw	0
  6614  11B6  00B1               	movwf	(?___fttol+2)^(0+128)
  6615  11B7  3000               	movlw	0
  6616  11B8  00B0               	movwf	(?___fttol+1)^(0+128)
  6617  11B9  3000               	movlw	0
  6618  11BA  00AF               	movwf	?___fttol^(0+128)
  6619  11BB  0008               	return
  6620  11BC                     l2535:	
  6621  11BC  082F               	movf	___fttol@f1^(0+128),w
  6622  11BD  00B3               	movwf	??___fttol^(0+128)
  6623  11BE  0830               	movf	(___fttol@f1+1)^(0+128),w
  6624  11BF  00B4               	movwf	(??___fttol^(0+128)+1)
  6625  11C0  0831               	movf	(___fttol@f1+2)^(0+128),w
  6626  11C1  00B5               	movwf	(??___fttol^(0+128)+2)
  6627  11C2  3017               	movlw	23
  6628  11C3                     u2545:	
  6629  11C3  36B5               	lsrf	(??___fttol^(0+128)+2),f
  6630  11C4  0CB4               	rrf	(??___fttol^(0+128)+1),f
  6631  11C5  0CB3               	rrf	??___fttol^(0+128),f
  6632  11C6  0B89               	decfsz	9,f
  6633  11C7  29C3               	goto	u2545
  6634  11C8  0833               	movf	??___fttol^(0+128),w
  6635  11C9  00B6               	movwf	(??___fttol+3)^(0+128)
  6636  11CA  0836               	movf	(??___fttol+3)^(0+128),w
  6637  11CB  00B7               	movwf	___fttol@sign1^(0+128)
  6638  11CC  17B0               	bsf	(___fttol@f1^(0+128)+1),7
  6639  11CD  30FF               	movlw	255
  6640  11CE  05AF               	andwf	___fttol@f1^(0+128),f
  6641  11CF  30FF               	movlw	255
  6642  11D0  05B0               	andwf	(___fttol@f1+1)^(0+128),f
  6643  11D1  3000               	movlw	0
  6644  11D2  05B1               	andwf	(___fttol@f1+2)^(0+128),f
  6645  11D3  082F               	movf	___fttol@f1^(0+128),w
  6646  11D4  00B8               	movwf	___fttol@lval^(0+128)
  6647  11D5  0830               	movf	(___fttol@f1+1)^(0+128),w
  6648  11D6  00B9               	movwf	(___fttol@lval^(0+128)+1)
  6649  11D7  0831               	movf	(___fttol@f1+2)^(0+128),w
  6650  11D8  00BA               	movwf	(___fttol@lval^(0+128)+2)
  6651  11D9  01BB               	clrf	(___fttol@lval^(0+128)+3)
  6652  11DA  308E               	movlw	142
  6653  11DB  02BC               	subwf	___fttol@exp1^(0+128),f
  6654  11DC  1FBC               	btfss	___fttol@exp1^(0+128),7
  6655  11DD  29FA               	goto	l2555
  6656  11DE  083C               	movf	___fttol@exp1^(0+128),w
  6657  11DF  3A80               	xorlw	128
  6658  11E0  3E8F               	addlw	143
  6659  11E1  1803               	skipnc
  6660  11E2  29EC               	goto	l2553
  6661  11E3  3000               	movlw	0
  6662  11E4  00B2               	movwf	(?___fttol+3)^(0+128)
  6663  11E5  3000               	movlw	0
  6664  11E6  00B1               	movwf	(?___fttol+2)^(0+128)
  6665  11E7  3000               	movlw	0
  6666  11E8  00B0               	movwf	(?___fttol+1)^(0+128)
  6667  11E9  3000               	movlw	0
  6668  11EA  00AF               	movwf	?___fttol^(0+128)
  6669  11EB  0008               	return
  6670  11EC                     l2553:	
  6671  11EC  3001               	movlw	1
  6672  11ED                     u2575:	
  6673  11ED  36BB               	lsrf	(___fttol@lval+3)^(0+128),f
  6674  11EE  0CBA               	rrf	(___fttol@lval+2)^(0+128),f
  6675  11EF  0CB9               	rrf	(___fttol@lval+1)^(0+128),f
  6676  11F0  0CB8               	rrf	___fttol@lval^(0+128),f
  6677  11F1  0B89               	decfsz	9,f
  6678  11F2  29ED               	goto	u2575
  6679  11F3  3001               	movlw	1
  6680  11F4  00B3               	movwf	??___fttol^(0+128)
  6681  11F5  0833               	movf	??___fttol^(0+128),w
  6682  11F6  07BC               	addwf	___fttol@exp1^(0+128),f
  6683  11F7  1903               	btfsc	3,2
  6684  11F8  2A13               	goto	l2563
  6685  11F9  29EC               	goto	l2553
  6686  11FA                     l2555:	
  6687  11FA  3018               	movlw	24
  6688  11FB  023C               	subwf	___fttol@exp1^(0+128),w
  6689  11FC  1C03               	skipc
  6690  11FD  2A10               	goto	l743
  6691  11FE  3000               	movlw	0
  6692  11FF  00B2               	movwf	(?___fttol+3)^(0+128)
  6693  1200  3000               	movlw	0
  6694  1201  00B1               	movwf	(?___fttol+2)^(0+128)
  6695  1202  3000               	movlw	0
  6696  1203  00B0               	movwf	(?___fttol+1)^(0+128)
  6697  1204  3000               	movlw	0
  6698  1205  00AF               	movwf	?___fttol^(0+128)
  6699  1206  0008               	return
  6700  1207                     l2561:	
  6701  1207  3001               	movlw	1
  6702  1208                     u2605:	
  6703  1208  35B8               	lslf	___fttol@lval^(0+128),f
  6704  1209  0DB9               	rlf	(___fttol@lval+1)^(0+128),f
  6705  120A  0DBA               	rlf	(___fttol@lval+2)^(0+128),f
  6706  120B  0DBB               	rlf	(___fttol@lval+3)^(0+128),f
  6707  120C  0B89               	decfsz	9,f
  6708  120D  2A08               	goto	u2605
  6709  120E  3001               	movlw	1
  6710  120F  02BC               	subwf	___fttol@exp1^(0+128),f
  6711  1210                     l743:	
  6712  1210  083C               	movf	___fttol@exp1^(0+128),w
  6713  1211  1D03               	btfss	3,2
  6714  1212  2A07               	goto	l2561
  6715  1213                     l2563:	
  6716  1213  0837               	movf	___fttol@sign1^(0+128),w
  6717  1214  1903               	btfsc	3,2
  6718  1215  2A21               	goto	l2567
  6719  1216  09B8               	comf	___fttol@lval^(0+128),f
  6720  1217  09B9               	comf	(___fttol@lval+1)^(0+128),f
  6721  1218  09BA               	comf	(___fttol@lval+2)^(0+128),f
  6722  1219  09BB               	comf	(___fttol@lval+3)^(0+128),f
  6723  121A  0AB8               	incf	___fttol@lval^(0+128),f
  6724  121B  1903               	skipnz
  6725  121C  0AB9               	incf	(___fttol@lval+1)^(0+128),f
  6726  121D  1903               	skipnz
  6727  121E  0ABA               	incf	(___fttol@lval+2)^(0+128),f
  6728  121F  1903               	skipnz
  6729  1220  0ABB               	incf	(___fttol@lval+3)^(0+128),f
  6730  1221                     l2567:	
  6731  1221  083B               	movf	(___fttol@lval+3)^(0+128),w
  6732  1222  00B2               	movwf	(?___fttol+3)^(0+128)
  6733  1223  083A               	movf	(___fttol@lval+2)^(0+128),w
  6734  1224  00B1               	movwf	(?___fttol+2)^(0+128)
  6735  1225  0839               	movf	(___fttol@lval+1)^(0+128),w
  6736  1226  00B0               	movwf	(?___fttol+1)^(0+128)
  6737  1227  0838               	movf	___fttol@lval^(0+128),w
  6738  1228  00AF               	movwf	?___fttol^(0+128)
  6739  1229  0008               	return
  6740  122A                     __end_of___fttol:	
  6741                           
  6742                           	psect	text16
  6743  1C39                     __ptext16:	
  6744 ;; *************** function ___altoft *****************
  6745 ;; Defined at:
  6746 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  c               4    8[BANK0 ] long 
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;  sign            1   15[BANK0 ] unsigned char 
  6751 ;;  exp             1   14[BANK0 ] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  3    8[BANK0 ] float 
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0, pclath, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6761 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6763 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6764 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6765 ;;Total ram usage:        8 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    3
  6768 ;; This function calls:
  6769 ;;		___ftpack
  6770 ;; This function is called by:
  6771 ;;		_main
  6772 ;;		_trunc
  6773 ;;		_floor
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function ___altoft
  6779  1C39                     ___altoft:	
  6780                           
  6781                           ;incstack = 0
  6782                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  6783  1C39  0020               	movlb	0	; select bank0
  6784  1C3A  01AF               	clrf	___altoft@sign
  6785  1C3B  308E               	movlw	142
  6786  1C3C  00AC               	movwf	??___altoft
  6787  1C3D  082C               	movf	??___altoft,w
  6788  1C3E  00AE               	movwf	___altoft@exp
  6789  1C3F  1FAB               	btfss	___altoft@c+3,7
  6790  1C40  2C4E               	goto	l2383
  6791  1C41  09A8               	comf	___altoft@c,f
  6792  1C42  09A9               	comf	___altoft@c+1,f
  6793  1C43  09AA               	comf	___altoft@c+2,f
  6794  1C44  09AB               	comf	___altoft@c+3,f
  6795  1C45  0AA8               	incf	___altoft@c,f
  6796  1C46  1903               	skipnz
  6797  1C47  0AA9               	incf	___altoft@c+1,f
  6798  1C48  1903               	skipnz
  6799  1C49  0AAA               	incf	___altoft@c+2,f
  6800  1C4A  1903               	skipnz
  6801  1C4B  0AAB               	incf	___altoft@c+3,f
  6802  1C4C  01AF               	clrf	___altoft@sign
  6803  1C4D  0AAF               	incf	___altoft@sign,f
  6804  1C4E                     l2383:	
  6805  1C4E  30FF               	movlw	255
  6806  1C4F  052B               	andwf	___altoft@c+3,w
  6807  1C50  1903               	btfsc	3,2
  6808  1C51  2C5E               	goto	l2385
  6809  1C52  3001               	movlw	1
  6810  1C53                     u2135:	
  6811  1C53  36AB               	lsrf	___altoft@c+3,f
  6812  1C54  0CAA               	rrf	___altoft@c+2,f
  6813  1C55  0CA9               	rrf	___altoft@c+1,f
  6814  1C56  0CA8               	rrf	___altoft@c,f
  6815  1C57  0B89               	decfsz	9,f
  6816  1C58  2C53               	goto	u2135
  6817  1C59  3001               	movlw	1
  6818  1C5A  00AC               	movwf	??___altoft
  6819  1C5B  082C               	movf	??___altoft,w
  6820  1C5C  07AE               	addwf	___altoft@exp,f
  6821  1C5D  2C4E               	goto	l2383
  6822  1C5E                     l2385:	
  6823  1C5E  0828               	movf	___altoft@c,w
  6824  1C5F  00A0               	movwf	___ftpack@arg
  6825  1C60  0829               	movf	___altoft@c+1,w
  6826  1C61  00A1               	movwf	___ftpack@arg+1
  6827  1C62  082A               	movf	___altoft@c+2,w
  6828  1C63  00A2               	movwf	___ftpack@arg+2
  6829  1C64  082E               	movf	___altoft@exp,w
  6830  1C65  00AC               	movwf	??___altoft
  6831  1C66  082C               	movf	??___altoft,w
  6832  1C67  00A3               	movwf	___ftpack@exp
  6833  1C68  082F               	movf	___altoft@sign,w
  6834  1C69  00AD               	movwf	??___altoft+1
  6835  1C6A  082D               	movf	??___altoft+1,w
  6836  1C6B  00A4               	movwf	___ftpack@sign
  6837  1C6C  319F  279B         	fcall	___ftpack
  6838  1C6E  0020               	movlb	0	; select bank0
  6839  1C6F  0820               	movf	?___ftpack,w
  6840  1C70  00A8               	movwf	?___altoft
  6841  1C71  0821               	movf	?___ftpack+1,w
  6842  1C72  00A9               	movwf	?___altoft+1
  6843  1C73  0822               	movf	?___ftpack+2,w
  6844  1C74  00AA               	movwf	?___altoft+2
  6845  1C75  0008               	return
  6846  1C76                     __end_of___altoft:	
  6847                           
  6848                           	psect	text17
  6849  1C76                     __ptext17:	
  6850 ;; *************** function _modulation *****************
  6851 ;; Defined at:
  6852 ;;		line 255 in file "user.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;  x               2   21[BANK0 ] int 
  6855 ;;  y               2   23[BANK0 ] int 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  2   21[BANK0 ] int 
  6860 ;; Registers used:
  6861 ;;		wreg, status,2, status,0, pclath, cstack
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6867 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6869 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6870 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6871 ;;Total ram usage:       12 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    3
  6874 ;; This function calls:
  6875 ;;		___aldiv
  6876 ;;		___wmul
  6877 ;; This function is called by:
  6878 ;;		_main
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _modulation
  6884  1C76                     _modulation:	
  6885                           
  6886                           ;user.c: 257: x = (127500 + (y * x)) / 1000;
  6887                           
  6888                           ;incstack = 0
  6889                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
  6890  1C76  3000               	movlw	0
  6891  1C77  0020               	movlb	0	; select bank0
  6892  1C78  00A9               	movwf	___aldiv@divisor+3
  6893  1C79  3000               	movlw	0
  6894  1C7A  00A8               	movwf	___aldiv@divisor+2
  6895  1C7B  3003               	movlw	3
  6896  1C7C  00A7               	movwf	___aldiv@divisor+1
  6897  1C7D  30E8               	movlw	232
  6898  1C7E  00A6               	movwf	___aldiv@divisor
  6899  1C7F  300C               	movlw	12
  6900  1C80  00B9               	movwf	??_modulation
  6901  1C81  30F2               	movlw	242
  6902  1C82  00BA               	movwf	??_modulation+1
  6903  1C83  3001               	movlw	1
  6904  1C84  00BB               	movwf	??_modulation+2
  6905  1C85  3000               	movlw	0
  6906  1C86  00BC               	movwf	??_modulation+3
  6907  1C87  0838               	movf	modulation@y+1,w
  6908  1C88  00A1               	movwf	___wmul@multiplier+1
  6909  1C89  0837               	movf	modulation@y,w
  6910  1C8A  00A0               	movwf	___wmul@multiplier
  6911  1C8B  0836               	movf	modulation@x+1,w
  6912  1C8C  00A3               	movwf	___wmul@multiplicand+1
  6913  1C8D  0835               	movf	modulation@x,w
  6914  1C8E  00A2               	movwf	___wmul@multiplicand
  6915  1C8F  3188  2001  319C   	fcall	___wmul
  6916  1C92  0020               	movlb	0	; select bank0
  6917  1C93  0820               	movf	?___wmul,w
  6918  1C94  00BD               	movwf	??_modulation+4
  6919  1C95  0821               	movf	?___wmul+1,w
  6920  1C96  00BE               	movwf	??_modulation+5
  6921  1C97  3000               	movlw	0
  6922  1C98  1BBE               	btfsc	??_modulation+5,7
  6923  1C99  30FF               	movlw	255
  6924  1C9A  00BF               	movwf	??_modulation+6
  6925  1C9B  00C0               	movwf	??_modulation+7
  6926  1C9C  083D               	movf	??_modulation+4,w
  6927  1C9D  07B9               	addwf	??_modulation,f
  6928  1C9E  083E               	movf	??_modulation+5,w
  6929  1C9F  3DBA               	addwfc	??_modulation+1,f
  6930  1CA0  083F               	movf	??_modulation+6,w
  6931  1CA1  3DBB               	addwfc	??_modulation+2,f
  6932  1CA2  0840               	movf	??_modulation+7,w
  6933  1CA3  3DBC               	addwfc	??_modulation+3,f
  6934  1CA4  083C               	movf	??_modulation+3,w
  6935  1CA5  00AD               	movwf	___aldiv@dividend+3
  6936  1CA6  083B               	movf	??_modulation+2,w
  6937  1CA7  00AC               	movwf	___aldiv@dividend+2
  6938  1CA8  083A               	movf	??_modulation+1,w
  6939  1CA9  00AB               	movwf	___aldiv@dividend+1
  6940  1CAA  0839               	movf	??_modulation,w
  6941  1CAB  00AA               	movwf	___aldiv@dividend
  6942  1CAC  3191  2121         	fcall	___aldiv
  6943  1CAE  0020               	movlb	0	; select bank0
  6944  1CAF  0827               	movf	?___aldiv+1,w
  6945  1CB0  00B6               	movwf	modulation@x+1
  6946  1CB1  0826               	movf	?___aldiv,w
  6947  1CB2  00B5               	movwf	modulation@x
  6948                           
  6949                           ;user.c: 258: return x;
  6950  1CB3  0008               	return
  6951  1CB4                     __end_of_modulation:	
  6952                           
  6953                           	psect	text18
  6954  0801                     __ptext18:	
  6955 ;; *************** function ___wmul *****************
  6956 ;; Defined at:
  6957 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6960 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  product         2    4[BANK0 ] unsigned int 
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  2    0[BANK0 ] unsigned int 
  6965 ;; Registers used:
  6966 ;;		wreg, status,2, status,0
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6972 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6973 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6975 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6976 ;;Total ram usage:        6 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; Hardware stack levels required when called:    2
  6979 ;; This function calls:
  6980 ;;		Nothing
  6981 ;; This function is called by:
  6982 ;;		_modulation
  6983 ;;		_eval_poly
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           
  6988                           ;psect for function ___wmul
  6989  0801                     ___wmul:	
  6990                           
  6991                           ;incstack = 0
  6992                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6993  0801  0020               	movlb	0	; select bank0
  6994  0802  01A4               	clrf	___wmul@product
  6995  0803  01A5               	clrf	___wmul@product+1
  6996  0804                     l2361:	
  6997  0804  1C20               	btfss	___wmul@multiplier,0
  6998  0805  280A               	goto	l491
  6999  0806  0822               	movf	___wmul@multiplicand,w
  7000  0807  07A4               	addwf	___wmul@product,f
  7001  0808  0823               	movf	___wmul@multiplicand+1,w
  7002  0809  3DA5               	addwfc	___wmul@product+1,f
  7003  080A                     l491:	
  7004  080A  3001               	movlw	1
  7005  080B                     u2095:	
  7006  080B  35A2               	lslf	___wmul@multiplicand,f
  7007  080C  0DA3               	rlf	___wmul@multiplicand+1,f
  7008  080D  0B89               	decfsz	9,f
  7009  080E  280B               	goto	u2095
  7010  080F  3001               	movlw	1
  7011  0810                     u2105:	
  7012  0810  36A1               	lsrf	___wmul@multiplier+1,f
  7013  0811  0CA0               	rrf	___wmul@multiplier,f
  7014  0812  0B89               	decfsz	9,f
  7015  0813  2810               	goto	u2105
  7016  0814  0820               	movf	___wmul@multiplier,w
  7017  0815  0421               	iorwf	___wmul@multiplier+1,w
  7018  0816  1D03               	btfss	3,2
  7019  0817  2804               	goto	l2361
  7020  0818  0825               	movf	___wmul@product+1,w
  7021  0819  00A1               	movwf	?___wmul+1
  7022  081A  0824               	movf	___wmul@product,w
  7023  081B  00A0               	movwf	?___wmul
  7024  081C  0008               	return
  7025  081D                     __end_of___wmul:	
  7026                           
  7027                           	psect	text19
  7028  1121                     __ptext19:	
  7029 ;; *************** function ___aldiv *****************
  7030 ;; Defined at:
  7031 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;  divisor         4    6[BANK0 ] long 
  7034 ;;  dividend        4   10[BANK0 ] long 
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  quotient        4   17[BANK0 ] long 
  7037 ;;  sign            1   16[BANK0 ] unsigned char 
  7038 ;;  counter         1   15[BANK0 ] unsigned char 
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  4    6[BANK0 ] long 
  7041 ;; Registers used:
  7042 ;;		wreg, status,2, status,0
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7048 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7049 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7051 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7052 ;;Total ram usage:       15 bytes
  7053 ;; Hardware stack levels used:    1
  7054 ;; Hardware stack levels required when called:    2
  7055 ;; This function calls:
  7056 ;;		Nothing
  7057 ;; This function is called by:
  7058 ;;		_main
  7059 ;;		_modulation
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           
  7064                           ;psect for function ___aldiv
  7065  1121                     ___aldiv:	
  7066                           
  7067                           ;incstack = 0
  7068                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7069  1121  0020               	movlb	0	; select bank0
  7070  1122  01B0               	clrf	___aldiv@sign
  7071  1123  1FA9               	btfss	___aldiv@divisor+3,7
  7072  1124  2932               	goto	l546
  7073  1125  09A6               	comf	___aldiv@divisor,f
  7074  1126  09A7               	comf	___aldiv@divisor+1,f
  7075  1127  09A8               	comf	___aldiv@divisor+2,f
  7076  1128  09A9               	comf	___aldiv@divisor+3,f
  7077  1129  0AA6               	incf	___aldiv@divisor,f
  7078  112A  1903               	skipnz
  7079  112B  0AA7               	incf	___aldiv@divisor+1,f
  7080  112C  1903               	skipnz
  7081  112D  0AA8               	incf	___aldiv@divisor+2,f
  7082  112E  1903               	skipnz
  7083  112F  0AA9               	incf	___aldiv@divisor+3,f
  7084  1130  01B0               	clrf	___aldiv@sign
  7085  1131  0AB0               	incf	___aldiv@sign,f
  7086  1132                     l546:	
  7087  1132  1FAD               	btfss	___aldiv@dividend+3,7
  7088  1133  2943               	goto	l2711
  7089  1134  09AA               	comf	___aldiv@dividend,f
  7090  1135  09AB               	comf	___aldiv@dividend+1,f
  7091  1136  09AC               	comf	___aldiv@dividend+2,f
  7092  1137  09AD               	comf	___aldiv@dividend+3,f
  7093  1138  0AAA               	incf	___aldiv@dividend,f
  7094  1139  1903               	skipnz
  7095  113A  0AAB               	incf	___aldiv@dividend+1,f
  7096  113B  1903               	skipnz
  7097  113C  0AAC               	incf	___aldiv@dividend+2,f
  7098  113D  1903               	skipnz
  7099  113E  0AAD               	incf	___aldiv@dividend+3,f
  7100  113F  3001               	movlw	1
  7101  1140  00AE               	movwf	??___aldiv
  7102  1141  082E               	movf	??___aldiv,w
  7103  1142  06B0               	xorwf	___aldiv@sign,f
  7104  1143                     l2711:	
  7105  1143  3000               	movlw	0
  7106  1144  00B4               	movwf	___aldiv@quotient+3
  7107  1145  3000               	movlw	0
  7108  1146  00B3               	movwf	___aldiv@quotient+2
  7109  1147  3000               	movlw	0
  7110  1148  00B2               	movwf	___aldiv@quotient+1
  7111  1149  3000               	movlw	0
  7112  114A  00B1               	movwf	___aldiv@quotient
  7113  114B  0829               	movf	___aldiv@divisor+3,w
  7114  114C  0428               	iorwf	___aldiv@divisor+2,w
  7115  114D  0427               	iorwf	___aldiv@divisor+1,w
  7116  114E  0426               	iorwf	___aldiv@divisor,w
  7117  114F  1903               	skipnz
  7118  1150  298C               	goto	l2733
  7119  1151  01AF               	clrf	___aldiv@counter
  7120  1152  0AAF               	incf	___aldiv@counter,f
  7121  1153                     l2719:	
  7122  1153  1BA9               	btfsc	___aldiv@divisor+3,7
  7123  1154  2961               	goto	l2721
  7124  1155  3001               	movlw	1
  7125  1156                     u2755:	
  7126  1156  35A6               	lslf	___aldiv@divisor,f
  7127  1157  0DA7               	rlf	___aldiv@divisor+1,f
  7128  1158  0DA8               	rlf	___aldiv@divisor+2,f
  7129  1159  0DA9               	rlf	___aldiv@divisor+3,f
  7130  115A  0B89               	decfsz	9,f
  7131  115B  2956               	goto	u2755
  7132  115C  3001               	movlw	1
  7133  115D  00AE               	movwf	??___aldiv
  7134  115E  082E               	movf	??___aldiv,w
  7135  115F  07AF               	addwf	___aldiv@counter,f
  7136  1160  2953               	goto	l2719
  7137  1161                     l2721:	
  7138  1161  3001               	movlw	1
  7139  1162                     u2775:	
  7140  1162  35B1               	lslf	___aldiv@quotient,f
  7141  1163  0DB2               	rlf	___aldiv@quotient+1,f
  7142  1164  0DB3               	rlf	___aldiv@quotient+2,f
  7143  1165  0DB4               	rlf	___aldiv@quotient+3,f
  7144  1166  0B89               	decfsz	9,f
  7145  1167  2962               	goto	u2775
  7146  1168  0829               	movf	___aldiv@divisor+3,w
  7147  1169  022D               	subwf	___aldiv@dividend+3,w
  7148  116A  1D03               	skipz
  7149  116B  2976               	goto	u2785
  7150  116C  0828               	movf	___aldiv@divisor+2,w
  7151  116D  022C               	subwf	___aldiv@dividend+2,w
  7152  116E  1D03               	skipz
  7153  116F  2976               	goto	u2785
  7154  1170  0827               	movf	___aldiv@divisor+1,w
  7155  1171  022B               	subwf	___aldiv@dividend+1,w
  7156  1172  1D03               	skipz
  7157  1173  2976               	goto	u2785
  7158  1174  0826               	movf	___aldiv@divisor,w
  7159  1175  022A               	subwf	___aldiv@dividend,w
  7160  1176                     u2785:	
  7161  1176  1C03               	skipc
  7162  1177  2981               	goto	l2729
  7163  1178  0826               	movf	___aldiv@divisor,w
  7164  1179  02AA               	subwf	___aldiv@dividend,f
  7165  117A  0827               	movf	___aldiv@divisor+1,w
  7166  117B  3BAB               	subwfb	___aldiv@dividend+1,f
  7167  117C  0828               	movf	___aldiv@divisor+2,w
  7168  117D  3BAC               	subwfb	___aldiv@dividend+2,f
  7169  117E  0829               	movf	___aldiv@divisor+3,w
  7170  117F  3BAD               	subwfb	___aldiv@dividend+3,f
  7171  1180  1431               	bsf	___aldiv@quotient,0
  7172  1181                     l2729:	
  7173  1181  3001               	movlw	1
  7174  1182                     u2795:	
  7175  1182  36A9               	lsrf	___aldiv@divisor+3,f
  7176  1183  0CA8               	rrf	___aldiv@divisor+2,f
  7177  1184  0CA7               	rrf	___aldiv@divisor+1,f
  7178  1185  0CA6               	rrf	___aldiv@divisor,f
  7179  1186  0B89               	decfsz	9,f
  7180  1187  2982               	goto	u2795
  7181  1188  3001               	movlw	1
  7182  1189  02AF               	subwf	___aldiv@counter,f
  7183  118A  1D03               	btfss	3,2
  7184  118B  2961               	goto	l2721
  7185  118C                     l2733:	
  7186  118C  0830               	movf	___aldiv@sign,w
  7187  118D  1903               	btfsc	3,2
  7188  118E  299A               	goto	l2737
  7189  118F  09B1               	comf	___aldiv@quotient,f
  7190  1190  09B2               	comf	___aldiv@quotient+1,f
  7191  1191  09B3               	comf	___aldiv@quotient+2,f
  7192  1192  09B4               	comf	___aldiv@quotient+3,f
  7193  1193  0AB1               	incf	___aldiv@quotient,f
  7194  1194  1903               	skipnz
  7195  1195  0AB2               	incf	___aldiv@quotient+1,f
  7196  1196  1903               	skipnz
  7197  1197  0AB3               	incf	___aldiv@quotient+2,f
  7198  1198  1903               	skipnz
  7199  1199  0AB4               	incf	___aldiv@quotient+3,f
  7200  119A                     l2737:	
  7201  119A  0834               	movf	___aldiv@quotient+3,w
  7202  119B  00A9               	movwf	?___aldiv+3
  7203  119C  0833               	movf	___aldiv@quotient+2,w
  7204  119D  00A8               	movwf	?___aldiv+2
  7205  119E  0832               	movf	___aldiv@quotient+1,w
  7206  119F  00A7               	movwf	?___aldiv+1
  7207  11A0  0831               	movf	___aldiv@quotient,w
  7208  11A1  00A6               	movwf	?___aldiv
  7209  11A2  0008               	return
  7210  11A3                     __end_of___aldiv:	
  7211                           
  7212                           	psect	text20
  7213  1438                     __ptext20:	
  7214 ;; *************** function _map *****************
  7215 ;; Defined at:
  7216 ;;		line 251 in file "user.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  x               3    0[BANK1 ] float 
  7219 ;;  in_min          3    3[BANK1 ] float 
  7220 ;;  in_max          3    6[BANK1 ] float 
  7221 ;;  out_min         3    9[BANK1 ] float 
  7222 ;;  out_max         3   12[BANK1 ] float 
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;		None
  7225 ;; Return value:  Size  Location     Type
  7226 ;;                  3    0[BANK1 ] float 
  7227 ;; Registers used:
  7228 ;;		wreg, status,2, status,0, pclath, cstack
  7229 ;; Tracked objects:
  7230 ;;		On entry : 0/0
  7231 ;;		On exit  : 0/0
  7232 ;;		Unchanged: 0/0
  7233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7234 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7235 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7237 ;;      Totals:         0       3      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7238 ;;Total ram usage:       18 bytes
  7239 ;; Hardware stack levels used:    1
  7240 ;; Hardware stack levels required when called:    4
  7241 ;; This function calls:
  7242 ;;		___ftadd
  7243 ;;		___ftdiv
  7244 ;;		___ftmul
  7245 ;;		___ftneg
  7246 ;; This function is called by:
  7247 ;;		_main
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           
  7252                           ;psect for function _map
  7253  1438                     _map:	
  7254                           
  7255                           ;user.c: 252: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  7256                           
  7257                           ;incstack = 0
  7258                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  7259  1438  0021               	movlb	1	; select bank1
  7260  1439  0826               	movf	map@in_max^(0+128),w
  7261  143A  0020               	movlb	0	; select bank0
  7262  143B  00C3               	movwf	___ftadd@f1
  7263  143C  0021               	movlb	1	; select bank1
  7264  143D  0827               	movf	(map@in_max+1)^(0+128),w
  7265  143E  0020               	movlb	0	; select bank0
  7266  143F  00C4               	movwf	___ftadd@f1+1
  7267  1440  0021               	movlb	1	; select bank1
  7268  1441  0828               	movf	(map@in_max+2)^(0+128),w
  7269  1442  0020               	movlb	0	; select bank0
  7270  1443  00C5               	movwf	___ftadd@f1+2
  7271  1444  0021               	movlb	1	; select bank1
  7272  1445  0823               	movf	map@in_min^(0+128),w
  7273  1446  0020               	movlb	0	; select bank0
  7274  1447  00B0               	movwf	___ftneg@f1
  7275  1448  0021               	movlb	1	; select bank1
  7276  1449  0824               	movf	(map@in_min+1)^(0+128),w
  7277  144A  0020               	movlb	0	; select bank0
  7278  144B  00B1               	movwf	___ftneg@f1+1
  7279  144C  0021               	movlb	1	; select bank1
  7280  144D  0825               	movf	(map@in_min+2)^(0+128),w
  7281  144E  0020               	movlb	0	; select bank0
  7282  144F  00B2               	movwf	___ftneg@f1+2
  7283  1450  3199  2154  3194   	fcall	___ftneg
  7284  1453  0020               	movlb	0	; select bank0
  7285  1454  0830               	movf	?___ftneg,w
  7286  1455  00C6               	movwf	___ftadd@f2
  7287  1456  0831               	movf	?___ftneg+1,w
  7288  1457  00C7               	movwf	___ftadd@f2+1
  7289  1458  0832               	movf	?___ftneg+2,w
  7290  1459  00C8               	movwf	___ftadd@f2+2
  7291  145A  3188  201D  3194   	fcall	___ftadd
  7292  145D  0020               	movlb	0	; select bank0
  7293  145E  0843               	movf	?___ftadd,w
  7294  145F  00DA               	movwf	___ftdiv@f2
  7295  1460  0844               	movf	?___ftadd+1,w
  7296  1461  00DB               	movwf	___ftdiv@f2+1
  7297  1462  0845               	movf	?___ftadd+2,w
  7298  1463  00DC               	movwf	___ftdiv@f2+2
  7299  1464  0021               	movlb	1	; select bank1
  7300  1465  082C               	movf	map@out_max^(0+128),w
  7301  1466  0020               	movlb	0	; select bank0
  7302  1467  00C3               	movwf	___ftadd@f1
  7303  1468  0021               	movlb	1	; select bank1
  7304  1469  082D               	movf	(map@out_max+1)^(0+128),w
  7305  146A  0020               	movlb	0	; select bank0
  7306  146B  00C4               	movwf	___ftadd@f1+1
  7307  146C  0021               	movlb	1	; select bank1
  7308  146D  082E               	movf	(map@out_max+2)^(0+128),w
  7309  146E  0020               	movlb	0	; select bank0
  7310  146F  00C5               	movwf	___ftadd@f1+2
  7311  1470  0021               	movlb	1	; select bank1
  7312  1471  0829               	movf	map@out_min^(0+128),w
  7313  1472  0020               	movlb	0	; select bank0
  7314  1473  00B0               	movwf	___ftneg@f1
  7315  1474  0021               	movlb	1	; select bank1
  7316  1475  082A               	movf	(map@out_min+1)^(0+128),w
  7317  1476  0020               	movlb	0	; select bank0
  7318  1477  00B1               	movwf	___ftneg@f1+1
  7319  1478  0021               	movlb	1	; select bank1
  7320  1479  082B               	movf	(map@out_min+2)^(0+128),w
  7321  147A  0020               	movlb	0	; select bank0
  7322  147B  00B2               	movwf	___ftneg@f1+2
  7323  147C  3199  2154  3194   	fcall	___ftneg
  7324  147F  0020               	movlb	0	; select bank0
  7325  1480  0830               	movf	?___ftneg,w
  7326  1481  00C6               	movwf	___ftadd@f2
  7327  1482  0831               	movf	?___ftneg+1,w
  7328  1483  00C7               	movwf	___ftadd@f2+1
  7329  1484  0832               	movf	?___ftneg+2,w
  7330  1485  00C8               	movwf	___ftadd@f2+2
  7331  1486  3188  201D  3194   	fcall	___ftadd
  7332  1489  0020               	movlb	0	; select bank0
  7333  148A  0843               	movf	?___ftadd,w
  7334  148B  00B3               	movwf	___ftmul@f1
  7335  148C  0844               	movf	?___ftadd+1,w
  7336  148D  00B4               	movwf	___ftmul@f1+1
  7337  148E  0845               	movf	?___ftadd+2,w
  7338  148F  00B5               	movwf	___ftmul@f1+2
  7339  1490  0021               	movlb	1	; select bank1
  7340  1491  0820               	movf	map@x^(0+128),w
  7341  1492  0020               	movlb	0	; select bank0
  7342  1493  00C3               	movwf	___ftadd@f1
  7343  1494  0021               	movlb	1	; select bank1
  7344  1495  0821               	movf	(map@x+1)^(0+128),w
  7345  1496  0020               	movlb	0	; select bank0
  7346  1497  00C4               	movwf	___ftadd@f1+1
  7347  1498  0021               	movlb	1	; select bank1
  7348  1499  0822               	movf	(map@x+2)^(0+128),w
  7349  149A  0020               	movlb	0	; select bank0
  7350  149B  00C5               	movwf	___ftadd@f1+2
  7351  149C  0021               	movlb	1	; select bank1
  7352  149D  0823               	movf	map@in_min^(0+128),w
  7353  149E  0020               	movlb	0	; select bank0
  7354  149F  00B0               	movwf	___ftneg@f1
  7355  14A0  0021               	movlb	1	; select bank1
  7356  14A1  0824               	movf	(map@in_min+1)^(0+128),w
  7357  14A2  0020               	movlb	0	; select bank0
  7358  14A3  00B1               	movwf	___ftneg@f1+1
  7359  14A4  0021               	movlb	1	; select bank1
  7360  14A5  0825               	movf	(map@in_min+2)^(0+128),w
  7361  14A6  0020               	movlb	0	; select bank0
  7362  14A7  00B2               	movwf	___ftneg@f1+2
  7363  14A8  3199  2154  3194   	fcall	___ftneg
  7364  14AB  0020               	movlb	0	; select bank0
  7365  14AC  0830               	movf	?___ftneg,w
  7366  14AD  00C6               	movwf	___ftadd@f2
  7367  14AE  0831               	movf	?___ftneg+1,w
  7368  14AF  00C7               	movwf	___ftadd@f2+1
  7369  14B0  0832               	movf	?___ftneg+2,w
  7370  14B1  00C8               	movwf	___ftadd@f2+2
  7371  14B2  3188  201D  3194   	fcall	___ftadd
  7372  14B5  0020               	movlb	0	; select bank0
  7373  14B6  0843               	movf	?___ftadd,w
  7374  14B7  00B6               	movwf	___ftmul@f2
  7375  14B8  0844               	movf	?___ftadd+1,w
  7376  14B9  00B7               	movwf	___ftmul@f2+1
  7377  14BA  0845               	movf	?___ftadd+2,w
  7378  14BB  00B8               	movwf	___ftmul@f2+2
  7379  14BC  3193  2384  3194   	fcall	___ftmul
  7380  14BF  0020               	movlb	0	; select bank0
  7381  14C0  0833               	movf	?___ftmul,w
  7382  14C1  00DD               	movwf	___ftdiv@f1
  7383  14C2  0834               	movf	?___ftmul+1,w
  7384  14C3  00DE               	movwf	___ftdiv@f1+1
  7385  14C4  0835               	movf	?___ftmul+2,w
  7386  14C5  00DF               	movwf	___ftdiv@f1+2
  7387  14C6  3192  222A  3194   	fcall	___ftdiv
  7388  14C9  0020               	movlb	0	; select bank0
  7389  14CA  085A               	movf	?___ftdiv,w
  7390  14CB  00EA               	movwf	_map$1665
  7391  14CC  085B               	movf	?___ftdiv+1,w
  7392  14CD  00EB               	movwf	_map$1665+1
  7393  14CE  085C               	movf	?___ftdiv+2,w
  7394  14CF  00EC               	movwf	_map$1665+2
  7395                           
  7396                           ;user.c: 252: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  7397  14D0  0021               	movlb	1	; select bank1
  7398  14D1  0829               	movf	map@out_min^(0+128),w
  7399  14D2  0020               	movlb	0	; select bank0
  7400  14D3  00C3               	movwf	___ftadd@f1
  7401  14D4  0021               	movlb	1	; select bank1
  7402  14D5  082A               	movf	(map@out_min+1)^(0+128),w
  7403  14D6  0020               	movlb	0	; select bank0
  7404  14D7  00C4               	movwf	___ftadd@f1+1
  7405  14D8  0021               	movlb	1	; select bank1
  7406  14D9  082B               	movf	(map@out_min+2)^(0+128),w
  7407  14DA  0020               	movlb	0	; select bank0
  7408  14DB  00C5               	movwf	___ftadd@f1+2
  7409  14DC  086A               	movf	_map$1665,w
  7410  14DD  00C6               	movwf	___ftadd@f2
  7411  14DE  086B               	movf	_map$1665+1,w
  7412  14DF  00C7               	movwf	___ftadd@f2+1
  7413  14E0  086C               	movf	_map$1665+2,w
  7414  14E1  00C8               	movwf	___ftadd@f2+2
  7415  14E2  3188  201D         	fcall	___ftadd
  7416  14E4  0020               	movlb	0	; select bank0
  7417  14E5  0843               	movf	?___ftadd,w
  7418  14E6  0021               	movlb	1	; select bank1
  7419  14E7  00A0               	movwf	?_map^(0+128)
  7420  14E8  0020               	movlb	0	; select bank0
  7421  14E9  0844               	movf	?___ftadd+1,w
  7422  14EA  0021               	movlb	1	; select bank1
  7423  14EB  00A1               	movwf	(?_map+1)^(0+128)
  7424  14EC  0020               	movlb	0	; select bank0
  7425  14ED  0845               	movf	?___ftadd+2,w
  7426  14EE  0021               	movlb	1	; select bank1
  7427  14EF  00A2               	movwf	(?_map+2)^(0+128)
  7428  14F0  0008               	return
  7429  14F1                     __end_of_map:	
  7430                           
  7431                           	psect	text21
  7432  1954                     __ptext21:	
  7433 ;; *************** function ___ftneg *****************
  7434 ;; Defined at:
  7435 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  f1              3   16[BANK0 ] float 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;		None
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  3   16[BANK0 ] float 
  7442 ;; Registers used:
  7443 ;;		wreg
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7449 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7452 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7453 ;;Total ram usage:        3 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    2
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		_map
  7460 ;;		_round
  7461 ;;		_sin
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           
  7466                           ;psect for function ___ftneg
  7467  1954                     ___ftneg:	
  7468                           
  7469                           ;incstack = 0
  7470                           ; Regs used in ___ftneg: [wreg]
  7471  1954  0020               	movlb	0	; select bank0
  7472  1955  0832               	movf	___ftneg@f1+2,w
  7473  1956  0431               	iorwf	___ftneg@f1+1,w
  7474  1957  0430               	iorwf	___ftneg@f1,w
  7475  1958  1903               	skipnz
  7476  1959  0008               	return
  7477  195A  3080               	movlw	128
  7478  195B  06B2               	xorwf	___ftneg@f1+2,f
  7479  195C  0008               	return
  7480  195D                     __end_of___ftneg:	
  7481                           
  7482                           	psect	text22
  7483  1384                     __ptext22:	
  7484 ;; *************** function ___ftmul *****************
  7485 ;; Defined at:
  7486 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  7487 ;; Parameters:    Size  Location     Type
  7488 ;;  f1              3   19[BANK0 ] float 
  7489 ;;  f2              3   22[BANK0 ] float 
  7490 ;; Auto vars:     Size  Location     Type
  7491 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  7492 ;;  sign            1   34[BANK0 ] unsigned char 
  7493 ;;  cntr            1   33[BANK0 ] unsigned char 
  7494 ;;  exp             1   29[BANK0 ] unsigned char 
  7495 ;; Return value:  Size  Location     Type
  7496 ;;                  3   19[BANK0 ] float 
  7497 ;; Registers used:
  7498 ;;		wreg, status,2, status,0, pclath, cstack
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7504 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7505 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7506 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7507 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7508 ;;Total ram usage:       16 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    3
  7511 ;; This function calls:
  7512 ;;		___ftpack
  7513 ;; This function is called by:
  7514 ;;		_main
  7515 ;;		_set_subdivision
  7516 ;;		_map
  7517 ;;		_sin
  7518 ;;		_eval_poly
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           
  7523                           ;psect for function ___ftmul
  7524  1384                     ___ftmul:	
  7525                           
  7526                           ;incstack = 0
  7527                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7528  1384  0020               	movlb	0	; select bank0
  7529  1385  0833               	movf	___ftmul@f1,w
  7530  1386  00B9               	movwf	??___ftmul
  7531  1387  0834               	movf	___ftmul@f1+1,w
  7532  1388  00BA               	movwf	??___ftmul+1
  7533  1389  0835               	movf	___ftmul@f1+2,w
  7534  138A  00BB               	movwf	??___ftmul+2
  7535  138B  1003               	clrc
  7536  138C  0D3A               	rlf	??___ftmul+1,w
  7537  138D  0D3B               	rlf	??___ftmul+2,w
  7538  138E  00BC               	movwf	??___ftmul+3
  7539  138F  083C               	movf	??___ftmul+3,w
  7540  1390  00BD               	movwf	___ftmul@exp
  7541  1391  083D               	movf	___ftmul@exp,w
  7542  1392  1D03               	btfss	3,2
  7543  1393  2B9B               	goto	l2485
  7544  1394  3000               	movlw	0
  7545  1395  00B3               	movwf	?___ftmul
  7546  1396  3000               	movlw	0
  7547  1397  00B4               	movwf	?___ftmul+1
  7548  1398  3000               	movlw	0
  7549  1399  00B5               	movwf	?___ftmul+2
  7550  139A  0008               	return
  7551  139B                     l2485:	
  7552  139B  0836               	movf	___ftmul@f2,w
  7553  139C  00B9               	movwf	??___ftmul
  7554  139D  0837               	movf	___ftmul@f2+1,w
  7555  139E  00BA               	movwf	??___ftmul+1
  7556  139F  0838               	movf	___ftmul@f2+2,w
  7557  13A0  00BB               	movwf	??___ftmul+2
  7558  13A1  1003               	clrc
  7559  13A2  0D3A               	rlf	??___ftmul+1,w
  7560  13A3  0D3B               	rlf	??___ftmul+2,w
  7561  13A4  00BC               	movwf	??___ftmul+3
  7562  13A5  083C               	movf	??___ftmul+3,w
  7563  13A6  00C2               	movwf	___ftmul@sign
  7564  13A7  0842               	movf	___ftmul@sign,w
  7565  13A8  1D03               	btfss	3,2
  7566  13A9  2BB1               	goto	l2491
  7567  13AA  3000               	movlw	0
  7568  13AB  00B3               	movwf	?___ftmul
  7569  13AC  3000               	movlw	0
  7570  13AD  00B4               	movwf	?___ftmul+1
  7571  13AE  3000               	movlw	0
  7572  13AF  00B5               	movwf	?___ftmul+2
  7573  13B0  0008               	return
  7574  13B1                     l2491:	
  7575  13B1  0842               	movf	___ftmul@sign,w
  7576  13B2  3E7B               	addlw	123
  7577  13B3  00B9               	movwf	??___ftmul
  7578  13B4  0839               	movf	??___ftmul,w
  7579  13B5  07BD               	addwf	___ftmul@exp,f
  7580  13B6  0833               	movf	___ftmul@f1,w
  7581  13B7  00B9               	movwf	??___ftmul
  7582  13B8  0834               	movf	___ftmul@f1+1,w
  7583  13B9  00BA               	movwf	??___ftmul+1
  7584  13BA  0835               	movf	___ftmul@f1+2,w
  7585  13BB  00BB               	movwf	??___ftmul+2
  7586  13BC  3010               	movlw	16
  7587  13BD                     u2435:	
  7588  13BD  36BB               	lsrf	??___ftmul+2,f
  7589  13BE  0CBA               	rrf	??___ftmul+1,f
  7590  13BF  0CB9               	rrf	??___ftmul,f
  7591  13C0  0B89               	decfsz	9,f
  7592  13C1  2BBD               	goto	u2435
  7593  13C2  0839               	movf	??___ftmul,w
  7594  13C3  00BC               	movwf	??___ftmul+3
  7595  13C4  083C               	movf	??___ftmul+3,w
  7596  13C5  00C2               	movwf	___ftmul@sign
  7597  13C6  0836               	movf	___ftmul@f2,w
  7598  13C7  00B9               	movwf	??___ftmul
  7599  13C8  0837               	movf	___ftmul@f2+1,w
  7600  13C9  00BA               	movwf	??___ftmul+1
  7601  13CA  0838               	movf	___ftmul@f2+2,w
  7602  13CB  00BB               	movwf	??___ftmul+2
  7603  13CC  3010               	movlw	16
  7604  13CD                     u2445:	
  7605  13CD  36BB               	lsrf	??___ftmul+2,f
  7606  13CE  0CBA               	rrf	??___ftmul+1,f
  7607  13CF  0CB9               	rrf	??___ftmul,f
  7608  13D0  0B89               	decfsz	9,f
  7609  13D1  2BCD               	goto	u2445
  7610  13D2  0839               	movf	??___ftmul,w
  7611  13D3  00BC               	movwf	??___ftmul+3
  7612  13D4  083C               	movf	??___ftmul+3,w
  7613  13D5  06C2               	xorwf	___ftmul@sign,f
  7614  13D6  3080               	movlw	128
  7615  13D7  00B9               	movwf	??___ftmul
  7616  13D8  0839               	movf	??___ftmul,w
  7617  13D9  05C2               	andwf	___ftmul@sign,f
  7618  13DA  17B4               	bsf	___ftmul@f1+1,7
  7619  13DB  17B7               	bsf	___ftmul@f2+1,7
  7620  13DC  30FF               	movlw	255
  7621  13DD  05B6               	andwf	___ftmul@f2,f
  7622  13DE  30FF               	movlw	255
  7623  13DF  05B7               	andwf	___ftmul@f2+1,f
  7624  13E0  3000               	movlw	0
  7625  13E1  05B8               	andwf	___ftmul@f2+2,f
  7626  13E2  3000               	movlw	0
  7627  13E3  00BE               	movwf	___ftmul@f3_as_product
  7628  13E4  3000               	movlw	0
  7629  13E5  00BF               	movwf	___ftmul@f3_as_product+1
  7630  13E6  3000               	movlw	0
  7631  13E7  00C0               	movwf	___ftmul@f3_as_product+2
  7632  13E8  3007               	movlw	7
  7633  13E9  00B9               	movwf	??___ftmul
  7634  13EA  0839               	movf	??___ftmul,w
  7635  13EB  00C1               	movwf	___ftmul@cntr
  7636  13EC                     l2503:	
  7637  13EC  1C33               	btfss	___ftmul@f1,0
  7638  13ED  2BF4               	goto	l2507
  7639  13EE  0836               	movf	___ftmul@f2,w
  7640  13EF  07BE               	addwf	___ftmul@f3_as_product,f
  7641  13F0  0837               	movf	___ftmul@f2+1,w
  7642  13F1  3DBF               	addwfc	___ftmul@f3_as_product+1,f
  7643  13F2  0838               	movf	___ftmul@f2+2,w
  7644  13F3  3DC0               	addwfc	___ftmul@f3_as_product+2,f
  7645  13F4                     l2507:	
  7646  13F4  3001               	movlw	1
  7647  13F5                     u2465:	
  7648  13F5  36B5               	lsrf	___ftmul@f1+2,f
  7649  13F6  0CB4               	rrf	___ftmul@f1+1,f
  7650  13F7  0CB3               	rrf	___ftmul@f1,f
  7651  13F8  0B89               	decfsz	9,f
  7652  13F9  2BF5               	goto	u2465
  7653  13FA  3001               	movlw	1
  7654  13FB                     u2475:	
  7655  13FB  35B6               	lslf	___ftmul@f2,f
  7656  13FC  0DB7               	rlf	___ftmul@f2+1,f
  7657  13FD  0DB8               	rlf	___ftmul@f2+2,f
  7658  13FE  0B89               	decfsz	9,f
  7659  13FF  2BFB               	goto	u2475
  7660  1400  3001               	movlw	1
  7661  1401  02C1               	subwf	___ftmul@cntr,f
  7662  1402  1D03               	btfss	3,2
  7663  1403  2BEC               	goto	l2503
  7664  1404  3009               	movlw	9
  7665  1405  00B9               	movwf	??___ftmul
  7666  1406  0839               	movf	??___ftmul,w
  7667  1407  00C1               	movwf	___ftmul@cntr
  7668  1408                     l2515:	
  7669  1408  1C33               	btfss	___ftmul@f1,0
  7670  1409  2C10               	goto	l2519
  7671  140A  0836               	movf	___ftmul@f2,w
  7672  140B  07BE               	addwf	___ftmul@f3_as_product,f
  7673  140C  0837               	movf	___ftmul@f2+1,w
  7674  140D  3DBF               	addwfc	___ftmul@f3_as_product+1,f
  7675  140E  0838               	movf	___ftmul@f2+2,w
  7676  140F  3DC0               	addwfc	___ftmul@f3_as_product+2,f
  7677  1410                     l2519:	
  7678  1410  3001               	movlw	1
  7679  1411                     u2505:	
  7680  1411  36B5               	lsrf	___ftmul@f1+2,f
  7681  1412  0CB4               	rrf	___ftmul@f1+1,f
  7682  1413  0CB3               	rrf	___ftmul@f1,f
  7683  1414  0B89               	decfsz	9,f
  7684  1415  2C11               	goto	u2505
  7685  1416  3001               	movlw	1
  7686  1417                     u2515:	
  7687  1417  36C0               	lsrf	___ftmul@f3_as_product+2,f
  7688  1418  0CBF               	rrf	___ftmul@f3_as_product+1,f
  7689  1419  0CBE               	rrf	___ftmul@f3_as_product,f
  7690  141A  0B89               	decfsz	9,f
  7691  141B  2C17               	goto	u2515
  7692  141C  3001               	movlw	1
  7693  141D  02C1               	subwf	___ftmul@cntr,f
  7694  141E  1D03               	btfss	3,2
  7695  141F  2C08               	goto	l2515
  7696  1420  083E               	movf	___ftmul@f3_as_product,w
  7697  1421  00A0               	movwf	___ftpack@arg
  7698  1422  083F               	movf	___ftmul@f3_as_product+1,w
  7699  1423  00A1               	movwf	___ftpack@arg+1
  7700  1424  0840               	movf	___ftmul@f3_as_product+2,w
  7701  1425  00A2               	movwf	___ftpack@arg+2
  7702  1426  083D               	movf	___ftmul@exp,w
  7703  1427  00B9               	movwf	??___ftmul
  7704  1428  0839               	movf	??___ftmul,w
  7705  1429  00A3               	movwf	___ftpack@exp
  7706  142A  0842               	movf	___ftmul@sign,w
  7707  142B  00BA               	movwf	??___ftmul+1
  7708  142C  083A               	movf	??___ftmul+1,w
  7709  142D  00A4               	movwf	___ftpack@sign
  7710  142E  319F  279B         	fcall	___ftpack
  7711  1430  0020               	movlb	0	; select bank0
  7712  1431  0820               	movf	?___ftpack,w
  7713  1432  00B3               	movwf	?___ftmul
  7714  1433  0821               	movf	?___ftpack+1,w
  7715  1434  00B4               	movwf	?___ftmul+1
  7716  1435  0822               	movf	?___ftpack+2,w
  7717  1436  00B5               	movwf	?___ftmul+2
  7718  1437  0008               	return
  7719  1438                     __end_of___ftmul:	
  7720                           
  7721                           	psect	text23
  7722  122A                     __ptext23:	
  7723 ;; *************** function ___ftdiv *****************
  7724 ;; Defined at:
  7725 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;  f2              3   58[BANK0 ] float 
  7728 ;;  f1              3   61[BANK0 ] float 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;  f3              3   69[BANK0 ] float 
  7731 ;;  sign            1   73[BANK0 ] unsigned char 
  7732 ;;  exp             1   72[BANK0 ] unsigned char 
  7733 ;;  cntr            1   68[BANK0 ] unsigned char 
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  3   58[BANK0 ] float 
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0, pclath, cstack
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7743 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7744 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7745 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7746 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7747 ;;Total ram usage:       16 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    3
  7750 ;; This function calls:
  7751 ;;		___ftpack
  7752 ;; This function is called by:
  7753 ;;		_main
  7754 ;;		_map
  7755 ;;		_sin
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           
  7760                           ;psect for function ___ftdiv
  7761  122A                     ___ftdiv:	
  7762                           
  7763                           ;incstack = 0
  7764                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  7765  122A  0020               	movlb	0	; select bank0
  7766  122B  085D               	movf	___ftdiv@f1,w
  7767  122C  00E0               	movwf	??___ftdiv
  7768  122D  085E               	movf	___ftdiv@f1+1,w
  7769  122E  00E1               	movwf	??___ftdiv+1
  7770  122F  085F               	movf	___ftdiv@f1+2,w
  7771  1230  00E2               	movwf	??___ftdiv+2
  7772  1231  1003               	clrc
  7773  1232  0D61               	rlf	??___ftdiv+1,w
  7774  1233  0D62               	rlf	??___ftdiv+2,w
  7775  1234  00E3               	movwf	??___ftdiv+3
  7776  1235  0863               	movf	??___ftdiv+3,w
  7777  1236  00E8               	movwf	___ftdiv@exp
  7778  1237  0868               	movf	___ftdiv@exp,w
  7779  1238  1D03               	btfss	3,2
  7780  1239  2A41               	goto	l2759
  7781  123A  3000               	movlw	0
  7782  123B  00DA               	movwf	?___ftdiv
  7783  123C  3000               	movlw	0
  7784  123D  00DB               	movwf	?___ftdiv+1
  7785  123E  3000               	movlw	0
  7786  123F  00DC               	movwf	?___ftdiv+2
  7787  1240  0008               	return
  7788  1241                     l2759:	
  7789  1241  085A               	movf	___ftdiv@f2,w
  7790  1242  00E0               	movwf	??___ftdiv
  7791  1243  085B               	movf	___ftdiv@f2+1,w
  7792  1244  00E1               	movwf	??___ftdiv+1
  7793  1245  085C               	movf	___ftdiv@f2+2,w
  7794  1246  00E2               	movwf	??___ftdiv+2
  7795  1247  1003               	clrc
  7796  1248  0D61               	rlf	??___ftdiv+1,w
  7797  1249  0D62               	rlf	??___ftdiv+2,w
  7798  124A  00E3               	movwf	??___ftdiv+3
  7799  124B  0863               	movf	??___ftdiv+3,w
  7800  124C  00E9               	movwf	___ftdiv@sign
  7801  124D  0869               	movf	___ftdiv@sign,w
  7802  124E  1D03               	btfss	3,2
  7803  124F  2A57               	goto	l2765
  7804  1250  3000               	movlw	0
  7805  1251  00DA               	movwf	?___ftdiv
  7806  1252  3000               	movlw	0
  7807  1253  00DB               	movwf	?___ftdiv+1
  7808  1254  3000               	movlw	0
  7809  1255  00DC               	movwf	?___ftdiv+2
  7810  1256  0008               	return
  7811  1257                     l2765:	
  7812  1257  3000               	movlw	0
  7813  1258  00E5               	movwf	___ftdiv@f3
  7814  1259  3000               	movlw	0
  7815  125A  00E6               	movwf	___ftdiv@f3+1
  7816  125B  3000               	movlw	0
  7817  125C  00E7               	movwf	___ftdiv@f3+2
  7818  125D  3089               	movlw	137
  7819  125E  0769               	addwf	___ftdiv@sign,w
  7820  125F  00E0               	movwf	??___ftdiv
  7821  1260  0860               	movf	??___ftdiv,w
  7822  1261  02E8               	subwf	___ftdiv@exp,f
  7823  1262  085D               	movf	___ftdiv@f1,w
  7824  1263  00E0               	movwf	??___ftdiv
  7825  1264  085E               	movf	___ftdiv@f1+1,w
  7826  1265  00E1               	movwf	??___ftdiv+1
  7827  1266  085F               	movf	___ftdiv@f1+2,w
  7828  1267  00E2               	movwf	??___ftdiv+2
  7829  1268  3010               	movlw	16
  7830  1269                     u2855:	
  7831  1269  36E2               	lsrf	??___ftdiv+2,f
  7832  126A  0CE1               	rrf	??___ftdiv+1,f
  7833  126B  0CE0               	rrf	??___ftdiv,f
  7834  126C  0B89               	decfsz	9,f
  7835  126D  2A69               	goto	u2855
  7836  126E  0860               	movf	??___ftdiv,w
  7837  126F  00E3               	movwf	??___ftdiv+3
  7838  1270  0863               	movf	??___ftdiv+3,w
  7839  1271  00E9               	movwf	___ftdiv@sign
  7840  1272  085A               	movf	___ftdiv@f2,w
  7841  1273  00E0               	movwf	??___ftdiv
  7842  1274  085B               	movf	___ftdiv@f2+1,w
  7843  1275  00E1               	movwf	??___ftdiv+1
  7844  1276  085C               	movf	___ftdiv@f2+2,w
  7845  1277  00E2               	movwf	??___ftdiv+2
  7846  1278  3010               	movlw	16
  7847  1279                     u2865:	
  7848  1279  36E2               	lsrf	??___ftdiv+2,f
  7849  127A  0CE1               	rrf	??___ftdiv+1,f
  7850  127B  0CE0               	rrf	??___ftdiv,f
  7851  127C  0B89               	decfsz	9,f
  7852  127D  2A79               	goto	u2865
  7853  127E  0860               	movf	??___ftdiv,w
  7854  127F  00E3               	movwf	??___ftdiv+3
  7855  1280  0863               	movf	??___ftdiv+3,w
  7856  1281  06E9               	xorwf	___ftdiv@sign,f
  7857  1282  3080               	movlw	128
  7858  1283  00E0               	movwf	??___ftdiv
  7859  1284  0860               	movf	??___ftdiv,w
  7860  1285  05E9               	andwf	___ftdiv@sign,f
  7861  1286  17DE               	bsf	___ftdiv@f1+1,7
  7862  1287  30FF               	movlw	255
  7863  1288  05DD               	andwf	___ftdiv@f1,f
  7864  1289  30FF               	movlw	255
  7865  128A  05DE               	andwf	___ftdiv@f1+1,f
  7866  128B  3000               	movlw	0
  7867  128C  05DF               	andwf	___ftdiv@f1+2,f
  7868  128D  17DB               	bsf	___ftdiv@f2+1,7
  7869  128E  30FF               	movlw	255
  7870  128F  05DA               	andwf	___ftdiv@f2,f
  7871  1290  30FF               	movlw	255
  7872  1291  05DB               	andwf	___ftdiv@f2+1,f
  7873  1292  3000               	movlw	0
  7874  1293  05DC               	andwf	___ftdiv@f2+2,f
  7875  1294  3018               	movlw	24
  7876  1295  00E0               	movwf	??___ftdiv
  7877  1296  0860               	movf	??___ftdiv,w
  7878  1297  00E4               	movwf	___ftdiv@cntr
  7879  1298                     l2779:	
  7880  1298  3001               	movlw	1
  7881  1299                     u2875:	
  7882  1299  35E5               	lslf	___ftdiv@f3,f
  7883  129A  0DE6               	rlf	___ftdiv@f3+1,f
  7884  129B  0DE7               	rlf	___ftdiv@f3+2,f
  7885  129C  0B89               	decfsz	9,f
  7886  129D  2A99               	goto	u2875
  7887  129E  085C               	movf	___ftdiv@f2+2,w
  7888  129F  025F               	subwf	___ftdiv@f1+2,w
  7889  12A0  1D03               	skipz
  7890  12A1  2AA8               	goto	u2885
  7891  12A2  085B               	movf	___ftdiv@f2+1,w
  7892  12A3  025E               	subwf	___ftdiv@f1+1,w
  7893  12A4  1D03               	skipz
  7894  12A5  2AA8               	goto	u2885
  7895  12A6  085A               	movf	___ftdiv@f2,w
  7896  12A7  025D               	subwf	___ftdiv@f1,w
  7897  12A8                     u2885:	
  7898  12A8  1C03               	skipc
  7899  12A9  2AB1               	goto	l2787
  7900  12AA  085A               	movf	___ftdiv@f2,w
  7901  12AB  02DD               	subwf	___ftdiv@f1,f
  7902  12AC  085B               	movf	___ftdiv@f2+1,w
  7903  12AD  3BDE               	subwfb	___ftdiv@f1+1,f
  7904  12AE  085C               	movf	___ftdiv@f2+2,w
  7905  12AF  3BDF               	subwfb	___ftdiv@f1+2,f
  7906  12B0  1465               	bsf	___ftdiv@f3,0
  7907  12B1                     l2787:	
  7908  12B1  3001               	movlw	1
  7909  12B2                     u2895:	
  7910  12B2  35DD               	lslf	___ftdiv@f1,f
  7911  12B3  0DDE               	rlf	___ftdiv@f1+1,f
  7912  12B4  0DDF               	rlf	___ftdiv@f1+2,f
  7913  12B5  0B89               	decfsz	9,f
  7914  12B6  2AB2               	goto	u2895
  7915  12B7  3001               	movlw	1
  7916  12B8  02E4               	subwf	___ftdiv@cntr,f
  7917  12B9  1D03               	btfss	3,2
  7918  12BA  2A98               	goto	l2779
  7919  12BB  0865               	movf	___ftdiv@f3,w
  7920  12BC  00A0               	movwf	___ftpack@arg
  7921  12BD  0866               	movf	___ftdiv@f3+1,w
  7922  12BE  00A1               	movwf	___ftpack@arg+1
  7923  12BF  0867               	movf	___ftdiv@f3+2,w
  7924  12C0  00A2               	movwf	___ftpack@arg+2
  7925  12C1  0868               	movf	___ftdiv@exp,w
  7926  12C2  00E0               	movwf	??___ftdiv
  7927  12C3  0860               	movf	??___ftdiv,w
  7928  12C4  00A3               	movwf	___ftpack@exp
  7929  12C5  0869               	movf	___ftdiv@sign,w
  7930  12C6  00E1               	movwf	??___ftdiv+1
  7931  12C7  0861               	movf	??___ftdiv+1,w
  7932  12C8  00A4               	movwf	___ftpack@sign
  7933  12C9  319F  279B         	fcall	___ftpack
  7934  12CB  0020               	movlb	0	; select bank0
  7935  12CC  0820               	movf	?___ftpack,w
  7936  12CD  00DA               	movwf	?___ftdiv
  7937  12CE  0821               	movf	?___ftpack+1,w
  7938  12CF  00DB               	movwf	?___ftdiv+1
  7939  12D0  0822               	movf	?___ftpack+2,w
  7940  12D1  00DC               	movwf	?___ftdiv+2
  7941  12D2  0008               	return
  7942  12D3                     __end_of___ftdiv:	
  7943                           
  7944                           	psect	text24
  7945  081D                     __ptext24:	
  7946 ;; *************** function ___ftadd *****************
  7947 ;; Defined at:
  7948 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;  f1              3   35[BANK0 ] float 
  7951 ;;  f2              3   38[BANK0 ] float 
  7952 ;; Auto vars:     Size  Location     Type
  7953 ;;  exp1            1   47[BANK0 ] unsigned char 
  7954 ;;  exp2            1   46[BANK0 ] unsigned char 
  7955 ;;  sign            1   45[BANK0 ] unsigned char 
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  3   35[BANK0 ] float 
  7958 ;; Registers used:
  7959 ;;		wreg, status,2, status,0, pclath, cstack
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7965 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7966 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7967 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7968 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7969 ;;Total ram usage:       13 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; Hardware stack levels required when called:    3
  7972 ;; This function calls:
  7973 ;;		___ftpack
  7974 ;; This function is called by:
  7975 ;;		_map
  7976 ;;		___ftsub
  7977 ;;		_round
  7978 ;;		_sin
  7979 ;;		_eval_poly
  7980 ;;		_floor
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           
  7985                           ;psect for function ___ftadd
  7986  081D                     ___ftadd:	
  7987                           
  7988                           ;incstack = 0
  7989                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7990  081D  0020               	movlb	0	; select bank0
  7991  081E  0843               	movf	___ftadd@f1,w
  7992  081F  00C9               	movwf	??___ftadd
  7993  0820  0844               	movf	___ftadd@f1+1,w
  7994  0821  00CA               	movwf	??___ftadd+1
  7995  0822  0845               	movf	___ftadd@f1+2,w
  7996  0823  00CB               	movwf	??___ftadd+2
  7997  0824  1003               	clrc
  7998  0825  0D4A               	rlf	??___ftadd+1,w
  7999  0826  0D4B               	rlf	??___ftadd+2,w
  8000  0827  00CC               	movwf	??___ftadd+3
  8001  0828  084C               	movf	??___ftadd+3,w
  8002  0829  00CF               	movwf	___ftadd@exp1
  8003  082A  0846               	movf	___ftadd@f2,w
  8004  082B  00C9               	movwf	??___ftadd
  8005  082C  0847               	movf	___ftadd@f2+1,w
  8006  082D  00CA               	movwf	??___ftadd+1
  8007  082E  0848               	movf	___ftadd@f2+2,w
  8008  082F  00CB               	movwf	??___ftadd+2
  8009  0830  1003               	clrc
  8010  0831  0D4A               	rlf	??___ftadd+1,w
  8011  0832  0D4B               	rlf	??___ftadd+2,w
  8012  0833  00CC               	movwf	??___ftadd+3
  8013  0834  084C               	movf	??___ftadd+3,w
  8014  0835  00CE               	movwf	___ftadd@exp2
  8015  0836  084F               	movf	___ftadd@exp1,w
  8016  0837  1903               	btfsc	3,2
  8017  0838  2845               	goto	l2395
  8018  0839  084E               	movf	___ftadd@exp2,w
  8019  083A  024F               	subwf	___ftadd@exp1,w
  8020  083B  1803               	skipnc
  8021  083C  284C               	goto	l2399
  8022  083D  034F               	decf	___ftadd@exp1,w
  8023  083E  3AFF               	xorlw	255
  8024  083F  074E               	addwf	___ftadd@exp2,w
  8025  0840  00C9               	movwf	??___ftadd
  8026  0841  3019               	movlw	25
  8027  0842  0249               	subwf	??___ftadd,w
  8028  0843  1C03               	skipc
  8029  0844  284C               	goto	l2399
  8030  0845                     l2395:	
  8031  0845  0846               	movf	___ftadd@f2,w
  8032  0846  00C3               	movwf	?___ftadd
  8033  0847  0847               	movf	___ftadd@f2+1,w
  8034  0848  00C4               	movwf	?___ftadd+1
  8035  0849  0848               	movf	___ftadd@f2+2,w
  8036  084A  00C5               	movwf	?___ftadd+2
  8037  084B  0008               	return
  8038  084C                     l2399:	
  8039  084C  084E               	movf	___ftadd@exp2,w
  8040  084D  1903               	btfsc	3,2
  8041  084E  0008               	return
  8042  084F  084F               	movf	___ftadd@exp1,w
  8043  0850  024E               	subwf	___ftadd@exp2,w
  8044  0851  1803               	skipnc
  8045  0852  285B               	goto	l2405
  8046  0853  034E               	decf	___ftadd@exp2,w
  8047  0854  3AFF               	xorlw	255
  8048  0855  074F               	addwf	___ftadd@exp1,w
  8049  0856  00C9               	movwf	??___ftadd
  8050  0857  3019               	movlw	25
  8051  0858  0249               	subwf	??___ftadd,w
  8052  0859  1803               	btfsc	3,0
  8053  085A  0008               	return
  8054  085B                     l2405:	
  8055  085B  3006               	movlw	6
  8056  085C  00C9               	movwf	??___ftadd
  8057  085D  0849               	movf	??___ftadd,w
  8058  085E  00CD               	movwf	___ftadd@sign
  8059  085F  1BC5               	btfsc	___ftadd@f1+2,7
  8060  0860  17CD               	bsf	___ftadd@sign,7
  8061  0861  1BC8               	btfsc	___ftadd@f2+2,7
  8062  0862  174D               	bsf	___ftadd@sign,6
  8063  0863  17C4               	bsf	___ftadd@f1+1,7
  8064  0864  30FF               	movlw	255
  8065  0865  05C3               	andwf	___ftadd@f1,f
  8066  0866  30FF               	movlw	255
  8067  0867  05C4               	andwf	___ftadd@f1+1,f
  8068  0868  3000               	movlw	0
  8069  0869  05C5               	andwf	___ftadd@f1+2,f
  8070  086A  17C7               	bsf	___ftadd@f2+1,7
  8071  086B  30FF               	movlw	255
  8072  086C  05C6               	andwf	___ftadd@f2,f
  8073  086D  30FF               	movlw	255
  8074  086E  05C7               	andwf	___ftadd@f2+1,f
  8075  086F  3000               	movlw	0
  8076  0870  05C8               	andwf	___ftadd@f2+2,f
  8077  0871  084E               	movf	___ftadd@exp2,w
  8078  0872  024F               	subwf	___ftadd@exp1,w
  8079  0873  1803               	skipnc
  8080  0874  2897               	goto	l2427
  8081  0875                     l2417:	
  8082  0875  3001               	movlw	1
  8083  0876                     u2245:	
  8084  0876  35C6               	lslf	___ftadd@f2,f
  8085  0877  0DC7               	rlf	___ftadd@f2+1,f
  8086  0878  0DC8               	rlf	___ftadd@f2+2,f
  8087  0879  0B89               	decfsz	9,f
  8088  087A  2876               	goto	u2245
  8089  087B  3001               	movlw	1
  8090  087C  02CE               	subwf	___ftadd@exp2,f
  8091  087D  084E               	movf	___ftadd@exp2,w
  8092  087E  064F               	xorwf	___ftadd@exp1,w
  8093  087F  1903               	skipnz
  8094  0880  2892               	goto	l2425
  8095  0881  3001               	movlw	1
  8096  0882  02CD               	subwf	___ftadd@sign,f
  8097  0883  084D               	movf	___ftadd@sign,w
  8098  0884  3907               	andlw	7
  8099  0885  1903               	btfsc	3,2
  8100  0886  2892               	goto	l2425
  8101  0887  2875               	goto	l2417
  8102  0888                     l2423:	
  8103  0888  3001               	movlw	1
  8104  0889                     u2275:	
  8105  0889  36C5               	lsrf	___ftadd@f1+2,f
  8106  088A  0CC4               	rrf	___ftadd@f1+1,f
  8107  088B  0CC3               	rrf	___ftadd@f1,f
  8108  088C  0B89               	decfsz	9,f
  8109  088D  2889               	goto	u2275
  8110  088E  3001               	movlw	1
  8111  088F  00C9               	movwf	??___ftadd
  8112  0890  0849               	movf	??___ftadd,w
  8113  0891  07CF               	addwf	___ftadd@exp1,f
  8114  0892                     l2425:	
  8115  0892  084F               	movf	___ftadd@exp1,w
  8116  0893  064E               	xorwf	___ftadd@exp2,w
  8117  0894  1903               	btfsc	3,2
  8118  0895  28BC               	goto	l683
  8119  0896  2888               	goto	l2423
  8120  0897                     l2427:	
  8121  0897  084F               	movf	___ftadd@exp1,w
  8122  0898  024E               	subwf	___ftadd@exp2,w
  8123  0899  1803               	skipnc
  8124  089A  28BC               	goto	l683
  8125  089B                     l2429:	
  8126  089B  3001               	movlw	1
  8127  089C                     u2305:	
  8128  089C  35C3               	lslf	___ftadd@f1,f
  8129  089D  0DC4               	rlf	___ftadd@f1+1,f
  8130  089E  0DC5               	rlf	___ftadd@f1+2,f
  8131  089F  0B89               	decfsz	9,f
  8132  08A0  289C               	goto	u2305
  8133  08A1  3001               	movlw	1
  8134  08A2  02CF               	subwf	___ftadd@exp1,f
  8135  08A3  084E               	movf	___ftadd@exp2,w
  8136  08A4  064F               	xorwf	___ftadd@exp1,w
  8137  08A5  1903               	skipnz
  8138  08A6  28B8               	goto	l2437
  8139  08A7  3001               	movlw	1
  8140  08A8  02CD               	subwf	___ftadd@sign,f
  8141  08A9  084D               	movf	___ftadd@sign,w
  8142  08AA  3907               	andlw	7
  8143  08AB  1903               	btfsc	3,2
  8144  08AC  28B8               	goto	l2437
  8145  08AD  289B               	goto	l2429
  8146  08AE                     l2435:	
  8147  08AE  3001               	movlw	1
  8148  08AF                     u2335:	
  8149  08AF  36C8               	lsrf	___ftadd@f2+2,f
  8150  08B0  0CC7               	rrf	___ftadd@f2+1,f
  8151  08B1  0CC6               	rrf	___ftadd@f2,f
  8152  08B2  0B89               	decfsz	9,f
  8153  08B3  28AF               	goto	u2335
  8154  08B4  3001               	movlw	1
  8155  08B5  00C9               	movwf	??___ftadd
  8156  08B6  0849               	movf	??___ftadd,w
  8157  08B7  07CE               	addwf	___ftadd@exp2,f
  8158  08B8                     l2437:	
  8159  08B8  084F               	movf	___ftadd@exp1,w
  8160  08B9  064E               	xorwf	___ftadd@exp2,w
  8161  08BA  1D03               	skipz
  8162  08BB  28AE               	goto	l2435
  8163  08BC                     l683:	
  8164  08BC  1FCD               	btfss	___ftadd@sign,7
  8165  08BD  28CE               	goto	l2441
  8166  08BE  30FF               	movlw	255
  8167  08BF  06C3               	xorwf	___ftadd@f1,f
  8168  08C0  30FF               	movlw	255
  8169  08C1  06C4               	xorwf	___ftadd@f1+1,f
  8170  08C2  30FF               	movlw	255
  8171  08C3  06C5               	xorwf	___ftadd@f1+2,f
  8172  08C4  3001               	movlw	1
  8173  08C5  07C3               	addwf	___ftadd@f1,f
  8174  08C6  3000               	movlw	0
  8175  08C7  1803               	skipnc
  8176  08C8  3001               	movlw	1
  8177  08C9  07C4               	addwf	___ftadd@f1+1,f
  8178  08CA  3000               	movlw	0
  8179  08CB  1803               	skipnc
  8180  08CC  3001               	movlw	1
  8181  08CD  07C5               	addwf	___ftadd@f1+2,f
  8182  08CE                     l2441:	
  8183  08CE  1F4D               	btfss	___ftadd@sign,6
  8184  08CF  28E0               	goto	l2445
  8185  08D0  30FF               	movlw	255
  8186  08D1  06C6               	xorwf	___ftadd@f2,f
  8187  08D2  30FF               	movlw	255
  8188  08D3  06C7               	xorwf	___ftadd@f2+1,f
  8189  08D4  30FF               	movlw	255
  8190  08D5  06C8               	xorwf	___ftadd@f2+2,f
  8191  08D6  3001               	movlw	1
  8192  08D7  07C6               	addwf	___ftadd@f2,f
  8193  08D8  3000               	movlw	0
  8194  08D9  1803               	skipnc
  8195  08DA  3001               	movlw	1
  8196  08DB  07C7               	addwf	___ftadd@f2+1,f
  8197  08DC  3000               	movlw	0
  8198  08DD  1803               	skipnc
  8199  08DE  3001               	movlw	1
  8200  08DF  07C8               	addwf	___ftadd@f2+2,f
  8201  08E0                     l2445:	
  8202  08E0  01CD               	clrf	___ftadd@sign
  8203  08E1  0843               	movf	___ftadd@f1,w
  8204  08E2  07C6               	addwf	___ftadd@f2,f
  8205  08E3  0844               	movf	___ftadd@f1+1,w
  8206  08E4  3DC7               	addwfc	___ftadd@f2+1,f
  8207  08E5  0845               	movf	___ftadd@f1+2,w
  8208  08E6  3DC8               	addwfc	___ftadd@f2+2,f
  8209  08E7  1FC8               	btfss	___ftadd@f2+2,7
  8210  08E8  28FB               	goto	l2455
  8211  08E9  30FF               	movlw	255
  8212  08EA  06C6               	xorwf	___ftadd@f2,f
  8213  08EB  30FF               	movlw	255
  8214  08EC  06C7               	xorwf	___ftadd@f2+1,f
  8215  08ED  30FF               	movlw	255
  8216  08EE  06C8               	xorwf	___ftadd@f2+2,f
  8217  08EF  3001               	movlw	1
  8218  08F0  07C6               	addwf	___ftadd@f2,f
  8219  08F1  3000               	movlw	0
  8220  08F2  1803               	skipnc
  8221  08F3  3001               	movlw	1
  8222  08F4  07C7               	addwf	___ftadd@f2+1,f
  8223  08F5  3000               	movlw	0
  8224  08F6  1803               	skipnc
  8225  08F7  3001               	movlw	1
  8226  08F8  07C8               	addwf	___ftadd@f2+2,f
  8227  08F9  01CD               	clrf	___ftadd@sign
  8228  08FA  0ACD               	incf	___ftadd@sign,f
  8229  08FB                     l2455:	
  8230  08FB  0846               	movf	___ftadd@f2,w
  8231  08FC  00A0               	movwf	___ftpack@arg
  8232  08FD  0847               	movf	___ftadd@f2+1,w
  8233  08FE  00A1               	movwf	___ftpack@arg+1
  8234  08FF  0848               	movf	___ftadd@f2+2,w
  8235  0900  00A2               	movwf	___ftpack@arg+2
  8236  0901  084F               	movf	___ftadd@exp1,w
  8237  0902  00C9               	movwf	??___ftadd
  8238  0903  0849               	movf	??___ftadd,w
  8239  0904  00A3               	movwf	___ftpack@exp
  8240  0905  084D               	movf	___ftadd@sign,w
  8241  0906  00CA               	movwf	??___ftadd+1
  8242  0907  084A               	movf	??___ftadd+1,w
  8243  0908  00A4               	movwf	___ftpack@sign
  8244  0909  319F  279B         	fcall	___ftpack
  8245  090B  0020               	movlb	0	; select bank0
  8246  090C  0820               	movf	?___ftpack,w
  8247  090D  00C3               	movwf	?___ftadd
  8248  090E  0821               	movf	?___ftpack+1,w
  8249  090F  00C4               	movwf	?___ftadd+1
  8250  0910  0822               	movf	?___ftpack+2,w
  8251  0911  00C5               	movwf	?___ftadd+2
  8252  0912  0008               	return
  8253  0913                     __end_of___ftadd:	
  8254                           
  8255                           	psect	text25
  8256  1F9B                     __ptext25:	
  8257 ;; *************** function ___ftpack *****************
  8258 ;; Defined at:
  8259 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  arg             3    0[BANK0 ] unsigned um
  8262 ;;  exp             1    3[BANK0 ] unsigned char 
  8263 ;;  sign            1    4[BANK0 ] unsigned char 
  8264 ;; Auto vars:     Size  Location     Type
  8265 ;;		None
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  3    0[BANK0 ] float 
  8268 ;; Registers used:
  8269 ;;		wreg, status,2, status,0
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8275 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8277 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8278 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8279 ;;Total ram usage:        8 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; Hardware stack levels required when called:    2
  8282 ;; This function calls:
  8283 ;;		Nothing
  8284 ;; This function is called by:
  8285 ;;		___altoft
  8286 ;;		___awtoft
  8287 ;;		___ftadd
  8288 ;;		___ftdiv
  8289 ;;		___ftmul
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           
  8294                           ;psect for function ___ftpack
  8295  1F9B                     ___ftpack:	
  8296                           
  8297                           ;incstack = 0
  8298                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8299  1F9B  0020               	movlb	0	; select bank0
  8300  1F9C  0823               	movf	___ftpack@exp,w
  8301  1F9D  1903               	btfsc	3,2
  8302  1F9E  2FA4               	goto	l2299
  8303  1F9F  0822               	movf	___ftpack@arg+2,w
  8304  1FA0  0421               	iorwf	___ftpack@arg+1,w
  8305  1FA1  0420               	iorwf	___ftpack@arg,w
  8306  1FA2  1D03               	skipz
  8307  1FA3  2FB5               	goto	l2305
  8308  1FA4                     l2299:	
  8309  1FA4  3000               	movlw	0
  8310  1FA5  00A0               	movwf	?___ftpack
  8311  1FA6  3000               	movlw	0
  8312  1FA7  00A1               	movwf	?___ftpack+1
  8313  1FA8  3000               	movlw	0
  8314  1FA9  00A2               	movwf	?___ftpack+2
  8315  1FAA  0008               	return
  8316  1FAB                     l2303:	
  8317  1FAB  3001               	movlw	1
  8318  1FAC  00A5               	movwf	??___ftpack
  8319  1FAD  0825               	movf	??___ftpack,w
  8320  1FAE  07A3               	addwf	___ftpack@exp,f
  8321  1FAF  3001               	movlw	1
  8322  1FB0                     u1985:	
  8323  1FB0  36A2               	lsrf	___ftpack@arg+2,f
  8324  1FB1  0CA1               	rrf	___ftpack@arg+1,f
  8325  1FB2  0CA0               	rrf	___ftpack@arg,f
  8326  1FB3  0B89               	decfsz	9,f
  8327  1FB4  2FB0               	goto	u1985
  8328  1FB5                     l2305:	
  8329  1FB5  30FE               	movlw	254
  8330  1FB6  0522               	andwf	___ftpack@arg+2,w
  8331  1FB7  1903               	btfsc	3,2
  8332  1FB8  2FCE               	goto	l652
  8333  1FB9  2FAB               	goto	l2303
  8334  1FBA                     l2307:	
  8335  1FBA  3001               	movlw	1
  8336  1FBB  00A5               	movwf	??___ftpack
  8337  1FBC  0825               	movf	??___ftpack,w
  8338  1FBD  07A3               	addwf	___ftpack@exp,f
  8339  1FBE  3001               	movlw	1
  8340  1FBF  07A0               	addwf	___ftpack@arg,f
  8341  1FC0  3000               	movlw	0
  8342  1FC1  1803               	skipnc
  8343  1FC2  3001               	movlw	1
  8344  1FC3  07A1               	addwf	___ftpack@arg+1,f
  8345  1FC4  3000               	movlw	0
  8346  1FC5  1803               	skipnc
  8347  1FC6  3001               	movlw	1
  8348  1FC7  07A2               	addwf	___ftpack@arg+2,f
  8349  1FC8  3001               	movlw	1
  8350  1FC9                     u2005:	
  8351  1FC9  36A2               	lsrf	___ftpack@arg+2,f
  8352  1FCA  0CA1               	rrf	___ftpack@arg+1,f
  8353  1FCB  0CA0               	rrf	___ftpack@arg,f
  8354  1FCC  0B89               	decfsz	9,f
  8355  1FCD  2FC9               	goto	u2005
  8356  1FCE                     l652:	
  8357  1FCE  30FF               	movlw	255
  8358  1FCF  0522               	andwf	___ftpack@arg+2,w
  8359  1FD0  1903               	btfsc	3,2
  8360  1FD1  2FDB               	goto	l2315
  8361  1FD2  2FBA               	goto	l2307
  8362  1FD3                     l2313:	
  8363  1FD3  3001               	movlw	1
  8364  1FD4  02A3               	subwf	___ftpack@exp,f
  8365  1FD5  3001               	movlw	1
  8366  1FD6                     u2025:	
  8367  1FD6  35A0               	lslf	___ftpack@arg,f
  8368  1FD7  0DA1               	rlf	___ftpack@arg+1,f
  8369  1FD8  0DA2               	rlf	___ftpack@arg+2,f
  8370  1FD9  0B89               	decfsz	9,f
  8371  1FDA  2FD6               	goto	u2025
  8372  1FDB                     l2315:	
  8373  1FDB  1BA1               	btfsc	___ftpack@arg+1,7
  8374  1FDC  2FE1               	goto	l659
  8375  1FDD  3002               	movlw	2
  8376  1FDE  0223               	subwf	___ftpack@exp,w
  8377  1FDF  1803               	skipnc
  8378  1FE0  2FD3               	goto	l2313
  8379  1FE1                     l659:	
  8380  1FE1  1823               	btfsc	___ftpack@exp,0
  8381  1FE2  2FE9               	goto	l660
  8382  1FE3  30FF               	movlw	255
  8383  1FE4  05A0               	andwf	___ftpack@arg,f
  8384  1FE5  307F               	movlw	127
  8385  1FE6  05A1               	andwf	___ftpack@arg+1,f
  8386  1FE7  30FF               	movlw	255
  8387  1FE8  05A2               	andwf	___ftpack@arg+2,f
  8388  1FE9                     l660:	
  8389  1FE9  1003               	clrc
  8390  1FEA  0CA3               	rrf	___ftpack@exp,f
  8391  1FEB  0823               	movf	___ftpack@exp,w
  8392  1FEC  00A5               	movwf	??___ftpack
  8393  1FED  01A6               	clrf	??___ftpack+1
  8394  1FEE  01A7               	clrf	??___ftpack+2
  8395  1FEF  3010               	movlw	16
  8396  1FF0                     u2065:	
  8397  1FF0  35A5               	lslf	??___ftpack,f
  8398  1FF1  0DA6               	rlf	??___ftpack+1,f
  8399  1FF2  0DA7               	rlf	??___ftpack+2,f
  8400  1FF3  0B89               	decfsz	9,f
  8401  1FF4  2FF0               	goto	u2065
  8402  1FF5  0825               	movf	??___ftpack,w
  8403  1FF6  04A0               	iorwf	___ftpack@arg,f
  8404  1FF7  0826               	movf	??___ftpack+1,w
  8405  1FF8  04A1               	iorwf	___ftpack@arg+1,f
  8406  1FF9  0827               	movf	??___ftpack+2,w
  8407  1FFA  04A2               	iorwf	___ftpack@arg+2,f
  8408  1FFB  0824               	movf	___ftpack@sign,w
  8409  1FFC  1903               	btfsc	3,2
  8410  1FFD  0008               	return
  8411  1FFE  17A2               	bsf	___ftpack@arg+2,7
  8412  1FFF  0008               	return
  8413  2000                     __end_of___ftpack:	
  8414                           
  8415                           	psect	text26
  8416  19A3                     __ptext26:	
  8417 ;; *************** function _adc_convert *****************
  8418 ;; Defined at:
  8419 ;;		line 196 in file "user.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;  channel         1    wreg     unsigned char 
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;  channel         1    3[BANK0 ] unsigned char 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  2    0[BANK0 ] unsigned int 
  8426 ;; Registers used:
  8427 ;;		wreg, status,2, status,0
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8433 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8436 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8437 ;;Total ram usage:        4 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    2
  8440 ;; This function calls:
  8441 ;;		Nothing
  8442 ;; This function is called by:
  8443 ;;		_main
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           
  8448                           ;psect for function _adc_convert
  8449  19A3                     _adc_convert:	
  8450                           
  8451                           ;incstack = 0
  8452                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
  8453                           ;adc_convert@channel stored from wreg
  8454  19A3  0020               	movlb	0	; select bank0
  8455  19A4  00A3               	movwf	adc_convert@channel
  8456                           
  8457                           ;user.c: 197: ADCON0bits.CHS = channel;
  8458  19A5  0823               	movf	adc_convert@channel,w
  8459  19A6  00A2               	movwf	??_adc_convert
  8460  19A7  0DA2               	rlf	??_adc_convert,f
  8461  19A8  0DA2               	rlf	??_adc_convert,f
  8462  19A9  0021               	movlb	1	; select bank1
  8463  19AA  081D               	movf	29,w	;volatile
  8464  19AB  0020               	movlb	0	; select bank0
  8465  19AC  0622               	xorwf	??_adc_convert,w
  8466  19AD  3983               	andlw	-125
  8467  19AE  0622               	xorwf	??_adc_convert,w
  8468  19AF  0021               	movlb	1	; select bank1
  8469  19B0  009D               	movwf	29	;volatile
  8470                           
  8471                           ;user.c: 198: ADCON0bits.GO = 0b1;
  8472  19B1  149D               	bsf	29,1	;volatile
  8473  19B2                     l431:	
  8474                           ;user.c: 199: while (ADCON0bits.GO_nDONE);
  8475                           
  8476  19B2  189D               	btfsc	29,1	;volatile
  8477  19B3  29B2               	goto	l431
  8478                           
  8479                           ;user.c: 200: return (ADRESH << 8) | ADRESL;
  8480  19B4  081C               	movf	28,w	;volatile
  8481  19B5  0020               	movlb	0	; select bank0
  8482  19B6  00A1               	movwf	?_adc_convert+1
  8483  19B7  0021               	movlb	1	; select bank1
  8484  19B8  081B               	movf	27,w	;volatile
  8485  19B9  0020               	movlb	0	; select bank0
  8486  19BA  00A0               	movwf	?_adc_convert
  8487  19BB  0008               	return
  8488  19BC                     __end_of_adc_convert:	
  8489                           
  8490                           	psect	text27
  8491  1DDB                     __ptext27:	
  8492 ;; *************** function ___awdiv *****************
  8493 ;; Defined at:
  8494 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  divisor         2    0[BANK0 ] int 
  8497 ;;  dividend        2    2[BANK0 ] int 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  quotient        2    7[BANK0 ] int 
  8500 ;;  sign            1    6[BANK0 ] unsigned char 
  8501 ;;  counter         1    5[BANK0 ] unsigned char 
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  2    0[BANK0 ] int 
  8504 ;; Registers used:
  8505 ;;		wreg, status,2, status,0
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8511 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8512 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8514 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8515 ;;Total ram usage:        9 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:    2
  8518 ;; This function calls:
  8519 ;;		Nothing
  8520 ;; This function is called by:
  8521 ;;		_main
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           
  8526                           ;psect for function ___awdiv
  8527  1DDB                     ___awdiv:	
  8528                           
  8529                           ;incstack = 0
  8530                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8531  1DDB  0020               	movlb	0	; select bank0
  8532  1DDC  01A6               	clrf	___awdiv@sign
  8533  1DDD  1FA1               	btfss	___awdiv@divisor+1,7
  8534  1DDE  2DE6               	goto	l3039
  8535  1DDF  09A0               	comf	___awdiv@divisor,f
  8536  1DE0  09A1               	comf	___awdiv@divisor+1,f
  8537  1DE1  0AA0               	incf	___awdiv@divisor,f
  8538  1DE2  1903               	skipnz
  8539  1DE3  0AA1               	incf	___awdiv@divisor+1,f
  8540  1DE4  01A6               	clrf	___awdiv@sign
  8541  1DE5  0AA6               	incf	___awdiv@sign,f
  8542  1DE6                     l3039:	
  8543  1DE6  1FA3               	btfss	___awdiv@dividend+1,7
  8544  1DE7  2DF1               	goto	l3045
  8545  1DE8  09A2               	comf	___awdiv@dividend,f
  8546  1DE9  09A3               	comf	___awdiv@dividend+1,f
  8547  1DEA  0AA2               	incf	___awdiv@dividend,f
  8548  1DEB  1903               	skipnz
  8549  1DEC  0AA3               	incf	___awdiv@dividend+1,f
  8550  1DED  3001               	movlw	1
  8551  1DEE  00A4               	movwf	??___awdiv
  8552  1DEF  0824               	movf	??___awdiv,w
  8553  1DF0  06A6               	xorwf	___awdiv@sign,f
  8554  1DF1                     l3045:	
  8555  1DF1  01A7               	clrf	___awdiv@quotient
  8556  1DF2  01A8               	clrf	___awdiv@quotient+1
  8557  1DF3  0820               	movf	___awdiv@divisor,w
  8558  1DF4  0421               	iorwf	___awdiv@divisor+1,w
  8559  1DF5  1903               	btfsc	3,2
  8560  1DF6  2E20               	goto	l3067
  8561  1DF7  01A5               	clrf	___awdiv@counter
  8562  1DF8  0AA5               	incf	___awdiv@counter,f
  8563  1DF9                     l3055:	
  8564  1DF9  1BA1               	btfsc	___awdiv@divisor+1,7
  8565  1DFA  2E05               	goto	l3057
  8566  1DFB  3001               	movlw	1
  8567  1DFC                     u3135:	
  8568  1DFC  35A0               	lslf	___awdiv@divisor,f
  8569  1DFD  0DA1               	rlf	___awdiv@divisor+1,f
  8570  1DFE  0B89               	decfsz	9,f
  8571  1DFF  2DFC               	goto	u3135
  8572  1E00  3001               	movlw	1
  8573  1E01  00A4               	movwf	??___awdiv
  8574  1E02  0824               	movf	??___awdiv,w
  8575  1E03  07A5               	addwf	___awdiv@counter,f
  8576  1E04  2DF9               	goto	l3055
  8577  1E05                     l3057:	
  8578  1E05  3001               	movlw	1
  8579  1E06                     u3155:	
  8580  1E06  35A7               	lslf	___awdiv@quotient,f
  8581  1E07  0DA8               	rlf	___awdiv@quotient+1,f
  8582  1E08  0B89               	decfsz	9,f
  8583  1E09  2E06               	goto	u3155
  8584  1E0A  0821               	movf	___awdiv@divisor+1,w
  8585  1E0B  0223               	subwf	___awdiv@dividend+1,w
  8586  1E0C  1D03               	skipz
  8587  1E0D  2E10               	goto	u3165
  8588  1E0E  0820               	movf	___awdiv@divisor,w
  8589  1E0F  0222               	subwf	___awdiv@dividend,w
  8590  1E10                     u3165:	
  8591  1E10  1C03               	skipc
  8592  1E11  2E17               	goto	l3063
  8593  1E12  0820               	movf	___awdiv@divisor,w
  8594  1E13  02A2               	subwf	___awdiv@dividend,f
  8595  1E14  0821               	movf	___awdiv@divisor+1,w
  8596  1E15  3BA3               	subwfb	___awdiv@dividend+1,f
  8597  1E16  1427               	bsf	___awdiv@quotient,0
  8598  1E17                     l3063:	
  8599  1E17  3001               	movlw	1
  8600  1E18                     u3175:	
  8601  1E18  36A1               	lsrf	___awdiv@divisor+1,f
  8602  1E19  0CA0               	rrf	___awdiv@divisor,f
  8603  1E1A  0B89               	decfsz	9,f
  8604  1E1B  2E18               	goto	u3175
  8605  1E1C  3001               	movlw	1
  8606  1E1D  02A5               	subwf	___awdiv@counter,f
  8607  1E1E  1D03               	btfss	3,2
  8608  1E1F  2E05               	goto	l3057
  8609  1E20                     l3067:	
  8610  1E20  0826               	movf	___awdiv@sign,w
  8611  1E21  1903               	btfsc	3,2
  8612  1E22  2E28               	goto	l3071
  8613  1E23  09A7               	comf	___awdiv@quotient,f
  8614  1E24  09A8               	comf	___awdiv@quotient+1,f
  8615  1E25  0AA7               	incf	___awdiv@quotient,f
  8616  1E26  1903               	skipnz
  8617  1E27  0AA8               	incf	___awdiv@quotient+1,f
  8618  1E28                     l3071:	
  8619  1E28  0828               	movf	___awdiv@quotient+1,w
  8620  1E29  00A1               	movwf	?___awdiv+1
  8621  1E2A  0827               	movf	___awdiv@quotient,w
  8622  1E2B  00A0               	movwf	?___awdiv
  8623  1E2C  0008               	return
  8624  1E2D                     __end_of___awdiv:	
  8625                           
  8626                           	psect	text28
  8627  1A4C                     __ptext28:	
  8628 ;; *************** function _InitApp *****************
  8629 ;; Defined at:
  8630 ;;		line 21 in file "user.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;		None
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;		None
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  1    wreg      void 
  8637 ;; Registers used:
  8638 ;;		wreg, status,2, status,0, pclath, cstack
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8648 ;;Total ram usage:        0 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    4
  8651 ;; This function calls:
  8652 ;;		_init_adc
  8653 ;;		_init_pwm
  8654 ;; This function is called by:
  8655 ;;		_main
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           
  8660                           ;psect for function _InitApp
  8661  1A4C                     _InitApp:	
  8662                           
  8663                           ;user.c: 22: TRISBbits.TRISB0 = 1;
  8664                           
  8665                           ;incstack = 0
  8666                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  8667  1A4C  0021               	movlb	1	; select bank1
  8668  1A4D  140D               	bsf	13,0	;volatile
  8669                           
  8670                           ;user.c: 23: TRISBbits.TRISB1 = 0;
  8671  1A4E  108D               	bcf	13,1	;volatile
  8672                           
  8673                           ;user.c: 24: TRISBbits.TRISB2 = 1;
  8674  1A4F  150D               	bsf	13,2	;volatile
  8675                           
  8676                           ;user.c: 25: TRISBbits.TRISB3 = 1;
  8677  1A50  158D               	bsf	13,3	;volatile
  8678                           
  8679                           ;user.c: 26: TRISBbits.TRISB4 = 0;
  8680  1A51  120D               	bcf	13,4	;volatile
  8681                           
  8682                           ;user.c: 27: TRISBbits.TRISB5 = 0;
  8683  1A52  128D               	bcf	13,5	;volatile
  8684                           
  8685                           ;user.c: 28: ANSELBbits.ANSB0 = 0;
  8686  1A53  0023               	movlb	3	; select bank3
  8687  1A54  100D               	bcf	13,0	;volatile
  8688                           
  8689                           ;user.c: 29: ANSELBbits.ANSB2 = 0;
  8690  1A55  110D               	bcf	13,2	;volatile
  8691                           
  8692                           ;user.c: 30: ANSELBbits.ANSB3 = 0;
  8693  1A56  118D               	bcf	13,3	;volatile
  8694                           
  8695                           ;user.c: 32: TRISCbits.TRISC6 = 0;
  8696  1A57  0021               	movlb	1	; select bank1
  8697  1A58  130E               	bcf	14,6	;volatile
  8698                           
  8699                           ;user.c: 33: TRISCbits.TRISC7 = 0;
  8700  1A59  138E               	bcf	14,7	;volatile
  8701                           
  8702                           ;user.c: 35: TRISDbits.TRISD0 = 0;
  8703  1A5A  100F               	bcf	15,0	;volatile
  8704                           
  8705                           ;user.c: 36: TRISDbits.TRISD1 = 0;
  8706  1A5B  108F               	bcf	15,1	;volatile
  8707                           
  8708                           ;user.c: 37: TRISDbits.TRISD2 = 0;
  8709  1A5C  110F               	bcf	15,2	;volatile
  8710                           
  8711                           ;user.c: 38: TRISDbits.TRISD3 = 0;
  8712  1A5D  118F               	bcf	15,3	;volatile
  8713                           
  8714                           ;user.c: 39: TRISDbits.TRISD4 = 0;
  8715  1A5E  120F               	bcf	15,4	;volatile
  8716                           
  8717                           ;user.c: 40: TRISDbits.TRISD5 = 1;
  8718  1A5F  168F               	bsf	15,5	;volatile
  8719                           
  8720                           ;user.c: 41: TRISDbits.TRISD5 = 1;
  8721  1A60  168F               	bsf	15,5	;volatile
  8722                           
  8723                           ;user.c: 43: TRISEbits.TRISE0 = 1;
  8724  1A61  1410               	bsf	16,0	;volatile
  8725                           
  8726                           ;user.c: 44: TRISEbits.TRISE1 = 1;
  8727  1A62  1490               	bsf	16,1	;volatile
  8728                           
  8729                           ;user.c: 45: ANSELEbits.ANSE0 = 0;
  8730  1A63  0023               	movlb	3	; select bank3
  8731  1A64  1010               	bcf	16,0	;volatile
  8732                           
  8733                           ;user.c: 46: ANSELEbits.ANSE1 = 0;
  8734  1A65  1090               	bcf	16,1	;volatile
  8735                           
  8736                           ;user.c: 47: PORTEbits.RE0 = 0;
  8737  1A66  0020               	movlb	0	; select bank0
  8738  1A67  1010               	bcf	16,0	;volatile
  8739                           
  8740                           ;user.c: 48: PORTEbits.RE1 = 0;
  8741  1A68  1090               	bcf	16,1	;volatile
  8742                           
  8743                           ;user.c: 50: TRISFbits.TRISF0 = 0;
  8744  1A69  0026               	movlb	6	; select bank6
  8745  1A6A  100C               	bcf	12,0	;volatile
  8746                           
  8747                           ;user.c: 51: TRISFbits.TRISF1 = 0;
  8748  1A6B  108C               	bcf	12,1	;volatile
  8749                           
  8750                           ;user.c: 52: TRISFbits.TRISF2 = 0;
  8751  1A6C  110C               	bcf	12,2	;volatile
  8752                           
  8753                           ;user.c: 53: TRISFbits.TRISF3 = 0;
  8754  1A6D  118C               	bcf	12,3	;volatile
  8755                           
  8756                           ;user.c: 54: TRISFbits.TRISF4 = 0;
  8757  1A6E  120C               	bcf	12,4	;volatile
  8758                           
  8759                           ;user.c: 55: TRISFbits.TRISF5 = 0;
  8760  1A6F  128C               	bcf	12,5	;volatile
  8761                           
  8762                           ;user.c: 56: TRISFbits.TRISF6 = 0;
  8763  1A70  130C               	bcf	12,6	;volatile
  8764                           
  8765                           ;user.c: 58: TRISGbits.TRISG1 = 0;
  8766  1A71  108D               	bcf	13,1	;volatile
  8767                           
  8768                           ;user.c: 59: TRISGbits.TRISG2 = 0;
  8769  1A72  110D               	bcf	13,2	;volatile
  8770                           
  8771                           ;user.c: 61: init_adc();
  8772  1A73  3199  215D  319A   	fcall	_init_adc
  8773                           
  8774                           ;user.c: 62: init_pwm();
  8775  1A76  319C  24B4         	fcall	_init_pwm
  8776                           
  8777                           ;user.c: 64: INTCONbits.GIE = 0b1;
  8778  1A78  178B               	bsf	11,7	;volatile
  8779                           
  8780                           ;user.c: 65: INTCONbits.TMR0IE = 0b1;
  8781  1A79  168B               	bsf	11,5	;volatile
  8782                           
  8783                           ;user.c: 66: INTCONbits.TMR0IF = 0b0;
  8784  1A7A  110B               	bcf	11,2	;volatile
  8785  1A7B  0008               	return
  8786  1A7C                     __end_of_InitApp:	
  8787                           
  8788                           	psect	text29
  8789  1CB4                     __ptext29:	
  8790 ;; *************** function _init_pwm *****************
  8791 ;; Defined at:
  8792 ;;		line 203 in file "user.c"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;		None
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;		None
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  1    wreg      void 
  8799 ;; Registers used:
  8800 ;;		wreg, status,2, status,0, pclath, cstack
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8810 ;;Total ram usage:        0 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; Hardware stack levels required when called:    3
  8813 ;; This function calls:
  8814 ;;		_init_timer0
  8815 ;;		_init_timer2
  8816 ;; This function is called by:
  8817 ;;		_InitApp
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           
  8822                           ;psect for function _init_pwm
  8823  1CB4                     _init_pwm:	
  8824                           
  8825                           ;user.c: 204: APFCONbits.CCP2SEL = 0;
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
  8829  1CB4  0022               	movlb	2	; select bank2
  8830  1CB5  101D               	bcf	29,0	;volatile
  8831                           
  8832                           ;user.c: 205: TRISCbits.TRISC2 = 0;
  8833  1CB6  0021               	movlb	1	; select bank1
  8834  1CB7  110E               	bcf	14,2	;volatile
  8835                           
  8836                           ;user.c: 206: TRISCbits.TRISC1 = 0;
  8837  1CB8  108E               	bcf	14,1	;volatile
  8838                           
  8839                           ;user.c: 207: TRISGbits.TRISG0 = 0;
  8840  1CB9  0026               	movlb	6	; select bank6
  8841  1CBA  100D               	bcf	13,0	;volatile
  8842                           
  8843                           ;user.c: 208: TRISGbits.TRISG3 = 0;
  8844  1CBB  118D               	bcf	13,3	;volatile
  8845                           
  8846                           ;user.c: 209: TRISGbits.TRISG4 = 0;
  8847  1CBC  120D               	bcf	13,4	;volatile
  8848                           
  8849                           ;user.c: 210: TRISEbits.TRISE6 = 0;
  8850  1CBD  0021               	movlb	1	; select bank1
  8851  1CBE  1310               	bcf	16,6	;volatile
  8852                           
  8853                           ;user.c: 211: TRISEbits.TRISE5 = 0;
  8854  1CBF  1290               	bcf	16,5	;volatile
  8855                           
  8856                           ;user.c: 212: TRISEbits.TRISE4 = 0;
  8857  1CC0  1210               	bcf	16,4	;volatile
  8858                           
  8859                           ;user.c: 213: TRISEbits.TRISE3 = 0;
  8860  1CC1  1190               	bcf	16,3	;volatile
  8861                           
  8862                           ;user.c: 214: TRISEbits.TRISE2 = 0;
  8863  1CC2  1110               	bcf	16,2	;volatile
  8864                           
  8865                           ;user.c: 215: CCP1CONbits.CCP1M = 0b1111;
  8866  1CC3  300F               	movlw	15
  8867  1CC4  0025               	movlb	5	; select bank5
  8868  1CC5  0493               	iorwf	19,f	;volatile
  8869                           
  8870                           ;user.c: 216: CCP2CONbits.CCP2M = 0b1111;
  8871  1CC6  300F               	movlw	15
  8872  1CC7  049A               	iorwf	26,f	;volatile
  8873                           
  8874                           ;user.c: 217: CCP3CONbits.CCP3M = 0b1111;
  8875  1CC8  300F               	movlw	15
  8876  1CC9  0026               	movlb	6	; select bank6
  8877  1CCA  0493               	iorwf	19,f	;volatile
  8878                           
  8879                           ;user.c: 218: CCP4CONbits.CCP4M = 0b1111;
  8880  1CCB  300F               	movlw	15
  8881  1CCC  049A               	iorwf	26,f	;volatile
  8882                           
  8883                           ;user.c: 219: CCP5CONbits.CCP5M = 0b1111;
  8884  1CCD  300F               	movlw	15
  8885  1CCE  049E               	iorwf	30,f	;volatile
  8886                           
  8887                           ;user.c: 220: CCP6CONbits.CCP6M = 0b1111;
  8888  1CCF  300F               	movlw	15
  8889  1CD0  002C               	movlb	12	; select bank12
  8890  1CD1  0493               	iorwf	19,f	;volatile
  8891                           
  8892                           ;user.c: 221: CCP7CONbits.CCP7M = 0b1111;
  8893  1CD2  300F               	movlw	15
  8894  1CD3  0496               	iorwf	22,f	;volatile
  8895                           
  8896                           ;user.c: 222: CCP8CONbits.CCP8M = 0b1111;
  8897  1CD4  300F               	movlw	15
  8898  1CD5  0499               	iorwf	25,f	;volatile
  8899                           
  8900                           ;user.c: 223: CCP9CONbits.CCP9M = 0b1111;
  8901  1CD6  300F               	movlw	15
  8902  1CD7  049C               	iorwf	28,f	;volatile
  8903                           
  8904                           ;user.c: 224: CCP10CONbits.CCP10M = 0b1111;
  8905  1CD8  300F               	movlw	15
  8906  1CD9  049F               	iorwf	31,f	;volatile
  8907                           
  8908                           ;user.c: 225: CCPTMRS0 = 0b00000000;
  8909  1CDA  0025               	movlb	5	; select bank5
  8910  1CDB  019D               	clrf	29	;volatile
  8911                           
  8912                           ;user.c: 226: CCPTMRS1 = 0b00000000;
  8913  1CDC  019E               	clrf	30	;volatile
  8914                           
  8915                           ;user.c: 227: CCPTMRS2 = 0b00000000;
  8916  1CDD  019F               	clrf	31	;volatile
  8917                           
  8918                           ;user.c: 228: CCPR1 = 50;
  8919  1CDE  3000               	movlw	0
  8920  1CDF  0092               	movwf	18	;volatile
  8921  1CE0  3032               	movlw	50
  8922  1CE1  0091               	movwf	17	;volatile
  8923                           
  8924                           ;user.c: 229: CCPR2 = 100;
  8925  1CE2  3000               	movlw	0
  8926  1CE3  0099               	movwf	25	;volatile
  8927  1CE4  3064               	movlw	100
  8928  1CE5  0098               	movwf	24	;volatile
  8929                           
  8930                           ;user.c: 230: CCPR3 = 150;
  8931  1CE6  3000               	movlw	0
  8932  1CE7  0026               	movlb	6	; select bank6
  8933  1CE8  0092               	movwf	18	;volatile
  8934  1CE9  3096               	movlw	150
  8935  1CEA  0091               	movwf	17	;volatile
  8936                           
  8937                           ;user.c: 231: CCPR4 = 200;
  8938  1CEB  3000               	movlw	0
  8939  1CEC  0099               	movwf	25	;volatile
  8940  1CED  30C8               	movlw	200
  8941  1CEE  0098               	movwf	24	;volatile
  8942                           
  8943                           ;user.c: 232: init_timer2();
  8944  1CEF  3199  214B  319C   	fcall	_init_timer2
  8945                           
  8946                           ;user.c: 233: init_timer0();
  8947  1CF2  3199  2144         	fcall	_init_timer0
  8948  1CF4  0008               	return
  8949  1CF5                     __end_of_init_pwm:	
  8950                           
  8951                           	psect	text30
  8952  194B                     __ptext30:	
  8953 ;; *************** function _init_timer2 *****************
  8954 ;; Defined at:
  8955 ;;		line 236 in file "user.c"
  8956 ;; Parameters:    Size  Location     Type
  8957 ;;		None
  8958 ;; Auto vars:     Size  Location     Type
  8959 ;;		None
  8960 ;; Return value:  Size  Location     Type
  8961 ;;                  1    wreg      void 
  8962 ;; Registers used:
  8963 ;;		wreg, status,2, status,0
  8964 ;; Tracked objects:
  8965 ;;		On entry : 0/0
  8966 ;;		On exit  : 0/0
  8967 ;;		Unchanged: 0/0
  8968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8973 ;;Total ram usage:        0 bytes
  8974 ;; Hardware stack levels used:    1
  8975 ;; Hardware stack levels required when called:    2
  8976 ;; This function calls:
  8977 ;;		Nothing
  8978 ;; This function is called by:
  8979 ;;		_init_pwm
  8980 ;; This function uses a non-reentrant model
  8981 ;;
  8982                           
  8983                           
  8984                           ;psect for function _init_timer2
  8985  194B                     _init_timer2:	
  8986                           
  8987                           ;user.c: 237: T2CONbits.T2OUTPS = 0b0000;
  8988                           
  8989                           ;incstack = 0
  8990                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
  8991  194B  3087               	movlw	-121
  8992  194C  0020               	movlb	0	; select bank0
  8993  194D  059C               	andwf	28,f	;volatile
  8994                           
  8995                           ;user.c: 238: T2CONbits.T2CKPS = 0b00;
  8996  194E  30FC               	movlw	-4
  8997  194F  059C               	andwf	28,f	;volatile
  8998                           
  8999                           ;user.c: 239: PR2 = 0xFF;
  9000  1950  30FF               	movlw	255
  9001  1951  009B               	movwf	27	;volatile
  9002                           
  9003                           ;user.c: 240: T2CONbits.TMR2ON = 1;
  9004  1952  151C               	bsf	28,2	;volatile
  9005  1953  0008               	return
  9006  1954                     __end_of_init_timer2:	
  9007                           
  9008                           	psect	text31
  9009  1944                     __ptext31:	
  9010 ;; *************** function _init_timer0 *****************
  9011 ;; Defined at:
  9012 ;;		line 243 in file "user.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;		None
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;		None
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  1    wreg      void 
  9019 ;; Registers used:
  9020 ;;		None
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9030 ;;Total ram usage:        0 bytes
  9031 ;; Hardware stack levels used:    1
  9032 ;; Hardware stack levels required when called:    2
  9033 ;; This function calls:
  9034 ;;		Nothing
  9035 ;; This function is called by:
  9036 ;;		_init_pwm
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           
  9041                           ;psect for function _init_timer0
  9042  1944                     _init_timer0:	
  9043                           
  9044                           ;user.c: 244: OPTION_REGbits.TMR0CS = 0b0;
  9045                           
  9046                           ;incstack = 0
  9047                           ; Regs used in _init_timer0: []
  9048  1944  0021               	movlb	1	; select bank1
  9049  1945  1295               	bcf	21,5	;volatile
  9050                           
  9051                           ;user.c: 245: OPTION_REGbits.PSA = 0b0;
  9052  1946  1195               	bcf	21,3	;volatile
  9053                           
  9054                           ;user.c: 246: OPTION_REGbits.PS0 = 0b0;
  9055  1947  1015               	bcf	21,0	;volatile
  9056                           
  9057                           ;user.c: 247: OPTION_REGbits.PS1 = 0b1;
  9058  1948  1495               	bsf	21,1	;volatile
  9059                           
  9060                           ;user.c: 248: OPTION_REGbits.PS2 = 0b0;
  9061  1949  1115               	bcf	21,2	;volatile
  9062  194A  0008               	return
  9063  194B                     __end_of_init_timer0:	
  9064                           
  9065                           	psect	text32
  9066  195D                     __ptext32:	
  9067 ;; *************** function _init_adc *****************
  9068 ;; Defined at:
  9069 ;;		line 189 in file "user.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;		None
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;		None
  9074 ;; Return value:  Size  Location     Type
  9075 ;;                  1    wreg      void 
  9076 ;; Registers used:
  9077 ;;		wreg, status,2, status,0
  9078 ;; Tracked objects:
  9079 ;;		On entry : 0/0
  9080 ;;		On exit  : 0/0
  9081 ;;		Unchanged: 0/0
  9082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9087 ;;Total ram usage:        0 bytes
  9088 ;; Hardware stack levels used:    1
  9089 ;; Hardware stack levels required when called:    2
  9090 ;; This function calls:
  9091 ;;		Nothing
  9092 ;; This function is called by:
  9093 ;;		_InitApp
  9094 ;; This function uses a non-reentrant model
  9095 ;;
  9096                           
  9097                           
  9098                           ;psect for function _init_adc
  9099  195D                     _init_adc:	
  9100                           
  9101                           ;user.c: 190: ADCON1bits.ADFM = 0b1;
  9102                           
  9103                           ;incstack = 0
  9104                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  9105  195D  0021               	movlb	1	; select bank1
  9106  195E  179E               	bsf	30,7	;volatile
  9107                           
  9108                           ;user.c: 191: ADCON1bits.ADCS = 0b110;
  9109  195F  081E               	movf	30,w	;volatile
  9110  1960  398F               	andlw	-113
  9111  1961  3860               	iorlw	96
  9112  1962  009E               	movwf	30	;volatile
  9113                           
  9114                           ;user.c: 192: ADCON1bits.ADPREF = 0b00;
  9115  1963  30FC               	movlw	-4
  9116  1964  059E               	andwf	30,f	;volatile
  9117                           
  9118                           ;user.c: 193: ADCON0bits.ADON = 0b1;
  9119  1965  141D               	bsf	29,0	;volatile
  9120  1966  0008               	return
  9121  1967                     __end_of_init_adc:	
  9122                           
  9123                           	psect	text33
  9124  1000                     __ptext33:	
  9125 ;; *************** function _FLASH_WriteWord *****************
  9126 ;; Defined at:
  9127 ;;		line 74 in file "memory.c"
  9128 ;; Parameters:    Size  Location     Type
  9129 ;;  flashAddr       2   13[BANK0 ] unsigned int 
  9130 ;;  ramBuf          1   15[BANK0 ] PTR unsigned int 
  9131 ;;		 -> myBuf(64), 
  9132 ;;  word            2   16[BANK0 ] unsigned int 
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;  blockStartAd    2   20[BANK0 ] unsigned int 
  9135 ;;  i               1   22[BANK0 ] unsigned char 
  9136 ;;  offset          1   19[BANK0 ] unsigned char 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      void 
  9139 ;; Registers used:
  9140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9146 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9147 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9149 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9150 ;;Total ram usage:       10 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    4
  9153 ;; This function calls:
  9154 ;;		_FLASH_ReadWord
  9155 ;;		_FLASH_WriteBlock
  9156 ;; This function is called by:
  9157 ;;		_main
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           
  9162                           ;psect for function _FLASH_WriteWord
  9163  1000                     _FLASH_WriteWord:	
  9164                           
  9165                           ;memory.c: 75: uint16_t blockStartAddr = (uint16_t) (flashAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
  9166                           
  9167                           ;incstack = 0
  9168                           ; Regs used in _FLASH_WriteWord: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9169  1000  30E0               	movlw	224
  9170  1001  0020               	movlb	0	; select bank0
  9171  1002  052D               	andwf	FLASH_WriteWord@flashAddr,w
  9172  1003  00B4               	movwf	FLASH_WriteWord@blockStartAddr
  9173  1004  303F               	movlw	63
  9174  1005  052E               	andwf	FLASH_WriteWord@flashAddr+1,w
  9175  1006  00B5               	movwf	FLASH_WriteWord@blockStartAddr+1
  9176                           
  9177                           ;memory.c: 76: uint8_t offset = (uint8_t) (flashAddr & (32 - 1));
  9178  1007  082D               	movf	FLASH_WriteWord@flashAddr,w
  9179  1008  391F               	andlw	31
  9180  1009  00B2               	movwf	??_FLASH_WriteWord
  9181  100A  0832               	movf	??_FLASH_WriteWord,w
  9182  100B  00B3               	movwf	FLASH_WriteWord@offset
  9183                           
  9184                           ;memory.c: 77: uint8_t i;
  9185                           ;memory.c: 80: for (i = 0; i < 32; i++) {
  9186  100C  01B6               	clrf	FLASH_WriteWord@i
  9187  100D  3020               	movlw	32
  9188  100E  0236               	subwf	FLASH_WriteWord@i,w
  9189  100F  1803               	btfsc	3,0
  9190  1010  282F               	goto	l2947
  9191  1011                     l2941:	
  9192                           
  9193                           ;memory.c: 81: ramBuf[i] = FLASH_ReadWord((blockStartAddr + i));
  9194  1011  0836               	movf	FLASH_WriteWord@i,w
  9195  1012  0734               	addwf	FLASH_WriteWord@blockStartAddr,w
  9196  1013  00A0               	movwf	FLASH_ReadWord@flashAddr
  9197  1014  0835               	movf	FLASH_WriteWord@blockStartAddr+1,w
  9198  1015  1803               	skipnc
  9199  1016  0A35               	incf	FLASH_WriteWord@blockStartAddr+1,w
  9200  1017  00A1               	movwf	FLASH_ReadWord@flashAddr+1
  9201  1018  3199  21BC  3190   	fcall	_FLASH_ReadWord
  9202  101B  0020               	movlb	0	; select bank0
  9203  101C  3536               	lslf	FLASH_WriteWord@i,w
  9204  101D  072F               	addwf	FLASH_WriteWord@ramBuf,w
  9205  101E  00B2               	movwf	??_FLASH_WriteWord
  9206  101F  0832               	movf	??_FLASH_WriteWord,w
  9207  1020  0086               	movwf	6
  9208  1021  3003               	movlw	3	; select bank6/7
  9209  1022  0087               	movwf	7
  9210  1023  0820               	movf	?_FLASH_ReadWord,w
  9211  1024  3FC0               	movwi [0]fsr1
  9212  1025  0821               	movf	?_FLASH_ReadWord+1,w
  9213  1026  3FC1               	movwi [1]fsr1
  9214  1027  3001               	movlw	1
  9215  1028  00B2               	movwf	??_FLASH_WriteWord
  9216  1029  0832               	movf	??_FLASH_WriteWord,w
  9217  102A  07B6               	addwf	FLASH_WriteWord@i,f
  9218  102B  3020               	movlw	32
  9219  102C  0236               	subwf	FLASH_WriteWord@i,w
  9220  102D  1C03               	skipc
  9221  102E  2811               	goto	l2941
  9222  102F                     l2947:	
  9223                           
  9224                           ;memory.c: 82: }
  9225                           ;memory.c: 85: ramBuf[offset] = word;
  9226  102F  3533               	lslf	FLASH_WriteWord@offset,w
  9227  1030  072F               	addwf	FLASH_WriteWord@ramBuf,w
  9228  1031  00B2               	movwf	??_FLASH_WriteWord
  9229  1032  0832               	movf	??_FLASH_WriteWord,w
  9230  1033  0086               	movwf	6
  9231  1034  3003               	movlw	3	; select bank6/7
  9232  1035  0087               	movwf	7
  9233  1036  0830               	movf	FLASH_WriteWord@word,w
  9234  1037  3FC0               	movwi [0]fsr1
  9235  1038  0831               	movf	FLASH_WriteWord@word+1,w
  9236  1039  3FC1               	movwi [1]fsr1
  9237                           
  9238                           ;memory.c: 88: FLASH_WriteBlock(blockStartAddr, ramBuf);
  9239  103A  0835               	movf	FLASH_WriteWord@blockStartAddr+1,w
  9240  103B  00A4               	movwf	FLASH_WriteBlock@writeAddr+1
  9241  103C  0834               	movf	FLASH_WriteWord@blockStartAddr,w
  9242  103D  00A3               	movwf	FLASH_WriteBlock@writeAddr
  9243  103E  082F               	movf	FLASH_WriteWord@ramBuf,w
  9244  103F  00B2               	movwf	??_FLASH_WriteWord
  9245  1040  0832               	movf	??_FLASH_WriteWord,w
  9246  1041  00A5               	movwf	FLASH_WriteBlock@flashWordArray
  9247  1042  3190  2045         	fcall	_FLASH_WriteBlock
  9248  1044  0008               	return
  9249  1045                     __end_of_FLASH_WriteWord:	
  9250                           
  9251                           	psect	text34
  9252  1045                     __ptext34:	
  9253 ;; *************** function _FLASH_WriteBlock *****************
  9254 ;; Defined at:
  9255 ;;		line 91 in file "memory.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;  writeAddr       2    3[BANK0 ] unsigned int 
  9258 ;;  flashWordArr    1    5[BANK0 ] PTR unsigned int 
  9259 ;;		 -> myBuf(64), 
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;  blockStartAd    2    9[BANK0 ] unsigned int 
  9262 ;;  i               1   12[BANK0 ] unsigned char 
  9263 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  1    wreg      char 
  9266 ;; Registers used:
  9267 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9273 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9274 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9275 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9276 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9277 ;;Total ram usage:       10 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    3
  9280 ;; This function calls:
  9281 ;;		_FLASH_EraseBlock
  9282 ;; This function is called by:
  9283 ;;		_FLASH_WriteWord
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           
  9288                           ;psect for function _FLASH_WriteBlock
  9289  1045                     _FLASH_WriteBlock:	
  9290                           
  9291                           ;memory.c: 92: uint16_t blockStartAddr = (uint16_t) (writeAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
  9292                           
  9293                           ;incstack = 0
  9294                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9295  1045  30E0               	movlw	224
  9296  1046  0020               	movlb	0	; select bank0
  9297  1047  0523               	andwf	FLASH_WriteBlock@writeAddr,w
  9298  1048  00A9               	movwf	FLASH_WriteBlock@blockStartAddr
  9299  1049  303F               	movlw	63
  9300  104A  0524               	andwf	FLASH_WriteBlock@writeAddr+1,w
  9301  104B  00AA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  9302                           
  9303                           ;memory.c: 93: uint8_t GIEBitValue = INTCONbits.GIE;
  9304  104C  3000               	movlw	0
  9305  104D  1B8B               	btfsc	11,7	;volatile
  9306  104E  3001               	movlw	1
  9307  104F  00AB               	movwf	FLASH_WriteBlock@GIEBitValue
  9308                           
  9309                           ;memory.c: 94: uint8_t i;
  9310                           ;memory.c: 97: if (writeAddr != blockStartAddr) {
  9311  1050  082A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  9312  1051  0624               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  9313  1052  1D03               	skipz
  9314  1053  2856               	goto	u2645
  9315  1054  0829               	movf	FLASH_WriteBlock@blockStartAddr,w
  9316  1055  0623               	xorwf	FLASH_WriteBlock@writeAddr,w
  9317  1056                     u2645:	
  9318  1056  1D03               	btfss	3,2
  9319  1057  0008               	return
  9320                           
  9321                           ;memory.c: 99: }
  9322                           ;memory.c: 101: INTCONbits.GIE = 0;
  9323                           
  9324                           ;memory.c: 98: return -1;
  9325                           ;	Return value of _FLASH_WriteBlock is never used
  9326  1058  138B               	bcf	11,7	;volatile
  9327                           
  9328                           ;memory.c: 104: FLASH_EraseBlock(writeAddr);
  9329  1059  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
  9330  105A  00A1               	movwf	FLASH_EraseBlock@startAddr+1
  9331  105B  0823               	movf	FLASH_WriteBlock@writeAddr,w
  9332  105C  00A0               	movwf	FLASH_EraseBlock@startAddr
  9333  105D  3199  21DC  3190   	fcall	_FLASH_EraseBlock
  9334                           
  9335                           ;memory.c: 107: PMCON1bits.CFGS = 0;
  9336  1060  0023               	movlb	3	; select bank3
  9337  1061  1315               	bcf	21,6	;volatile
  9338                           
  9339                           ;memory.c: 108: PMCON1bits.WREN = 1;
  9340  1062  1515               	bsf	21,2	;volatile
  9341                           
  9342                           ;memory.c: 109: PMCON1bits.LWLO = 1;
  9343  1063  1695               	bsf	21,5	;volatile
  9344                           
  9345                           ;memory.c: 111: for (i = 0; i < 32; i++) {
  9346  1064  0020               	movlb	0	; select bank0
  9347  1065  01AC               	clrf	FLASH_WriteBlock@i
  9348  1066  3020               	movlw	32
  9349  1067  022C               	subwf	FLASH_WriteBlock@i,w
  9350  1068  1803               	btfsc	3,0
  9351  1069  28A7               	goto	l483
  9352  106A                     l2659:	
  9353                           
  9354                           ;memory.c: 113: PMADRL = (writeAddr & 0xFF);
  9355  106A  0823               	movf	FLASH_WriteBlock@writeAddr,w
  9356  106B  0023               	movlb	3	; select bank3
  9357  106C  0091               	movwf	17	;volatile
  9358                           
  9359                           ;memory.c: 115: PMADRH = ((writeAddr & 0xFF00) >> 8);
  9360  106D  0020               	movlb	0	; select bank0
  9361  106E  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
  9362  106F  0023               	movlb	3	; select bank3
  9363  1070  0092               	movwf	18	;volatile
  9364                           
  9365                           ;memory.c: 118: PMDATL = flashWordArray[i];
  9366  1071  0020               	movlb	0	; select bank0
  9367  1072  352C               	lslf	FLASH_WriteBlock@i,w
  9368  1073  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
  9369  1074  00A6               	movwf	??_FLASH_WriteBlock
  9370  1075  0826               	movf	??_FLASH_WriteBlock,w
  9371  1076  0086               	movwf	6
  9372  1077  3003               	movlw	3	; select bank6/7
  9373  1078  0087               	movwf	7
  9374  1079  0801               	movf	1,w
  9375  107A  0023               	movlb	3	; select bank3
  9376  107B  0093               	movwf	19	;volatile
  9377                           
  9378                           ;memory.c: 119: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
  9379  107C  0020               	movlb	0	; select bank0
  9380  107D  352C               	lslf	FLASH_WriteBlock@i,w
  9381  107E  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
  9382  107F  00A6               	movwf	??_FLASH_WriteBlock
  9383  1080  0826               	movf	??_FLASH_WriteBlock,w
  9384  1081  0086               	movwf	6
  9385  1082  3003               	movlw	3	; select bank6/7
  9386  1083  0087               	movwf	7
  9387  1084  3F40               	moviw [0]fsr1
  9388  1085  00A7               	movwf	??_FLASH_WriteBlock+1
  9389  1086  3F41               	moviw [1]fsr1
  9390  1087  00A8               	movwf	??_FLASH_WriteBlock+2
  9391  1088  0828               	movf	??_FLASH_WriteBlock+2,w
  9392  1089  0023               	movlb	3	; select bank3
  9393  108A  0094               	movwf	20	;volatile
  9394                           
  9395                           ;memory.c: 121: if (i == (32 - 1)) {
  9396  108B  301F               	movlw	31
  9397  108C  0020               	movlb	0	; select bank0
  9398  108D  062C               	xorwf	FLASH_WriteBlock@i,w
  9399  108E  1D03               	btfss	3,2
  9400  108F  2892               	goto	l2671
  9401                           
  9402                           ;memory.c: 123: PMCON1bits.LWLO = 0;
  9403  1090  0023               	movlb	3	; select bank3
  9404  1091  1295               	bcf	21,5	;volatile
  9405  1092                     l2671:	
  9406                           
  9407                           ;memory.c: 124: }
  9408                           ;memory.c: 126: PMCON2 = 0x55;
  9409  1092  3055               	movlw	85
  9410  1093  0023               	movlb	3	; select bank3
  9411  1094  0096               	movwf	22	;volsfr
  9412                           
  9413                           ;memory.c: 127: PMCON2 = 0xAA;
  9414  1095  30AA               	movlw	170
  9415  1096  0096               	movwf	22	;volsfr
  9416                           
  9417                           ;memory.c: 128: PMCON1bits.WR = 1;
  9418  1097  1495               	bsf	21,1	;volatile
  9419                           
  9420                           ;memory.c: 129: __nop();
  9421  1098  0000               	nop
  9422                           
  9423                           ;memory.c: 130: __nop();
  9424  1099  0000               	nop
  9425                           
  9426                           ;memory.c: 132: writeAddr++;
  9427  109A  3001               	movlw	1
  9428  109B  0020               	movlb	0	; select bank0
  9429  109C  07A3               	addwf	FLASH_WriteBlock@writeAddr,f
  9430  109D  3000               	movlw	0
  9431  109E  3DA4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  9432  109F  3001               	movlw	1
  9433  10A0  00A6               	movwf	??_FLASH_WriteBlock
  9434  10A1  0826               	movf	??_FLASH_WriteBlock,w
  9435  10A2  07AC               	addwf	FLASH_WriteBlock@i,f
  9436  10A3  3020               	movlw	32
  9437  10A4  022C               	subwf	FLASH_WriteBlock@i,w
  9438  10A5  1C03               	skipc
  9439  10A6  286A               	goto	l2659
  9440  10A7                     l483:	
  9441                           
  9442                           ;memory.c: 133: }
  9443                           ;memory.c: 135: PMCON1bits.WREN = 0;
  9444  10A7  0023               	movlb	3	; select bank3
  9445  10A8  1115               	bcf	21,2	;volatile
  9446                           
  9447                           ;memory.c: 136: INTCONbits.GIE = GIEBitValue;
  9448  10A9  0020               	movlb	0	; select bank0
  9449  10AA  0C2B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  9450  10AB  1C03               	skipc
  9451  10AC  138B               	bcf	11,7	;volatile
  9452  10AD  1803               	skipnc
  9453  10AE  178B               	bsf	11,7	;volatile
  9454  10AF  0008               	return
  9455  10B0                     __end_of_FLASH_WriteBlock:	
  9456                           ;memory.c: 138: return 0;
  9457                           ;	Return value of _FLASH_WriteBlock is never used
  9458                           
  9459                           
  9460                           	psect	text35
  9461  19DC                     __ptext35:	
  9462 ;; *************** function _FLASH_EraseBlock *****************
  9463 ;; Defined at:
  9464 ;;		line 141 in file "memory.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;  startAddr       2    0[BANK0 ] unsigned int 
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  1    wreg      void 
  9471 ;; Registers used:
  9472 ;;		wreg, status,2, status,0
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9478 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9479 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9481 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9482 ;;Total ram usage:        3 bytes
  9483 ;; Hardware stack levels used:    1
  9484 ;; Hardware stack levels required when called:    2
  9485 ;; This function calls:
  9486 ;;		Nothing
  9487 ;; This function is called by:
  9488 ;;		_FLASH_WriteBlock
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           
  9493                           ;psect for function _FLASH_EraseBlock
  9494  19DC                     _FLASH_EraseBlock:	
  9495                           
  9496                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  9497                           
  9498                           ;incstack = 0
  9499                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  9500  19DC  3000               	movlw	0
  9501  19DD  1B8B               	btfsc	11,7	;volatile
  9502  19DE  3001               	movlw	1
  9503  19DF  0020               	movlb	0	; select bank0
  9504  19E0  00A2               	movwf	FLASH_EraseBlock@GIEBitValue
  9505                           
  9506                           ;memory.c: 145: INTCONbits.GIE = 0;
  9507  19E1  138B               	bcf	11,7	;volatile
  9508                           
  9509                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  9510  19E2  0820               	movf	FLASH_EraseBlock@startAddr,w
  9511  19E3  0023               	movlb	3	; select bank3
  9512  19E4  0091               	movwf	17	;volatile
  9513                           
  9514                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  9515  19E5  0020               	movlb	0	; select bank0
  9516  19E6  0821               	movf	FLASH_EraseBlock@startAddr+1,w
  9517  19E7  0023               	movlb	3	; select bank3
  9518  19E8  0092               	movwf	18	;volatile
  9519                           
  9520                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  9521  19E9  1315               	bcf	21,6	;volatile
  9522                           
  9523                           ;memory.c: 153: PMCON1bits.FREE = 1;
  9524  19EA  1615               	bsf	21,4	;volatile
  9525                           
  9526                           ;memory.c: 154: PMCON1bits.WREN = 1;
  9527  19EB  1515               	bsf	21,2	;volatile
  9528                           
  9529                           ;memory.c: 157: PMCON2 = 0x55;
  9530  19EC  3055               	movlw	85
  9531  19ED  0096               	movwf	22	;volsfr
  9532                           
  9533                           ;memory.c: 158: PMCON2 = 0xAA;
  9534  19EE  30AA               	movlw	170
  9535  19EF  0096               	movwf	22	;volsfr
  9536                           
  9537                           ;memory.c: 159: PMCON1bits.WR = 1;
  9538  19F0  1495               	bsf	21,1	;volatile
  9539                           
  9540                           ;memory.c: 160: __nop();
  9541  19F1  0000               	nop
  9542                           
  9543                           ;memory.c: 161: __nop();
  9544  19F2  0000               	nop
  9545                           
  9546                           ;memory.c: 163: PMCON1bits.WREN = 0;
  9547  19F3  0023               	movlb	3	; select bank3
  9548  19F4  1115               	bcf	21,2	;volatile
  9549                           
  9550                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  9551  19F5  0020               	movlb	0	; select bank0
  9552  19F6  0C22               	rrf	FLASH_EraseBlock@GIEBitValue,w
  9553  19F7  1C03               	skipc
  9554  19F8  138B               	bcf	11,7	;volatile
  9555  19F9  1803               	skipnc
  9556  19FA  178B               	bsf	11,7	;volatile
  9557  19FB  0008               	return
  9558  19FC                     __end_of_FLASH_EraseBlock:	
  9559                           
  9560                           	psect	text36
  9561  19BC                     __ptext36:	
  9562 ;; *************** function _FLASH_ReadWord *****************
  9563 ;; Defined at:
  9564 ;;		line 58 in file "memory.c"
  9565 ;; Parameters:    Size  Location     Type
  9566 ;;  flashAddr       2    0[BANK0 ] unsigned int 
  9567 ;; Auto vars:     Size  Location     Type
  9568 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  2    0[BANK0 ] unsigned int 
  9571 ;; Registers used:
  9572 ;;		wreg, status,2, status,0
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9578 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9581 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9582 ;;Total ram usage:        3 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    2
  9585 ;; This function calls:
  9586 ;;		Nothing
  9587 ;; This function is called by:
  9588 ;;		_main
  9589 ;;		_FLASH_WriteWord
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           
  9594                           ;psect for function _FLASH_ReadWord
  9595  19BC                     _FLASH_ReadWord:	
  9596                           
  9597                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  9598                           
  9599                           ;incstack = 0
  9600                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  9601  19BC  3000               	movlw	0
  9602  19BD  1B8B               	btfsc	11,7	;volatile
  9603  19BE  3001               	movlw	1
  9604  19BF  0020               	movlb	0	; select bank0
  9605  19C0  00A2               	movwf	FLASH_ReadWord@GIEBitValue
  9606                           
  9607                           ;memory.c: 61: INTCONbits.GIE = 0;
  9608  19C1  138B               	bcf	11,7	;volatile
  9609                           
  9610                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  9611  19C2  0820               	movf	FLASH_ReadWord@flashAddr,w
  9612  19C3  0023               	movlb	3	; select bank3
  9613  19C4  0091               	movwf	17	;volatile
  9614                           
  9615                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  9616  19C5  0020               	movlb	0	; select bank0
  9617  19C6  0821               	movf	FLASH_ReadWord@flashAddr+1,w
  9618  19C7  0023               	movlb	3	; select bank3
  9619  19C8  0092               	movwf	18	;volatile
  9620                           
  9621                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  9622  19C9  1315               	bcf	21,6	;volatile
  9623                           
  9624                           ;memory.c: 66: PMCON1bits.RD = 1;
  9625  19CA  1415               	bsf	21,0	;volatile
  9626                           
  9627                           ;memory.c: 67: __nop();
  9628  19CB  0000               	nop
  9629                           
  9630                           ;memory.c: 68: __nop();
  9631  19CC  0000               	nop
  9632                           
  9633                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  9634  19CD  0020               	movlb	0	; select bank0
  9635  19CE  0C22               	rrf	FLASH_ReadWord@GIEBitValue,w
  9636  19CF  1C03               	skipc
  9637  19D0  138B               	bcf	11,7	;volatile
  9638  19D1  1803               	skipnc
  9639  19D2  178B               	bsf	11,7	;volatile
  9640                           
  9641                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  9642  19D3  0023               	movlb	3	; select bank3
  9643  19D4  0814               	movf	20,w	;volatile
  9644  19D5  0020               	movlb	0	; select bank0
  9645  19D6  00A1               	movwf	?_FLASH_ReadWord+1
  9646  19D7  0023               	movlb	3	; select bank3
  9647  19D8  0813               	movf	19,w	;volatile
  9648  19D9  0020               	movlb	0	; select bank0
  9649  19DA  00A0               	movwf	?_FLASH_ReadWord
  9650  19DB  0008               	return
  9651  19DC                     __end_of_FLASH_ReadWord:	
  9652                           
  9653                           	psect	text37
  9654  1940                     __ptext37:	
  9655 ;; *************** function _ConfigureOscillator *****************
  9656 ;; Defined at:
  9657 ;;		line 18 in file "system.c"
  9658 ;; Parameters:    Size  Location     Type
  9659 ;;		None
  9660 ;; Auto vars:     Size  Location     Type
  9661 ;;		None
  9662 ;; Return value:  Size  Location     Type
  9663 ;;                  1    wreg      void 
  9664 ;; Registers used:
  9665 ;;		wreg, status,2, status,0
  9666 ;; Tracked objects:
  9667 ;;		On entry : 0/0
  9668 ;;		On exit  : 0/0
  9669 ;;		Unchanged: 0/0
  9670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9675 ;;Total ram usage:        0 bytes
  9676 ;; Hardware stack levels used:    1
  9677 ;; Hardware stack levels required when called:    2
  9678 ;; This function calls:
  9679 ;;		Nothing
  9680 ;; This function is called by:
  9681 ;;		_main
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           
  9686                           ;psect for function _ConfigureOscillator
  9687  1940                     _ConfigureOscillator:	
  9688                           
  9689                           ;system.c: 20: OSCCONbits.SCS = 0b00;
  9690                           
  9691                           ;incstack = 0
  9692                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  9693  1940  30FC               	movlw	-4
  9694  1941  0021               	movlb	1	; select bank1
  9695  1942  0599               	andwf	25,f	;volatile
  9696  1943  0008               	return
  9697  1944                     __end_of_ConfigureOscillator:	
  9698                           
  9699                           	psect	intentry
  9700  0004                     __pintentry:	
  9701 ;; *************** function _isr *****************
  9702 ;; Defined at:
  9703 ;;		line 22 in file "interrupts.c"
  9704 ;; Parameters:    Size  Location     Type
  9705 ;;		None
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;		None
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  1    wreg      void 
  9710 ;; Registers used:
  9711 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9719 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9720 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9721 ;;Total ram usage:        5 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    1
  9724 ;; This function calls:
  9725 ;;		i1_set_leds_top
  9726 ;; This function is called by:
  9727 ;;		Interrupt level 1
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731  0004                     _isr:	
  9732                           
  9733                           ;incstack = 0
  9734                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9735  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9736  0005  3180               	pagesel	$
  9737  0006  0020               	movlb	0	; select bank0
  9738  0007  087F               	movf	127,w
  9739  0008  00F8               	movwf	??_isr+4
  9740                           
  9741                           ;interrupts.c: 23: extern volatile long timer;
  9742                           ;interrupts.c: 24: extern volatile long sub_timer;
  9743                           ;interrupts.c: 25: extern volatile long tap_timer;
  9744                           ;interrupts.c: 26: extern volatile long mod_timer;
  9745                           ;interrupts.c: 27: extern volatile long tap_longpress_timer;
  9746                           ;interrupts.c: 28: extern volatile long baseline_delay_time;
  9747                           ;interrupts.c: 29: extern volatile long bypass_flash_timer;
  9748                           ;interrupts.c: 30: extern volatile long delay_time;
  9749                           ;interrupts.c: 31: extern volatile int top_push_state;
  9750                           ;interrupts.c: 32: extern volatile int saving_state;
  9751  0009  1D0B               	btfss	11,2	;volatile
  9752  000A  287E               	goto	i1l33
  9753                           
  9754                           ;interrupts.c: 37: timer = timer + 1;
  9755  000B  3001               	movlw	1
  9756  000C  00F4               	movwf	??_isr
  9757  000D  3000               	movlw	0
  9758  000E  00F5               	movwf	??_isr+1
  9759  000F  3000               	movlw	0
  9760  0010  00F6               	movwf	??_isr+2
  9761  0011  3000               	movlw	0
  9762  0012  00F7               	movwf	??_isr+3
  9763  0013  0022               	movlb	2	; select bank2
  9764  0014  0849               	movf	_timer^(0+256),w	;volatile
  9765  0015  07F4               	addwf	??_isr,f
  9766  0016  084A               	movf	(_timer+1)^(0+256),w	;volatile
  9767  0017  3DF5               	addwfc	??_isr+1,f
  9768  0018  084B               	movf	(_timer+2)^(0+256),w	;volatile
  9769  0019  3DF6               	addwfc	??_isr+2,f
  9770  001A  084C               	movf	(_timer+3)^(0+256),w	;volatile
  9771  001B  3DF7               	addwfc	??_isr+3,f
  9772  001C  0877               	movf	??_isr+3,w
  9773  001D  00CC               	movwf	(_timer+3)^(0+256)	;volatile
  9774  001E  0876               	movf	??_isr+2,w
  9775  001F  00CB               	movwf	(_timer+2)^(0+256)	;volatile
  9776  0020  0875               	movf	??_isr+1,w
  9777  0021  00CA               	movwf	(_timer+1)^(0+256)	;volatile
  9778  0022  0874               	movf	??_isr,w
  9779  0023  00C9               	movwf	_timer^(0+256)	;volatile
  9780                           
  9781                           ;interrupts.c: 38: sub_timer = sub_timer + 1;
  9782  0024  3001               	movlw	1
  9783  0025  00F4               	movwf	??_isr
  9784  0026  3000               	movlw	0
  9785  0027  00F5               	movwf	??_isr+1
  9786  0028  3000               	movlw	0
  9787  0029  00F6               	movwf	??_isr+2
  9788  002A  3000               	movlw	0
  9789  002B  00F7               	movwf	??_isr+3
  9790  002C  0845               	movf	_sub_timer^(0+256),w	;volatile
  9791  002D  07F4               	addwf	??_isr,f
  9792  002E  0846               	movf	(_sub_timer+1)^(0+256),w	;volatile
  9793  002F  3DF5               	addwfc	??_isr+1,f
  9794  0030  0847               	movf	(_sub_timer+2)^(0+256),w	;volatile
  9795  0031  3DF6               	addwfc	??_isr+2,f
  9796  0032  0848               	movf	(_sub_timer+3)^(0+256),w	;volatile
  9797  0033  3DF7               	addwfc	??_isr+3,f
  9798  0034  0877               	movf	??_isr+3,w
  9799  0035  00C8               	movwf	(_sub_timer+3)^(0+256)	;volatile
  9800  0036  0876               	movf	??_isr+2,w
  9801  0037  00C7               	movwf	(_sub_timer+2)^(0+256)	;volatile
  9802  0038  0875               	movf	??_isr+1,w
  9803  0039  00C6               	movwf	(_sub_timer+1)^(0+256)	;volatile
  9804  003A  0874               	movf	??_isr,w
  9805  003B  00C5               	movwf	_sub_timer^(0+256)	;volatile
  9806                           
  9807                           ;interrupts.c: 39: tap_timer = tap_timer + 1;
  9808  003C  3001               	movlw	1
  9809  003D  00F4               	movwf	??_isr
  9810  003E  3000               	movlw	0
  9811  003F  00F5               	movwf	??_isr+1
  9812  0040  3000               	movlw	0
  9813  0041  00F6               	movwf	??_isr+2
  9814  0042  3000               	movlw	0
  9815  0043  00F7               	movwf	??_isr+3
  9816  0044  0879               	movf	_tap_timer,w	;volatile
  9817  0045  07F4               	addwf	??_isr,f
  9818  0046  087A               	movf	_tap_timer+1,w	;volatile
  9819  0047  3DF5               	addwfc	??_isr+1,f
  9820  0048  087B               	movf	_tap_timer+2,w	;volatile
  9821  0049  3DF6               	addwfc	??_isr+2,f
  9822  004A  087C               	movf	_tap_timer+3,w	;volatile
  9823  004B  3DF7               	addwfc	??_isr+3,f
  9824  004C  0877               	movf	??_isr+3,w
  9825  004D  00FC               	movwf	_tap_timer+3	;volatile
  9826  004E  0876               	movf	??_isr+2,w
  9827  004F  00FB               	movwf	_tap_timer+2	;volatile
  9828  0050  0875               	movf	??_isr+1,w
  9829  0051  00FA               	movwf	_tap_timer+1	;volatile
  9830  0052  0874               	movf	??_isr,w
  9831  0053  00F9               	movwf	_tap_timer	;volatile
  9832                           
  9833                           ;interrupts.c: 40: mod_timer = mod_timer + 1;
  9834  0054  3001               	movlw	1
  9835  0055  00F4               	movwf	??_isr
  9836  0056  3000               	movlw	0
  9837  0057  00F5               	movwf	??_isr+1
  9838  0058  3000               	movlw	0
  9839  0059  00F6               	movwf	??_isr+2
  9840  005A  3000               	movlw	0
  9841  005B  00F7               	movwf	??_isr+3
  9842  005C  0023               	movlb	3	; select bank3
  9843  005D  0838               	movf	_mod_timer^(0+384),w	;volatile
  9844  005E  07F4               	addwf	??_isr,f
  9845  005F  0839               	movf	(_mod_timer+1)^(0+384),w	;volatile
  9846  0060  3DF5               	addwfc	??_isr+1,f
  9847  0061  083A               	movf	(_mod_timer+2)^(0+384),w	;volatile
  9848  0062  3DF6               	addwfc	??_isr+2,f
  9849  0063  083B               	movf	(_mod_timer+3)^(0+384),w	;volatile
  9850  0064  3DF7               	addwfc	??_isr+3,f
  9851  0065  0877               	movf	??_isr+3,w
  9852  0066  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
  9853  0067  0876               	movf	??_isr+2,w
  9854  0068  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
  9855  0069  0875               	movf	??_isr+1,w
  9856  006A  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
  9857  006B  0874               	movf	??_isr,w
  9858  006C  00B8               	movwf	_mod_timer^(0+384)	;volatile
  9859                           
  9860                           ;interrupts.c: 41: bypass_flash_timer++;
  9861  006D  3001               	movlw	1
  9862  006E  07B4               	addwf	_bypass_flash_timer^(0+384),f	;volatile
  9863  006F  3000               	movlw	0
  9864  0070  3DB5               	addwfc	(_bypass_flash_timer+1)^(0+384),f	;volatile
  9865  0071  3000               	movlw	0
  9866  0072  3DB6               	addwfc	(_bypass_flash_timer+2)^(0+384),f	;volatile
  9867  0073  3000               	movlw	0
  9868  0074  3DB7               	addwfc	(_bypass_flash_timer+3)^(0+384),f	;volatile
  9869                           
  9870                           ;interrupts.c: 42: tap_longpress_timer++;
  9871  0075  3001               	movlw	1
  9872  0076  07BC               	addwf	_tap_longpress_timer^(0+384),f	;volatile
  9873  0077  3000               	movlw	0
  9874  0078  3DBD               	addwfc	(_tap_longpress_timer+1)^(0+384),f	;volatile
  9875  0079  3000               	movlw	0
  9876  007A  3DBE               	addwfc	(_tap_longpress_timer+2)^(0+384),f	;volatile
  9877  007B  3000               	movlw	0
  9878  007C  3DBF               	addwfc	(_tap_longpress_timer+3)^(0+384),f	;volatile
  9879                           
  9880                           ;interrupts.c: 43: INTCONbits.TMR0IF = 0;
  9881  007D  110B               	bcf	11,2	;volatile
  9882  007E                     i1l33:	
  9883                           
  9884                           ;interrupts.c: 44: }
  9885                           ;interrupts.c: 49: if (timer >= baseline_delay_time) {
  9886  007E  0022               	movlb	2	; select bank2
  9887  007F  084C               	movf	(_timer+3)^(0+256),w	;volatile
  9888  0080  3A80               	xorlw	128
  9889  0081  00F4               	movwf	??_isr
  9890  0082  0860               	movf	(_baseline_delay_time+3)^(0+256),w	;volatile
  9891  0083  3A80               	xorlw	128
  9892  0084  0274               	subwf	??_isr,w
  9893  0085  1D03               	skipz
  9894  0086  2891               	goto	u321_23
  9895  0087  085F               	movf	(_baseline_delay_time+2)^(0+256),w	;volatile
  9896  0088  024B               	subwf	(_timer+2)^(0+256),w	;volatile
  9897  0089  1D03               	skipz
  9898  008A  2891               	goto	u321_23
  9899  008B  085E               	movf	(_baseline_delay_time+1)^(0+256),w	;volatile
  9900  008C  024A               	subwf	(_timer+1)^(0+256),w	;volatile
  9901  008D  1D03               	skipz
  9902  008E  2891               	goto	u321_23
  9903  008F  085D               	movf	_baseline_delay_time^(0+256),w	;volatile
  9904  0090  0249               	subwf	_timer^(0+256),w	;volatile
  9905  0091                     u321_23:	
  9906  0091  1C03               	skipc
  9907  0092  289E               	goto	i1l3125
  9908                           
  9909                           ;interrupts.c: 50: LATFbits.LATF5 = 1;
  9910  0093  0027               	movlb	7	; select bank7
  9911  0094  168C               	bsf	12,5	;volatile
  9912                           
  9913                           ;interrupts.c: 51: timer = 0;
  9914  0095  3000               	movlw	0
  9915  0096  0022               	movlb	2	; select bank2
  9916  0097  00CC               	movwf	(_timer+3)^(0+256)	;volatile
  9917  0098  3000               	movlw	0
  9918  0099  00CB               	movwf	(_timer+2)^(0+256)	;volatile
  9919  009A  3000               	movlw	0
  9920  009B  00CA               	movwf	(_timer+1)^(0+256)	;volatile
  9921  009C  3000               	movlw	0
  9922  009D  00C9               	movwf	_timer^(0+256)	;volatile
  9923  009E                     i1l3125:	
  9924                           
  9925                           ;interrupts.c: 52: }
  9926                           ;interrupts.c: 54: if (timer >= 20) {
  9927  009E  1BCC               	btfsc	(_timer+3)^(0+256),7	;volatile
  9928  009F  28AF               	goto	i1l3129
  9929  00A0  084C               	movf	(_timer+3)^(0+256),w	;volatile
  9930  00A1  1D03               	btfss	3,2
  9931  00A2  28AD               	goto	i1l3127
  9932  00A3  084B               	movf	(_timer+2)^(0+256),w	;volatile
  9933  00A4  1D03               	btfss	3,2
  9934  00A5  28AD               	goto	i1l3127
  9935  00A6  084A               	movf	(_timer+1)^(0+256),w	;volatile
  9936  00A7  1D03               	btfss	3,2
  9937  00A8  28AD               	goto	i1l3127
  9938  00A9  3014               	movlw	20
  9939  00AA  0249               	subwf	_timer^(0+256),w	;volatile
  9940  00AB  1C03               	btfss	3,0
  9941  00AC  28AF               	goto	i1l3129
  9942  00AD                     i1l3127:	
  9943                           
  9944                           ;interrupts.c: 55: LATFbits.LATF5 = 0;
  9945  00AD  0027               	movlb	7	; select bank7
  9946  00AE  128C               	bcf	12,5	;volatile
  9947  00AF                     i1l3129:	
  9948                           
  9949                           ;interrupts.c: 56: }
  9950                           ;interrupts.c: 58: if (sub_timer >= delay_time) {
  9951  00AF  0022               	movlb	2	; select bank2
  9952  00B0  0848               	movf	(_sub_timer+3)^(0+256),w	;volatile
  9953  00B1  3A80               	xorlw	128
  9954  00B2  00F4               	movwf	??_isr
  9955  00B3  0864               	movf	(_delay_time+3)^(0+256),w	;volatile
  9956  00B4  3A80               	xorlw	128
  9957  00B5  0274               	subwf	??_isr,w
  9958  00B6  1D03               	skipz
  9959  00B7  28C2               	goto	u323_23
  9960  00B8  0863               	movf	(_delay_time+2)^(0+256),w	;volatile
  9961  00B9  0247               	subwf	(_sub_timer+2)^(0+256),w	;volatile
  9962  00BA  1D03               	skipz
  9963  00BB  28C2               	goto	u323_23
  9964  00BC  0862               	movf	(_delay_time+1)^(0+256),w	;volatile
  9965  00BD  0246               	subwf	(_sub_timer+1)^(0+256),w	;volatile
  9966  00BE  1D03               	skipz
  9967  00BF  28C2               	goto	u323_23
  9968  00C0  0861               	movf	_delay_time^(0+256),w	;volatile
  9969  00C1  0245               	subwf	_sub_timer^(0+256),w	;volatile
  9970  00C2                     u323_23:	
  9971  00C2  1C03               	skipc
  9972  00C3  28D8               	goto	i1l3135
  9973                           
  9974                           ;interrupts.c: 59: set_leds_top(top_push_state, 1);
  9975  00C4  086E               	movf	(_top_push_state+1)^(0+256),w	;volatile
  9976  00C5  00F1               	movwf	i1set_leds_top@x+1
  9977  00C6  086D               	movf	_top_push_state^(0+256),w	;volatile
  9978  00C7  00F0               	movwf	i1set_leds_top@x
  9979  00C8  3001               	movlw	1
  9980  00C9  00F2               	movwf	i1set_leds_top@ledState
  9981  00CA  3000               	movlw	0
  9982  00CB  00F3               	movwf	i1set_leds_top@ledState+1
  9983  00CC  319E  267F  3180   	fcall	i1_set_leds_top
  9984                           
  9985                           ;interrupts.c: 60: sub_timer = 0;
  9986  00CF  3000               	movlw	0
  9987  00D0  0022               	movlb	2	; select bank2
  9988  00D1  00C8               	movwf	(_sub_timer+3)^(0+256)	;volatile
  9989  00D2  3000               	movlw	0
  9990  00D3  00C7               	movwf	(_sub_timer+2)^(0+256)	;volatile
  9991  00D4  3000               	movlw	0
  9992  00D5  00C6               	movwf	(_sub_timer+1)^(0+256)	;volatile
  9993  00D6  3000               	movlw	0
  9994  00D7  00C5               	movwf	_sub_timer^(0+256)	;volatile
  9995  00D8                     i1l3135:	
  9996                           
  9997                           ;interrupts.c: 61: }
  9998                           ;interrupts.c: 63: if (sub_timer >= 20) {
  9999  00D8  1BC8               	btfsc	(_sub_timer+3)^(0+256),7	;volatile
 10000  00D9  28F1               	goto	i1l3139
 10001  00DA  0848               	movf	(_sub_timer+3)^(0+256),w	;volatile
 10002  00DB  1D03               	btfss	3,2
 10003  00DC  28E7               	goto	i1l3137
 10004  00DD  0847               	movf	(_sub_timer+2)^(0+256),w	;volatile
 10005  00DE  1D03               	btfss	3,2
 10006  00DF  28E7               	goto	i1l3137
 10007  00E0  0846               	movf	(_sub_timer+1)^(0+256),w	;volatile
 10008  00E1  1D03               	btfss	3,2
 10009  00E2  28E7               	goto	i1l3137
 10010  00E3  3014               	movlw	20
 10011  00E4  0245               	subwf	_sub_timer^(0+256),w	;volatile
 10012  00E5  1C03               	btfss	3,0
 10013  00E6  28F1               	goto	i1l3139
 10014  00E7                     i1l3137:	
 10015                           
 10016                           ;interrupts.c: 64: set_leds_top(top_push_state, 0);
 10017  00E7  086E               	movf	(_top_push_state+1)^(0+256),w	;volatile
 10018  00E8  00F1               	movwf	i1set_leds_top@x+1
 10019  00E9  086D               	movf	_top_push_state^(0+256),w	;volatile
 10020  00EA  00F0               	movwf	i1set_leds_top@x
 10021  00EB  3000               	movlw	0
 10022  00EC  00F2               	movwf	i1set_leds_top@ledState
 10023  00ED  00F3               	movwf	i1set_leds_top@ledState+1
 10024  00EE  319E  267F  3180   	fcall	i1_set_leds_top
 10025  00F1                     i1l3139:	
 10026                           
 10027                           ;interrupts.c: 65: }
 10028                           ;interrupts.c: 67: if (saving_state == 1 && flash_saving == 0) {
 10029  00F1  0022               	movlb	2	; select bank2
 10030  00F2  035B               	decf	_saving_state^(0+256),w	;volatile
 10031  00F3  045C               	iorwf	(_saving_state+1)^(0+256),w	;volatile
 10032  00F4  1D03               	btfss	3,2
 10033  00F5  2909               	goto	i1l38
 10034  00F6  084F               	movf	_flash_saving^(0+256),w	;volatile
 10035  00F7  0450               	iorwf	(_flash_saving+1)^(0+256),w	;volatile
 10036  00F8  1D03               	btfss	3,2
 10037  00F9  2909               	goto	i1l38
 10038                           
 10039                           ;interrupts.c: 68: flash_saving = 1;
 10040  00FA  3001               	movlw	1
 10041  00FB  00CF               	movwf	_flash_saving^(0+256)	;volatile
 10042  00FC  3000               	movlw	0
 10043  00FD  00D0               	movwf	(_flash_saving^(0+256)+1)	;volatile
 10044                           
 10045                           ;interrupts.c: 69: LATFbits.LATF6 = 1;
 10046  00FE  0027               	movlb	7	; select bank7
 10047  00FF  170C               	bsf	12,6	;volatile
 10048                           
 10049                           ;interrupts.c: 70: bypass_flash_timer = 0;
 10050  0100  3000               	movlw	0
 10051  0101  0023               	movlb	3	; select bank3
 10052  0102  00B7               	movwf	(_bypass_flash_timer+3)^(0+384)	;volatile
 10053  0103  3000               	movlw	0
 10054  0104  00B6               	movwf	(_bypass_flash_timer+2)^(0+384)	;volatile
 10055  0105  3000               	movlw	0
 10056  0106  00B5               	movwf	(_bypass_flash_timer+1)^(0+384)	;volatile
 10057  0107  3000               	movlw	0
 10058  0108  00B4               	movwf	_bypass_flash_timer^(0+384)	;volatile
 10059  0109                     i1l38:	
 10060                           
 10061                           ;interrupts.c: 71: }
 10062                           ;interrupts.c: 72: if (flash_saving > 0 && flash_saving < 11) {
 10063  0109  0022               	movlb	2	; select bank2
 10064  010A  0850               	movf	(_flash_saving+1)^(0+256),w	;volatile
 10065  010B  3A80               	xorlw	128
 10066  010C  00F4               	movwf	??_isr
 10067  010D  3080               	movlw	128
 10068  010E  0274               	subwf	??_isr,w
 10069  010F  1D03               	skipz
 10070  0110  2913               	goto	u327_25
 10071  0111  3001               	movlw	1
 10072  0112  024F               	subwf	_flash_saving^(0+256),w	;volatile
 10073  0113                     u327_25:	
 10074  0113  1C03               	skipc
 10075  0114  2946               	goto	i1l3159
 10076  0115  0022               	movlb	2	; select bank2
 10077  0116  0850               	movf	(_flash_saving+1)^(0+256),w	;volatile
 10078  0117  3A80               	xorlw	128
 10079  0118  00F4               	movwf	??_isr
 10080  0119  3080               	movlw	128
 10081  011A  0274               	subwf	??_isr,w
 10082  011B  1D03               	skipz
 10083  011C  291F               	goto	u328_25
 10084  011D  300B               	movlw	11
 10085  011E  024F               	subwf	_flash_saving^(0+256),w	;volatile
 10086  011F                     u328_25:	
 10087  011F  1803               	skipnc
 10088  0120  2946               	goto	i1l3159
 10089                           
 10090                           ;interrupts.c: 73: if (bypass_flash_timer > 100) {
 10091  0121  0023               	movlb	3	; select bank3
 10092  0122  1BB7               	btfsc	(_bypass_flash_timer+3)^(0+384),7	;volatile
 10093  0123  2959               	goto	i1l45
 10094  0124  0837               	movf	(_bypass_flash_timer+3)^(0+384),w	;volatile
 10095  0125  1D03               	btfss	3,2
 10096  0126  2931               	goto	i1l3151
 10097  0127  0836               	movf	(_bypass_flash_timer+2)^(0+384),w	;volatile
 10098  0128  1D03               	btfss	3,2
 10099  0129  2931               	goto	i1l3151
 10100  012A  0835               	movf	(_bypass_flash_timer+1)^(0+384),w	;volatile
 10101  012B  1D03               	btfss	3,2
 10102  012C  2931               	goto	i1l3151
 10103  012D  3065               	movlw	101
 10104  012E  0234               	subwf	_bypass_flash_timer^(0+384),w	;volatile
 10105  012F  1C03               	btfss	3,0
 10106  0130  2959               	goto	i1l45
 10107  0131                     i1l3151:	
 10108                           
 10109                           ;interrupts.c: 74: flash_saving++;
 10110  0131  3001               	movlw	1
 10111  0132  0022               	movlb	2	; select bank2
 10112  0133  07CF               	addwf	_flash_saving^(0+256),f	;volatile
 10113  0134  3000               	movlw	0
 10114  0135  3DD0               	addwfc	(_flash_saving+1)^(0+256),f	;volatile
 10115                           
 10116                           ;interrupts.c: 75: if (LATFbits.LATF6 == 1) {
 10117  0136  0027               	movlb	7	; select bank7
 10118  0137  1F0C               	btfss	12,6	;volatile
 10119  0138  293B               	goto	i1l41
 10120                           
 10121                           ;interrupts.c: 76: LATFbits.LATF6 = 0;
 10122  0139  130C               	bcf	12,6	;volatile
 10123                           
 10124                           ;interrupts.c: 77: } else {
 10125  013A  293C               	goto	i1l3157
 10126  013B                     i1l41:	
 10127                           
 10128                           ;interrupts.c: 78: LATFbits.LATF6 = 1;
 10129  013B  170C               	bsf	12,6	;volatile
 10130  013C                     i1l3157:	
 10131                           
 10132                           ;interrupts.c: 79: }
 10133                           ;interrupts.c: 80: bypass_flash_timer = 0;
 10134  013C  3000               	movlw	0
 10135  013D  0023               	movlb	3	; select bank3
 10136  013E  00B7               	movwf	(_bypass_flash_timer+3)^(0+384)	;volatile
 10137  013F  3000               	movlw	0
 10138  0140  00B6               	movwf	(_bypass_flash_timer+2)^(0+384)	;volatile
 10139  0141  3000               	movlw	0
 10140  0142  00B5               	movwf	(_bypass_flash_timer+1)^(0+384)	;volatile
 10141  0143  3000               	movlw	0
 10142  0144  00B4               	movwf	_bypass_flash_timer^(0+384)	;volatile
 10143                           
 10144                           ;interrupts.c: 81: }
 10145                           ;interrupts.c: 82: } else if (flash_saving >= 11) {
 10146  0145  2959               	goto	i1l45
 10147  0146                     i1l3159:	
 10148  0146  0022               	movlb	2	; select bank2
 10149  0147  0850               	movf	(_flash_saving+1)^(0+256),w	;volatile
 10150  0148  3A80               	xorlw	128
 10151  0149  00F4               	movwf	??_isr
 10152  014A  3080               	movlw	128
 10153  014B  0274               	subwf	??_isr,w
 10154  014C  1D03               	skipz
 10155  014D  2950               	goto	u331_25
 10156  014E  300B               	movlw	11
 10157  014F  024F               	subwf	_flash_saving^(0+256),w	;volatile
 10158  0150                     u331_25:	
 10159  0150  1C03               	skipc
 10160  0151  2959               	goto	i1l45
 10161                           
 10162                           ;interrupts.c: 83: LATFbits.LATF6 = bypass_state;
 10163  0152  0022               	movlb	2	; select bank2
 10164  0153  0C4D               	rrf	_bypass_state^(0+256),w	;volatile
 10165  0154  0027               	movlb	7	; select bank7
 10166  0155  1C03               	skipc
 10167  0156  130C               	bcf	12,6	;volatile
 10168  0157  1803               	skipnc
 10169  0158  170C               	bsf	12,6	;volatile
 10170  0159                     i1l45:	
 10171  0159  0878               	movf	??_isr+4,w
 10172  015A  0020               	movlb	0	; select bank0
 10173  015B  00FF               	movwf	127
 10174  015C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10175  015D  0009               	retfie
 10176  015E                     __end_of_isr:	
 10177                           
 10178                           	psect	text39
 10179  1E7F                     __ptext39:	
 10180 ;; *************** function i1_set_leds_top *****************
 10181 ;; Defined at:
 10182 ;;		line 142 in file "user.c"
 10183 ;; Parameters:    Size  Location     Type
 10184 ;;  x               2    0[COMMON] int 
 10185 ;;  ledState        2    2[COMMON] int 
 10186 ;; Auto vars:     Size  Location     Type
 10187 ;;		None
 10188 ;; Return value:  Size  Location     Type
 10189 ;;                  1    wreg      void 
 10190 ;; Registers used:
 10191 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10192 ;; Tracked objects:
 10193 ;;		On entry : 0/0
 10194 ;;		On exit  : 0/0
 10195 ;;		Unchanged: 0/0
 10196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10197 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10200 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10201 ;;Total ram usage:        4 bytes
 10202 ;; Hardware stack levels used:    1
 10203 ;; This function calls:
 10204 ;;		Nothing
 10205 ;; This function is called by:
 10206 ;;		_isr
 10207 ;; This function uses a non-reentrant model
 10208 ;;
 10209                           
 10210                           
 10211                           ;psect for function i1_set_leds_top
 10212  1E7F                     i1_set_leds_top:	
 10213                           
 10214                           ;user.c: 143: switch (x) {
 10215                           
 10216                           ;incstack = 0
 10217                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 10218  1E7F  2EBE               	goto	i1l3109
 10219  1E80                     i1l3077:	
 10220                           ;user.c: 144: case 1:
 10221                           
 10222                           
 10223                           ;user.c: 145: LATFbits.LATF0 = ledState;
 10224  1E80  0C72               	rrf	i1set_leds_top@ledState,w
 10225  1E81  0027               	movlb	7	; select bank7
 10226  1E82  1C03               	skipc
 10227  1E83  100C               	bcf	12,0	;volatile
 10228  1E84  1803               	skipnc
 10229  1E85  140C               	bsf	12,0	;volatile
 10230                           
 10231                           ;user.c: 146: LATFbits.LATF1 = 0;
 10232  1E86  108C               	bcf	12,1	;volatile
 10233                           
 10234                           ;user.c: 147: LATFbits.LATF2 = 0;
 10235  1E87  110C               	bcf	12,2	;volatile
 10236                           
 10237                           ;user.c: 148: LATFbits.LATF3 = 0;
 10238  1E88  118C               	bcf	12,3	;volatile
 10239                           
 10240                           ;user.c: 149: LATFbits.LATF4 = 0;
 10241  1E89  120C               	bcf	12,4	;volatile
 10242                           
 10243                           ;user.c: 150: break;
 10244  1E8A  0008               	return
 10245  1E8B                     i1l420:	
 10246                           ;user.c: 151: case 2:
 10247                           
 10248                           
 10249                           ;user.c: 152: LATFbits.LATF0 = 0;
 10250  1E8B  0027               	movlb	7	; select bank7
 10251  1E8C  100C               	bcf	12,0	;volatile
 10252                           
 10253                           ;user.c: 153: LATFbits.LATF1 = ledState;
 10254  1E8D  0C72               	rrf	i1set_leds_top@ledState,w
 10255  1E8E  1C03               	skipc
 10256  1E8F  108C               	bcf	12,1	;volatile
 10257  1E90  1803               	skipnc
 10258  1E91  148C               	bsf	12,1	;volatile
 10259                           
 10260                           ;user.c: 154: LATFbits.LATF2 = 0;
 10261  1E92  110C               	bcf	12,2	;volatile
 10262                           
 10263                           ;user.c: 155: LATFbits.LATF3 = 0;
 10264  1E93  118C               	bcf	12,3	;volatile
 10265                           
 10266                           ;user.c: 156: LATFbits.LATF4 = 0;
 10267  1E94  120C               	bcf	12,4	;volatile
 10268                           
 10269                           ;user.c: 157: break;
 10270  1E95  0008               	return
 10271  1E96                     i1l421:	
 10272                           ;user.c: 158: case 3:
 10273                           
 10274                           
 10275                           ;user.c: 159: LATFbits.LATF0 = 0;
 10276  1E96  0027               	movlb	7	; select bank7
 10277  1E97  100C               	bcf	12,0	;volatile
 10278                           
 10279                           ;user.c: 160: LATFbits.LATF1 = 0;
 10280  1E98  108C               	bcf	12,1	;volatile
 10281                           
 10282                           ;user.c: 161: LATFbits.LATF2 = ledState;
 10283  1E99  0C72               	rrf	i1set_leds_top@ledState,w
 10284  1E9A  1C03               	skipc
 10285  1E9B  110C               	bcf	12,2	;volatile
 10286  1E9C  1803               	skipnc
 10287  1E9D  150C               	bsf	12,2	;volatile
 10288                           
 10289                           ;user.c: 162: LATFbits.LATF3 = 0;
 10290  1E9E  118C               	bcf	12,3	;volatile
 10291                           
 10292                           ;user.c: 163: LATFbits.LATF4 = 0;
 10293  1E9F  120C               	bcf	12,4	;volatile
 10294                           
 10295                           ;user.c: 164: break;
 10296  1EA0  0008               	return
 10297  1EA1                     i1l422:	
 10298                           ;user.c: 165: case 4:
 10299                           
 10300                           
 10301                           ;user.c: 166: LATFbits.LATF0 = 0;
 10302  1EA1  0027               	movlb	7	; select bank7
 10303  1EA2  100C               	bcf	12,0	;volatile
 10304                           
 10305                           ;user.c: 167: LATFbits.LATF1 = 0;
 10306  1EA3  108C               	bcf	12,1	;volatile
 10307                           
 10308                           ;user.c: 168: LATFbits.LATF2 = 0;
 10309  1EA4  110C               	bcf	12,2	;volatile
 10310                           
 10311                           ;user.c: 169: LATFbits.LATF3 = ledState;
 10312  1EA5  0C72               	rrf	i1set_leds_top@ledState,w
 10313  1EA6  1C03               	skipc
 10314  1EA7  118C               	bcf	12,3	;volatile
 10315  1EA8  1803               	skipnc
 10316  1EA9  158C               	bsf	12,3	;volatile
 10317                           
 10318                           ;user.c: 170: LATFbits.LATF4 = 0;
 10319  1EAA  120C               	bcf	12,4	;volatile
 10320                           
 10321                           ;user.c: 171: break;
 10322  1EAB  0008               	return
 10323  1EAC                     i1l423:	
 10324                           ;user.c: 172: case 5:
 10325                           
 10326                           
 10327                           ;user.c: 173: LATFbits.LATF0 = 0;
 10328  1EAC  0027               	movlb	7	; select bank7
 10329  1EAD  100C               	bcf	12,0	;volatile
 10330                           
 10331                           ;user.c: 174: LATFbits.LATF1 = 0;
 10332  1EAE  108C               	bcf	12,1	;volatile
 10333                           
 10334                           ;user.c: 175: LATFbits.LATF2 = 0;
 10335  1EAF  110C               	bcf	12,2	;volatile
 10336                           
 10337                           ;user.c: 176: LATFbits.LATF3 = 0;
 10338  1EB0  118C               	bcf	12,3	;volatile
 10339                           
 10340                           ;user.c: 177: LATFbits.LATF4 = ledState;
 10341  1EB1  0C72               	rrf	i1set_leds_top@ledState,w
 10342  1EB2  1C03               	skipc
 10343  1EB3  120C               	bcf	12,4	;volatile
 10344  1EB4  1803               	skipnc
 10345  1EB5  160C               	bsf	12,4	;volatile
 10346                           
 10347                           ;user.c: 178: break;
 10348  1EB6  0008               	return
 10349  1EB7                     i1l424:	
 10350                           ;user.c: 179: case 6:
 10351                           
 10352                           
 10353                           ;user.c: 180: LATFbits.LATF0 = 0;
 10354  1EB7  0027               	movlb	7	; select bank7
 10355  1EB8  100C               	bcf	12,0	;volatile
 10356                           
 10357                           ;user.c: 181: LATFbits.LATF1 = 0;
 10358  1EB9  108C               	bcf	12,1	;volatile
 10359                           
 10360                           ;user.c: 182: LATFbits.LATF2 = 0;
 10361  1EBA  110C               	bcf	12,2	;volatile
 10362                           
 10363                           ;user.c: 183: LATFbits.LATF3 = 0;
 10364  1EBB  118C               	bcf	12,3	;volatile
 10365                           
 10366                           ;user.c: 184: LATFbits.LATF4 = 0;
 10367  1EBC  120C               	bcf	12,4	;volatile
 10368                           
 10369                           ;user.c: 186: }
 10370                           
 10371                           ;user.c: 185: break;
 10372  1EBD  0008               	return
 10373  1EBE                     i1l3109:	
 10374                           
 10375                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10376                           ; Switch size 1, requested type "space"
 10377                           ; Number of cases is 1, Range of values is 0 to 0
 10378                           ; switch strategies available:
 10379                           ; Name         Instructions Cycles
 10380                           ; simple_byte            4     3 (average)
 10381                           ; direct_byte            8     6 (fixed)
 10382                           ; jumptable            260     6 (fixed)
 10383                           ;	Chosen strategy is simple_byte
 10384  1EBE  0871               	movf	i1set_leds_top@x+1,w
 10385  1EBF  3A00               	xorlw	0	; case 0
 10386  1EC0  1903               	skipnz
 10387  1EC1  2EC3               	goto	i1l3631
 10388  1EC2  2ED7               	goto	i1l425
 10389  1EC3                     i1l3631:	
 10390                           
 10391                           ; Switch size 1, requested type "space"
 10392                           ; Number of cases is 6, Range of values is 1 to 6
 10393                           ; switch strategies available:
 10394                           ; Name         Instructions Cycles
 10395                           ; simple_byte           19    10 (average)
 10396                           ; direct_byte           21     9 (fixed)
 10397                           ; jumptable            263     9 (fixed)
 10398                           ;	Chosen strategy is simple_byte
 10399  1EC3  0870               	movf	i1set_leds_top@x,w
 10400  1EC4  3A01               	xorlw	1	; case 1
 10401  1EC5  1903               	skipnz
 10402  1EC6  2E80               	goto	i1l3077
 10403  1EC7  3A03               	xorlw	3	; case 2
 10404  1EC8  1903               	skipnz
 10405  1EC9  2E8B               	goto	i1l420
 10406  1ECA  3A01               	xorlw	1	; case 3
 10407  1ECB  1903               	skipnz
 10408  1ECC  2E96               	goto	i1l421
 10409  1ECD  3A07               	xorlw	7	; case 4
 10410  1ECE  1903               	skipnz
 10411  1ECF  2EA1               	goto	i1l422
 10412  1ED0  3A01               	xorlw	1	; case 5
 10413  1ED1  1903               	skipnz
 10414  1ED2  2EAC               	goto	i1l423
 10415  1ED3  3A03               	xorlw	3	; case 6
 10416  1ED4  1903               	skipnz
 10417  1ED5  2EB7               	goto	i1l424
 10418  1ED6  2ED7               	goto	i1l425
 10419  1ED7                     i1l425:	
 10420  1ED7  0008               	return
 10421  1ED8                     __end_ofi1_set_leds_top:	
 10422  007E                     btemp	set	126	;btemp
 10423  007E                     int$flags	set	126
 10424  007E                     wtemp	set	126
 10425  007E                     wtemp0	set	126
 10426  0080                     wtemp1	set	128
 10427  0082                     wtemp2	set	130
 10428  0084                     wtemp3	set	132
 10429  0086                     wtemp4	set	134
 10430  0088                     wtemp5	set	136
 10431  007F                     wtemp6	set	127
 10432  007E                     ttemp	set	126
 10433  007E                     ttemp0	set	126
 10434  0081                     ttemp1	set	129
 10435  0084                     ttemp2	set	132
 10436  0087                     ttemp3	set	135
 10437  007F                     ttemp4	set	127
 10438  007E                     ltemp	set	126
 10439  007E                     ltemp0	set	126
 10440  0082                     ltemp1	set	130
 10441  0086                     ltemp2	set	134
 10442  0080                     ltemp3	set	128
 10443  23F2                     
 10444                           	psect	maintext_split_1
 10445  0222                     l3451:	
 10446                           ;main.c: 442: case 1:
 10447                           
 10448                           
 10449                           ;main.c: 443: mod_value = round(125 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10450  0222  0833               	movf	(main@freq+1)^(0+256),w
 10451  0223  0020               	movlb	0	; select bank0
 10452  0224  00AA               	movwf	___awtoft@c+1
 10453  0225  0022               	movlb	2	; select bank2
 10454  0226  0832               	movf	main@freq^(0+256),w
 10455  0227  0020               	movlb	0	; select bank0
 10456  0228  00A9               	movwf	___awtoft@c
 10457  0229  3199  21FC  3182   	fcall	___awtoft
 10458  022C  0020               	movlb	0	; select bank0
 10459  022D  0829               	movf	?___awtoft,w
 10460  022E  00B6               	movwf	___ftmul@f2
 10461  022F  082A               	movf	?___awtoft+1,w
 10462  0230  00B7               	movwf	___ftmul@f2+1
 10463  0231  082B               	movf	?___awtoft+2,w
 10464  0232  00B8               	movwf	___ftmul@f2+2
 10465  0233  0022               	movlb	2	; select bank2
 10466  0234  085A               	movf	(_mod_counter+1)^(0+256),w
 10467  0235  0020               	movlb	0	; select bank0
 10468  0236  00AA               	movwf	___awtoft@c+1
 10469  0237  0022               	movlb	2	; select bank2
 10470  0238  0859               	movf	_mod_counter^(0+256),w
 10471  0239  0020               	movlb	0	; select bank0
 10472  023A  00A9               	movwf	___awtoft@c
 10473  023B  3199  21FC  3182   	fcall	___awtoft
 10474  023E  0020               	movlb	0	; select bank0
 10475  023F  0829               	movf	?___awtoft,w
 10476  0240  00B3               	movwf	___ftmul@f1
 10477  0241  082A               	movf	?___awtoft+1,w
 10478  0242  00B4               	movwf	___ftmul@f1+1
 10479  0243  082B               	movf	?___awtoft+2,w
 10480  0244  00B5               	movwf	___ftmul@f1+2
 10481  0245  3193  2384  3182   	fcall	___ftmul
 10482  0248  0020               	movlb	0	; select bank0
 10483  0249  0833               	movf	?___ftmul,w
 10484  024A  0022               	movlb	2	; select bank2
 10485  024B  00B4               	movwf	_main$1660^(0+256)
 10486  024C  0020               	movlb	0	; select bank0
 10487  024D  0834               	movf	?___ftmul+1,w
 10488  024E  0022               	movlb	2	; select bank2
 10489  024F  00B5               	movwf	(_main$1660+1)^(0+256)
 10490  0250  0020               	movlb	0	; select bank0
 10491  0251  0835               	movf	?___ftmul+2,w
 10492  0252  0022               	movlb	2	; select bank2
 10493  0253  00B6               	movwf	(_main$1660+2)^(0+256)
 10494                           
 10495                           ;main.c: 443: mod_value = round(125 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10496  0254  0834               	movf	_main$1660^(0+256),w
 10497  0255  0020               	movlb	0	; select bank0
 10498  0256  00B6               	movwf	___ftmul@f2
 10499  0257  0022               	movlb	2	; select bank2
 10500  0258  0835               	movf	(_main$1660+1)^(0+256),w
 10501  0259  0020               	movlb	0	; select bank0
 10502  025A  00B7               	movwf	___ftmul@f2+1
 10503  025B  0022               	movlb	2	; select bank2
 10504  025C  0836               	movf	(_main$1660+2)^(0+256),w
 10505  025D  0020               	movlb	0	; select bank0
 10506  025E  00B8               	movwf	___ftmul@f2+2
 10507  025F  0022               	movlb	2	; select bank2
 10508  0260  0826               	movf	main@step_size^(0+256),w
 10509  0261  0020               	movlb	0	; select bank0
 10510  0262  00B3               	movwf	___ftmul@f1
 10511  0263  0022               	movlb	2	; select bank2
 10512  0264  0827               	movf	(main@step_size+1)^(0+256),w
 10513  0265  0020               	movlb	0	; select bank0
 10514  0266  00B4               	movwf	___ftmul@f1+1
 10515  0267  0022               	movlb	2	; select bank2
 10516  0268  0828               	movf	(main@step_size+2)^(0+256),w
 10517  0269  0020               	movlb	0	; select bank0
 10518  026A  00B5               	movwf	___ftmul@f1+2
 10519  026B  3193  2384  3182   	fcall	___ftmul
 10520  026E  0020               	movlb	0	; select bank0
 10521  026F  0833               	movf	?___ftmul,w
 10522  0270  0022               	movlb	2	; select bank2
 10523  0271  00B7               	movwf	_main$1661^(0+256)
 10524  0272  0020               	movlb	0	; select bank0
 10525  0273  0834               	movf	?___ftmul+1,w
 10526  0274  0022               	movlb	2	; select bank2
 10527  0275  00B8               	movwf	(_main$1661+1)^(0+256)
 10528  0276  0020               	movlb	0	; select bank0
 10529  0277  0835               	movf	?___ftmul+2,w
 10530  0278  0022               	movlb	2	; select bank2
 10531  0279  00B9               	movwf	(_main$1661+2)^(0+256)
 10532                           
 10533                           ;main.c: 443: mod_value = round(125 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10534  027A  0837               	movf	_main$1661^(0+256),w
 10535  027B  0020               	movlb	0	; select bank0
 10536  027C  00B6               	movwf	___ftmul@f2
 10537  027D  0022               	movlb	2	; select bank2
 10538  027E  0838               	movf	(_main$1661+1)^(0+256),w
 10539  027F  0020               	movlb	0	; select bank0
 10540  0280  00B7               	movwf	___ftmul@f2+1
 10541  0281  0022               	movlb	2	; select bank2
 10542  0282  0839               	movf	(_main$1661+2)^(0+256),w
 10543  0283  0020               	movlb	0	; select bank0
 10544  0284  00B8               	movwf	___ftmul@f2+2
 10545  0285  0022               	movlb	2	; select bank2
 10546  0286  0829               	movf	main@rad_conversion^(0+256),w
 10547  0287  0020               	movlb	0	; select bank0
 10548  0288  00B3               	movwf	___ftmul@f1
 10549  0289  0022               	movlb	2	; select bank2
 10550  028A  082A               	movf	(main@rad_conversion+1)^(0+256),w
 10551  028B  0020               	movlb	0	; select bank0
 10552  028C  00B4               	movwf	___ftmul@f1+1
 10553  028D  0022               	movlb	2	; select bank2
 10554  028E  082B               	movf	(main@rad_conversion+2)^(0+256),w
 10555  028F  0020               	movlb	0	; select bank0
 10556  0290  00B5               	movwf	___ftmul@f1+2
 10557  0291  3193  2384  3182   	fcall	___ftmul
 10558  0294  0020               	movlb	0	; select bank0
 10559  0295  0833               	movf	?___ftmul,w
 10560  0296  0022               	movlb	2	; select bank2
 10561  0297  00BA               	movwf	_main$1662^(0+256)
 10562  0298  0020               	movlb	0	; select bank0
 10563  0299  0834               	movf	?___ftmul+1,w
 10564  029A  0022               	movlb	2	; select bank2
 10565  029B  00BB               	movwf	(_main$1662+1)^(0+256)
 10566  029C  0020               	movlb	0	; select bank0
 10567  029D  0835               	movf	?___ftmul+2,w
 10568  029E  0022               	movlb	2	; select bank2
 10569  029F  00BC               	movwf	(_main$1662+2)^(0+256)
 10570                           
 10571                           ;main.c: 443: mod_value = round(125 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10572  02A0  083A               	movf	_main$1662^(0+256),w
 10573  02A1  0021               	movlb	1	; select bank1
 10574  02A2  00CB               	movwf	sin@f^(0+128)
 10575  02A3  0022               	movlb	2	; select bank2
 10576  02A4  083B               	movf	(_main$1662+1)^(0+256),w
 10577  02A5  0021               	movlb	1	; select bank1
 10578  02A6  00CC               	movwf	(sin@f+1)^(0+128)
 10579  02A7  0022               	movlb	2	; select bank2
 10580  02A8  083C               	movf	(_main$1662+2)^(0+256),w
 10581  02A9  0021               	movlb	1	; select bank1
 10582  02AA  00CD               	movwf	(sin@f+2)^(0+128)
 10583  02AB  3196  2623  3182   	fcall	_sin
 10584  02AE  0021               	movlb	1	; select bank1
 10585  02AF  084B               	movf	?_sin^(0+128),w
 10586  02B0  0022               	movlb	2	; select bank2
 10587  02B1  00BD               	movwf	_main$1663^(0+256)
 10588  02B2  0021               	movlb	1	; select bank1
 10589  02B3  084C               	movf	(?_sin+1)^(0+128),w
 10590  02B4  0022               	movlb	2	; select bank2
 10591  02B5  00BE               	movwf	(_main$1663+1)^(0+256)
 10592  02B6  0021               	movlb	1	; select bank1
 10593  02B7  084D               	movf	(?_sin+2)^(0+128),w
 10594  02B8  0022               	movlb	2	; select bank2
 10595  02B9  00BF               	movwf	(_main$1663+2)^(0+256)
 10596                           
 10597                           ;main.c: 443: mod_value = round(125 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10598  02BA  083D               	movf	_main$1663^(0+256),w
 10599  02BB  0020               	movlb	0	; select bank0
 10600  02BC  00B6               	movwf	___ftmul@f2
 10601  02BD  0022               	movlb	2	; select bank2
 10602  02BE  083E               	movf	(_main$1663+1)^(0+256),w
 10603  02BF  0020               	movlb	0	; select bank0
 10604  02C0  00B7               	movwf	___ftmul@f2+1
 10605  02C1  0022               	movlb	2	; select bank2
 10606  02C2  083F               	movf	(_main$1663+2)^(0+256),w
 10607  02C3  0020               	movlb	0	; select bank0
 10608  02C4  00B8               	movwf	___ftmul@f2+2
 10609  02C5  3000               	movlw	0
 10610  02C6  00B3               	movwf	___ftmul@f1
 10611  02C7  30FA               	movlw	250
 10612  02C8  00B4               	movwf	___ftmul@f1+1
 10613  02C9  3042               	movlw	66
 10614  02CA  2B73               	goto	L3
 10615  02CB                     l3461:	
 10616                           ;main.c: 446: case 2:
 10617                           
 10618                           ;main.c: 445: break;
 10619                           
 10620                           ;main.c: 444: LATCbits.LATC6 = 0;
 10621                           
 10622                           ;main.c: 443: mod_value = round(125 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10623                           
 10624                           
 10625                           ;main.c: 448: mod_value = round(150 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10626  02CB  0833               	movf	(main@freq+1)^(0+256),w
 10627  02CC  0020               	movlb	0	; select bank0
 10628  02CD  00AA               	movwf	___awtoft@c+1
 10629  02CE  0022               	movlb	2	; select bank2
 10630  02CF  0832               	movf	main@freq^(0+256),w
 10631  02D0  0020               	movlb	0	; select bank0
 10632  02D1  00A9               	movwf	___awtoft@c
 10633  02D2  3199  21FC  3182   	fcall	___awtoft
 10634  02D5  0020               	movlb	0	; select bank0
 10635  02D6  0829               	movf	?___awtoft,w
 10636  02D7  00B6               	movwf	___ftmul@f2
 10637  02D8  082A               	movf	?___awtoft+1,w
 10638  02D9  00B7               	movwf	___ftmul@f2+1
 10639  02DA  082B               	movf	?___awtoft+2,w
 10640  02DB  00B8               	movwf	___ftmul@f2+2
 10641  02DC  0022               	movlb	2	; select bank2
 10642  02DD  085A               	movf	(_mod_counter+1)^(0+256),w
 10643  02DE  0020               	movlb	0	; select bank0
 10644  02DF  00AA               	movwf	___awtoft@c+1
 10645  02E0  0022               	movlb	2	; select bank2
 10646  02E1  0859               	movf	_mod_counter^(0+256),w
 10647  02E2  0020               	movlb	0	; select bank0
 10648  02E3  00A9               	movwf	___awtoft@c
 10649  02E4  3199  21FC  3182   	fcall	___awtoft
 10650  02E7  0020               	movlb	0	; select bank0
 10651  02E8  0829               	movf	?___awtoft,w
 10652  02E9  00B3               	movwf	___ftmul@f1
 10653  02EA  082A               	movf	?___awtoft+1,w
 10654  02EB  00B4               	movwf	___ftmul@f1+1
 10655  02EC  082B               	movf	?___awtoft+2,w
 10656  02ED  00B5               	movwf	___ftmul@f1+2
 10657  02EE  3193  2384  3182   	fcall	___ftmul
 10658  02F1  0020               	movlb	0	; select bank0
 10659  02F2  0833               	movf	?___ftmul,w
 10660  02F3  0022               	movlb	2	; select bank2
 10661  02F4  00B4               	movwf	_main$1660^(0+256)
 10662  02F5  0020               	movlb	0	; select bank0
 10663  02F6  0834               	movf	?___ftmul+1,w
 10664  02F7  0022               	movlb	2	; select bank2
 10665  02F8  00B5               	movwf	(_main$1660+1)^(0+256)
 10666  02F9  0020               	movlb	0	; select bank0
 10667  02FA  0835               	movf	?___ftmul+2,w
 10668  02FB  0022               	movlb	2	; select bank2
 10669  02FC  00B6               	movwf	(_main$1660+2)^(0+256)
 10670                           
 10671                           ;main.c: 448: mod_value = round(150 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10672  02FD  0834               	movf	_main$1660^(0+256),w
 10673  02FE  0020               	movlb	0	; select bank0
 10674  02FF  00B6               	movwf	___ftmul@f2
 10675  0300  0022               	movlb	2	; select bank2
 10676  0301  0835               	movf	(_main$1660+1)^(0+256),w
 10677  0302  0020               	movlb	0	; select bank0
 10678  0303  00B7               	movwf	___ftmul@f2+1
 10679  0304  0022               	movlb	2	; select bank2
 10680  0305  0836               	movf	(_main$1660+2)^(0+256),w
 10681  0306  0020               	movlb	0	; select bank0
 10682  0307  00B8               	movwf	___ftmul@f2+2
 10683  0308  0022               	movlb	2	; select bank2
 10684  0309  0826               	movf	main@step_size^(0+256),w
 10685  030A  0020               	movlb	0	; select bank0
 10686  030B  00B3               	movwf	___ftmul@f1
 10687  030C  0022               	movlb	2	; select bank2
 10688  030D  0827               	movf	(main@step_size+1)^(0+256),w
 10689  030E  0020               	movlb	0	; select bank0
 10690  030F  00B4               	movwf	___ftmul@f1+1
 10691  0310  0022               	movlb	2	; select bank2
 10692  0311  0828               	movf	(main@step_size+2)^(0+256),w
 10693  0312  0020               	movlb	0	; select bank0
 10694  0313  00B5               	movwf	___ftmul@f1+2
 10695  0314  3193  2384  3182   	fcall	___ftmul
 10696  0317  0020               	movlb	0	; select bank0
 10697  0318  0833               	movf	?___ftmul,w
 10698  0319  0022               	movlb	2	; select bank2
 10699  031A  00B7               	movwf	_main$1661^(0+256)
 10700  031B  0020               	movlb	0	; select bank0
 10701  031C  0834               	movf	?___ftmul+1,w
 10702  031D  0022               	movlb	2	; select bank2
 10703  031E  00B8               	movwf	(_main$1661+1)^(0+256)
 10704  031F  0020               	movlb	0	; select bank0
 10705  0320  0835               	movf	?___ftmul+2,w
 10706  0321  0022               	movlb	2	; select bank2
 10707  0322  00B9               	movwf	(_main$1661+2)^(0+256)
 10708                           
 10709                           ;main.c: 448: mod_value = round(150 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10710  0323  0837               	movf	_main$1661^(0+256),w
 10711  0324  0020               	movlb	0	; select bank0
 10712  0325  00B6               	movwf	___ftmul@f2
 10713  0326  0022               	movlb	2	; select bank2
 10714  0327  0838               	movf	(_main$1661+1)^(0+256),w
 10715  0328  0020               	movlb	0	; select bank0
 10716  0329  00B7               	movwf	___ftmul@f2+1
 10717  032A  0022               	movlb	2	; select bank2
 10718  032B  0839               	movf	(_main$1661+2)^(0+256),w
 10719  032C  0020               	movlb	0	; select bank0
 10720  032D  00B8               	movwf	___ftmul@f2+2
 10721  032E  0022               	movlb	2	; select bank2
 10722  032F  0829               	movf	main@rad_conversion^(0+256),w
 10723  0330  0020               	movlb	0	; select bank0
 10724  0331  00B3               	movwf	___ftmul@f1
 10725  0332  0022               	movlb	2	; select bank2
 10726  0333  082A               	movf	(main@rad_conversion+1)^(0+256),w
 10727  0334  0020               	movlb	0	; select bank0
 10728  0335  00B4               	movwf	___ftmul@f1+1
 10729  0336  0022               	movlb	2	; select bank2
 10730  0337  082B               	movf	(main@rad_conversion+2)^(0+256),w
 10731  0338  0020               	movlb	0	; select bank0
 10732  0339  00B5               	movwf	___ftmul@f1+2
 10733  033A  3193  2384  3182   	fcall	___ftmul
 10734  033D  0020               	movlb	0	; select bank0
 10735  033E  0833               	movf	?___ftmul,w
 10736  033F  0022               	movlb	2	; select bank2
 10737  0340  00BA               	movwf	_main$1662^(0+256)
 10738  0341  0020               	movlb	0	; select bank0
 10739  0342  0834               	movf	?___ftmul+1,w
 10740  0343  0022               	movlb	2	; select bank2
 10741  0344  00BB               	movwf	(_main$1662+1)^(0+256)
 10742  0345  0020               	movlb	0	; select bank0
 10743  0346  0835               	movf	?___ftmul+2,w
 10744  0347  0022               	movlb	2	; select bank2
 10745  0348  00BC               	movwf	(_main$1662+2)^(0+256)
 10746                           
 10747                           ;main.c: 448: mod_value = round(150 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10748  0349  083A               	movf	_main$1662^(0+256),w
 10749  034A  0021               	movlb	1	; select bank1
 10750  034B  00CB               	movwf	sin@f^(0+128)
 10751  034C  0022               	movlb	2	; select bank2
 10752  034D  083B               	movf	(_main$1662+1)^(0+256),w
 10753  034E  0021               	movlb	1	; select bank1
 10754  034F  00CC               	movwf	(sin@f+1)^(0+128)
 10755  0350  0022               	movlb	2	; select bank2
 10756  0351  083C               	movf	(_main$1662+2)^(0+256),w
 10757  0352  0021               	movlb	1	; select bank1
 10758  0353  00CD               	movwf	(sin@f+2)^(0+128)
 10759  0354  3196  2623  3182   	fcall	_sin
 10760  0357  0021               	movlb	1	; select bank1
 10761  0358  084B               	movf	?_sin^(0+128),w
 10762  0359  0022               	movlb	2	; select bank2
 10763  035A  00BD               	movwf	_main$1663^(0+256)
 10764  035B  0021               	movlb	1	; select bank1
 10765  035C  084C               	movf	(?_sin+1)^(0+128),w
 10766  035D  0022               	movlb	2	; select bank2
 10767  035E  00BE               	movwf	(_main$1663+1)^(0+256)
 10768  035F  0021               	movlb	1	; select bank1
 10769  0360  084D               	movf	(?_sin+2)^(0+128),w
 10770  0361  0022               	movlb	2	; select bank2
 10771  0362  00BF               	movwf	(_main$1663+2)^(0+256)
 10772                           
 10773                           ;main.c: 448: mod_value = round(150 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10774  0363  083D               	movf	_main$1663^(0+256),w
 10775  0364  0020               	movlb	0	; select bank0
 10776  0365  00B6               	movwf	___ftmul@f2
 10777  0366  0022               	movlb	2	; select bank2
 10778  0367  083E               	movf	(_main$1663+1)^(0+256),w
 10779  0368  0020               	movlb	0	; select bank0
 10780  0369  00B7               	movwf	___ftmul@f2+1
 10781  036A  0022               	movlb	2	; select bank2
 10782  036B  083F               	movf	(_main$1663+2)^(0+256),w
 10783  036C  0020               	movlb	0	; select bank0
 10784  036D  00B8               	movwf	___ftmul@f2+2
 10785  036E  3000               	movlw	0
 10786  036F  00B3               	movwf	___ftmul@f1
 10787  0370  3016               	movlw	22
 10788  0371  00B4               	movwf	___ftmul@f1+1
 10789  0372  3043               	movlw	67
 10790  0373                     L3:	
 10791  0373  00B5               	movwf	___ftmul@f1+2
 10792  0374  3193  2384  3182   	fcall	___ftmul
 10793  0377  0020               	movlb	0	; select bank0
 10794  0378  0833               	movf	?___ftmul,w
 10795  0379  0021               	movlb	1	; select bank1
 10796  037A  00D8               	movwf	round@x^(0+128)
 10797  037B  0020               	movlb	0	; select bank0
 10798  037C  0834               	movf	?___ftmul+1,w
 10799  037D  0021               	movlb	1	; select bank1
 10800  037E  00D9               	movwf	(round@x+1)^(0+128)
 10801  037F  0020               	movlb	0	; select bank0
 10802  0380  0835               	movf	?___ftmul+2,w
 10803  0381  0021               	movlb	1	; select bank1
 10804  0382  00DA               	movwf	(round@x+2)^(0+128)
 10805  0383  3190  20B0  3182   	fcall	_round
 10806  0386  0021               	movlb	1	; select bank1
 10807  0387  0858               	movf	?_round^(0+128),w
 10808  0388  0022               	movlb	2	; select bank2
 10809  0389  00C0               	movwf	_main$1664^(0+256)
 10810  038A  0021               	movlb	1	; select bank1
 10811  038B  0859               	movf	(?_round+1)^(0+128),w
 10812  038C  0022               	movlb	2	; select bank2
 10813  038D  00C1               	movwf	(_main$1664+1)^(0+256)
 10814  038E  0021               	movlb	1	; select bank1
 10815  038F  085A               	movf	(?_round+2)^(0+128),w
 10816  0390  0022               	movlb	2	; select bank2
 10817  0391  00C2               	movwf	(_main$1664+2)^(0+256)
 10818                           
 10819                           ;main.c: 448: mod_value = round(150 * sin(freq * step_size * mod_counter * rad_conversio
      +                          n)) ;
 10820  0392  0840               	movf	_main$1664^(0+256),w
 10821  0393  0021               	movlb	1	; select bank1
 10822  0394  00AF               	movwf	___fttol@f1^(0+128)
 10823  0395  0022               	movlb	2	; select bank2
 10824  0396  0841               	movf	(_main$1664+1)^(0+256),w
 10825  0397  0021               	movlb	1	; select bank1
 10826  0398  00B0               	movwf	(___fttol@f1+1)^(0+128)
 10827  0399  0022               	movlb	2	; select bank2
 10828  039A  0842               	movf	(_main$1664+2)^(0+256),w
 10829  039B  0021               	movlb	1	; select bank1
 10830  039C  00B1               	movwf	(___fttol@f1+2)^(0+128)
 10831  039D  3191  21A3  3182   	fcall	___fttol
 10832  03A0  0021               	movlb	1	; select bank1
 10833  03A1  0830               	movf	(?___fttol^(0+128)+1),w
 10834  03A2  0023               	movlb	3	; select bank3
 10835  03A3  00D7               	movwf	(_mod_value+1)^(0+384)
 10836  03A4  0021               	movlb	1	; select bank1
 10837  03A5  082F               	movf	?___fttol^(0+128),w
 10838  03A6  0023               	movlb	3	; select bank3
 10839  03A7  00D6               	movwf	_mod_value^(0+384)
 10840  03A8  2BD2               	goto	l3487
 10841  03A9                     l3471:	
 10842                           ;main.c: 451: case 3:
 10843                           
 10844                           ;main.c: 450: break;
 10845                           
 10846                           ;main.c: 449: LATCbits.LATC6 = 0;
 10847                           
 10848                           
 10849                           ;main.c: 453: mod_value = mod1[mod_counter];
 10850  03A9  3559               	lslf	_mod_counter^(0+256),w
 10851  03AA  3EA0               	addlw	(low (_mod1| (0+512)))& (0+255)
 10852  03AB  0086               	movwf	6
 10853  03AC  3002               	movlw	2	; select bank5/6
 10854  03AD  0087               	movwf	7
 10855  03AE  3F40               	moviw [0]fsr1
 10856  03AF  0023               	movlb	3	; select bank3
 10857  03B0  00D6               	movwf	_mod_value^(0+384)
 10858  03B1  3F41               	moviw [1]fsr1
 10859  03B2  2BBC               	goto	L2
 10860  03B3                     l3475:	
 10861                           ;main.c: 456: case 4:
 10862                           
 10863                           ;main.c: 455: break;
 10864                           
 10865                           ;main.c: 454: LATCbits.LATC6 = 0;
 10866                           
 10867                           
 10868                           ;main.c: 457: mod_value = mod4[mod_counter];
 10869  03B3  3559               	lslf	_mod_counter^(0+256),w
 10870  03B4  3EA0               	addlw	(low (_mod4| (0+768)))& (0+255)
 10871  03B5  0086               	movwf	6
 10872  03B6  3003               	movlw	3	; select bank7/8
 10873  03B7  0087               	movwf	7
 10874  03B8  3F40               	moviw [0]fsr1
 10875  03B9  0023               	movlb	3	; select bank3
 10876  03BA  00D6               	movwf	_mod_value^(0+384)
 10877  03BB  3F41               	moviw [1]fsr1
 10878  03BC                     L2:	
 10879  03BC  00D7               	movwf	(_mod_value+1)^(0+384)
 10880  03BD  2BD2               	goto	l3487
 10881  03BE                     l3479:	
 10882                           ;main.c: 460: case 5:
 10883                           
 10884                           ;main.c: 459: break;
 10885                           
 10886                           ;main.c: 458: LATCbits.LATC6 = 0;
 10887                           
 10888                           
 10889                           ;main.c: 461: mod_value = mod1[mod_counter];
 10890  03BE  3559               	lslf	_mod_counter^(0+256),w
 10891  03BF  3EA0               	addlw	(low (_mod1| (0+512)))& (0+255)
 10892  03C0  0086               	movwf	6
 10893  03C1  3002               	movlw	2	; select bank5/6
 10894  03C2  0087               	movwf	7
 10895  03C3  3F40               	moviw [0]fsr1
 10896  03C4  0023               	movlb	3	; select bank3
 10897  03C5  00D6               	movwf	_mod_value^(0+384)
 10898  03C6  3F41               	moviw [1]fsr1
 10899  03C7  00D7               	movwf	(_mod_value+1)^(0+384)
 10900                           
 10901                           ;main.c: 462: adjusted_pot_value = 1275;
 10902  03C8  30FB               	movlw	251
 10903  03C9  0022               	movlb	2	; select bank2
 10904  03CA  00A4               	movwf	main@adjusted_pot_value^(0+256)
 10905  03CB  3004               	movlw	4
 10906  03CC  00A5               	movwf	(main@adjusted_pot_value^(0+256)+1)
 10907                           
 10908                           ;main.c: 463: LATCbits.LATC6 = 1;
 10909  03CD  170E               	bsf	14,6	;volatile
 10910                           
 10911                           ;main.c: 464: break;
 10912  03CE  2BEE               	goto	l3493
 10913  03CF                     l3485:	
 10914                           ;main.c: 465: case 6:
 10915                           
 10916                           
 10917                           ;main.c: 466: mod_value = 0;
 10918  03CF  0023               	movlb	3	; select bank3
 10919  03D0  01D6               	clrf	_mod_value^(0+384)
 10920  03D1  01D7               	clrf	(_mod_value+1)^(0+384)
 10921  03D2                     l3487:	
 10922                           
 10923                           ;main.c: 467: LATCbits.LATC6 = 0;
 10924  03D2  0022               	movlb	2	; select bank2
 10925  03D3  130E               	bcf	14,6	;volatile
 10926                           
 10927                           ;main.c: 469: }
 10928                           
 10929                           ;main.c: 468: break;
 10930  03D4  2BEE               	goto	l3493
 10931  03D5                     l3491:	
 10932                           
 10933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10934                           ; Switch size 1, requested type "space"
 10935                           ; Number of cases is 1, Range of values is 0 to 0
 10936                           ; switch strategies available:
 10937                           ; Name         Instructions Cycles
 10938                           ; simple_byte            4     3 (average)
 10939                           ; direct_byte            8     6 (fixed)
 10940                           ; jumptable            260     6 (fixed)
 10941                           ;	Chosen strategy is simple_byte
 10942  03D5  0866               	movf	(_bottom_push_state+1)^(0+256),w
 10943  03D6  3A00               	xorlw	0	; case 0
 10944  03D7  1903               	skipnz
 10945  03D8  2BDA               	goto	l3623
 10946  03D9  2BEE               	goto	l3493
 10947  03DA                     l3623:	
 10948                           
 10949                           ; Switch size 1, requested type "space"
 10950                           ; Number of cases is 6, Range of values is 1 to 6
 10951                           ; switch strategies available:
 10952                           ; Name         Instructions Cycles
 10953                           ; simple_byte           19    10 (average)
 10954                           ; direct_byte           21     9 (fixed)
 10955                           ; jumptable            263     9 (fixed)
 10956                           ;	Chosen strategy is simple_byte
 10957  03DA  0865               	movf	_bottom_push_state^(0+256),w
 10958  03DB  3A01               	xorlw	1	; case 1
 10959  03DC  1903               	skipnz
 10960  03DD  2A22               	goto	l3451
 10961  03DE  3A03               	xorlw	3	; case 2
 10962  03DF  1903               	skipnz
 10963  03E0  2ACB               	goto	l3461
 10964  03E1  3A01               	xorlw	1	; case 3
 10965  03E2  1903               	skipnz
 10966  03E3  2BA9               	goto	l3471
 10967  03E4  3A07               	xorlw	7	; case 4
 10968  03E5  1903               	skipnz
 10969  03E6  2BB3               	goto	l3475
 10970  03E7  3A01               	xorlw	1	; case 5
 10971  03E8  1903               	skipnz
 10972  03E9  2BBE               	goto	l3479
 10973  03EA  3A03               	xorlw	3	; case 6
 10974  03EB  1903               	skipnz
 10975  03EC  2BCF               	goto	l3485
 10976  03ED  2BEE               	goto	l3493
 10977  03EE                     l3493:	
 10978                           
 10979                           ;main.c: 470: mod_value = modulation(mod_value, adjusted_pot_value);
 10980  03EE  0023               	movlb	3	; select bank3
 10981  03EF  0857               	movf	(_mod_value+1)^(0+384),w
 10982  03F0  0020               	movlb	0	; select bank0
 10983  03F1  00B6               	movwf	modulation@x+1
 10984  03F2  0023               	movlb	3	; select bank3
 10985  03F3  0856               	movf	_mod_value^(0+384),w
 10986  03F4  0020               	movlb	0	; select bank0
 10987  03F5  00B5               	movwf	modulation@x
 10988  03F6  0022               	movlb	2	; select bank2
 10989  03F7  0825               	movf	(main@adjusted_pot_value+1)^(0+256),w
 10990  03F8  0020               	movlb	0	; select bank0
 10991  03F9  00B8               	movwf	modulation@y+1
 10992  03FA  0022               	movlb	2	; select bank2
 10993  03FB  0824               	movf	main@adjusted_pot_value^(0+256),w
 10994  03FC  0020               	movlb	0	; select bank0
 10995  03FD  00B7               	movwf	modulation@y
 10996  03FE  319C  2476  3182   	fcall	_modulation
 10997  0401  0020               	movlb	0	; select bank0
 10998  0402  0836               	movf	?_modulation+1,w
 10999  0403  0023               	movlb	3	; select bank3
 11000  0404  00D7               	movwf	(_mod_value+1)^(0+384)
 11001  0405  0020               	movlb	0	; select bank0
 11002  0406  0835               	movf	?_modulation,w
 11003  0407  0023               	movlb	3	; select bank3
 11004  0408  00D6               	movwf	_mod_value^(0+384)
 11005                           
 11006                           ;main.c: 471: CCPR9 = mod_value / 2;
 11007  0409  3002               	movlw	2
 11008  040A  0020               	movlb	0	; select bank0
 11009  040B  00A0               	movwf	___awdiv@divisor
 11010  040C  3000               	movlw	0
 11011  040D  00A1               	movwf	___awdiv@divisor+1
 11012  040E  0023               	movlb	3	; select bank3
 11013  040F  0857               	movf	(_mod_value+1)^(0+384),w
 11014  0410  0020               	movlb	0	; select bank0
 11015  0411  00A3               	movwf	___awdiv@dividend+1
 11016  0412  0023               	movlb	3	; select bank3
 11017  0413  0856               	movf	_mod_value^(0+384),w
 11018  0414  0020               	movlb	0	; select bank0
 11019  0415  00A2               	movwf	___awdiv@dividend
 11020  0416  319D  25DB  3182   	fcall	___awdiv
 11021  0419  0020               	movlb	0	; select bank0
 11022  041A  0821               	movf	?___awdiv+1,w
 11023  041B  002C               	movlb	12	; select bank12
 11024  041C  009B               	movwf	27	;volatile
 11025  041D  0020               	movlb	0	; select bank0
 11026  041E  0820               	movf	?___awdiv,w
 11027  041F  002C               	movlb	12	; select bank12
 11028  0420  009A               	movwf	26	;volatile
 11029                           
 11030                           ;main.c: 472: mod_timer = 0;
 11031  0421  3000               	movlw	0
 11032  0422  0023               	movlb	3	; select bank3
 11033  0423  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 11034  0424  3000               	movlw	0
 11035  0425  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 11036  0426  3000               	movlw	0
 11037  0427  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 11038  0428  3000               	movlw	0
 11039  0429  00B8               	movwf	_mod_timer^(0+384)	;volatile
 11040  042A                     l3497:	
 11041                           
 11042                           ;main.c: 473: }
 11043                           ;main.c: 478: if (delay_time_changed == 1) {
 11044  042A  035E               	decf	_delay_time_changed^(0+384),w
 11045  042B  045F               	iorwf	(_delay_time_changed+1)^(0+384),w
 11046  042C  1D03               	btfss	3,2
 11047  042D  2CF9               	goto	L8
 11048                           
 11049                           ;main.c: 479: delay_time = baseline_delay_time;
 11050  042E  0022               	movlb	2	; select bank2
 11051  042F  0860               	movf	(_baseline_delay_time+3)^(0+256),w	;volatile
 11052  0430  00E4               	movwf	(_delay_time+3)^(0+256)	;volatile
 11053  0431  085F               	movf	(_baseline_delay_time+2)^(0+256),w	;volatile
 11054  0432  00E3               	movwf	(_delay_time+2)^(0+256)	;volatile
 11055  0433  085E               	movf	(_baseline_delay_time+1)^(0+256),w	;volatile
 11056  0434  00E2               	movwf	(_delay_time+1)^(0+256)	;volatile
 11057  0435  085D               	movf	_baseline_delay_time^(0+256),w	;volatile
 11058  0436  00E1               	movwf	_delay_time^(0+256)	;volatile
 11059                           
 11060                           ;main.c: 480: delay_time = set_subdivision(baseline_delay_time, top_push_state);
 11061  0437  085E               	movf	(_baseline_delay_time+1)^(0+256),w	;volatile
 11062  0438  0021               	movlb	1	; select bank1
 11063  0439  00BE               	movwf	(set_subdivision@x+1)^(0+128)
 11064  043A  0022               	movlb	2	; select bank2
 11065  043B  085D               	movf	_baseline_delay_time^(0+256),w	;volatile
 11066  043C  0021               	movlb	1	; select bank1
 11067  043D  00BD               	movwf	set_subdivision@x^(0+128)
 11068  043E  0022               	movlb	2	; select bank2
 11069  043F  086E               	movf	(_top_push_state+1)^(0+256),w	;volatile
 11070  0440  0021               	movlb	1	; select bank1
 11071  0441  00C0               	movwf	(set_subdivision@y+1)^(0+128)
 11072  0442  0022               	movlb	2	; select bank2
 11073  0443  086D               	movf	_top_push_state^(0+256),w	;volatile
 11074  0444  0021               	movlb	1	; select bank1
 11075  0445  00BF               	movwf	set_subdivision@y^(0+128)
 11076  0446  3186  26F9  3182   	fcall	_set_subdivision
 11077  0449  0021               	movlb	1	; select bank1
 11078  044A  083D               	movf	?_set_subdivision^(0+128),w
 11079  044B  0022               	movlb	2	; select bank2
 11080  044C  00E1               	movwf	_delay_time^(0+256)	;volatile
 11081  044D  0021               	movlb	1	; select bank1
 11082  044E  083E               	movf	(?_set_subdivision+1)^(0+128),w
 11083  044F  0022               	movlb	2	; select bank2
 11084  0450  00E2               	movwf	(_delay_time+1)^(0+256)	;volatile
 11085  0451  0D89               	rlf	9,f
 11086  0452  3B89               	subwfb	9,f
 11087  0453  0989               	comf	9,f
 11088  0454  00E3               	movwf	(_delay_time+2)^(0+256)	;volatile
 11089  0455  00E4               	movwf	(_delay_time+3)^(0+256)	;volatile
 11090                           
 11091                           ;main.c: 481: delayfound = 0;
 11092  0456  0023               	movlb	3	; select bank3
 11093  0457  01D0               	clrf	_delayfound^(0+384)
 11094  0458  01D1               	clrf	(_delayfound+1)^(0+384)
 11095                           
 11096                           ;main.c: 482: delay_counter = 0;
 11097  0459  01CE               	clrf	_delay_counter^(0+384)
 11098  045A  01CF               	clrf	(_delay_counter+1)^(0+384)
 11099  045B                     l3513:	
 11100                           ;main.c: 483: while (delayfound == 0) {
 11101                           
 11102  045B  0023               	movlb	3	; select bank3
 11103  045C  0850               	movf	_delayfound^(0+384),w
 11104  045D  0451               	iorwf	(_delayfound+1)^(0+384),w
 11105  045E  1D03               	btfss	3,2
 11106  045F  2CBE               	goto	l3515
 11107                           
 11108                           ;main.c: 484: if (delay[delay_counter] <= delay_time * 2) {
 11109  0460  084F               	movf	(_delay_counter+1)^(0+384),w
 11110  0461  0021               	movlb	1	; select bank1
 11111  0462  00DF               	movwf	(??_main^(0+128)+1)
 11112  0463  0023               	movlb	3	; select bank3
 11113  0464  084E               	movf	_delay_counter^(0+384),w
 11114  0465  0021               	movlb	1	; select bank1
 11115  0466  00DE               	movwf	??_main^(0+128)
 11116  0467  35DE               	lslf	??_main^(0+128),f
 11117  0468  0DDF               	rlf	(??_main^(0+128)+1),f
 11118  0469  30F2               	movlw	242
 11119  046A  00E0               	movwf	(??_main+2)^(0+128)
 11120  046B  3023               	movlw	35
 11121  046C  00E1               	movwf	((??_main+2)^(0+128)+1)
 11122  046D  085E               	movf	??_main^(0+128),w
 11123  046E  0760               	addwf	(??_main+2)^(0+128),w
 11124  046F  0086               	movwf	6
 11125  0470  085F               	movf	(??_main+1)^(0+128),w
 11126  0471  3D61               	addwfc	(??_main+3)^(0+128),w
 11127  0472  0087               	movwf	7
 11128  0473  3F40               	moviw [0]fsr1
 11129  0474  00E2               	movwf	(??_main+4)^(0+128)
 11130  0475  3F41               	moviw [1]fsr1
 11131  0476  00E3               	movwf	((??_main+4)^(0+128)+1)
 11132  0477  0862               	movf	(??_main+4)^(0+128),w
 11133  0478  00E4               	movwf	(??_main+6)^(0+128)
 11134  0479  0863               	movf	(??_main+5)^(0+128),w
 11135  047A  00E5               	movwf	((??_main+6)^(0+128)+1)
 11136  047B  3000               	movlw	0
 11137  047C  1BE5               	btfsc	((??_main+6)^(0+128)+1),7
 11138  047D  30FF               	movlw	255
 11139  047E  00E6               	movwf	((??_main+6)^(0+128)+2)
 11140  047F  00E7               	movwf	((??_main+6)^(0+128)+3)
 11141  0480  0022               	movlb	2	; select bank2
 11142  0481  0861               	movf	_delay_time^(0+256),w	;volatile
 11143  0482  0021               	movlb	1	; select bank1
 11144  0483  00E8               	movwf	(??_main+10)^(0+128)
 11145  0484  0022               	movlb	2	; select bank2
 11146  0485  0862               	movf	(_delay_time+1)^(0+256),w	;volatile
 11147  0486  0021               	movlb	1	; select bank1
 11148  0487  00E9               	movwf	((??_main+10)^(0+128)+1)
 11149  0488  0022               	movlb	2	; select bank2
 11150  0489  0863               	movf	(_delay_time+2)^(0+256),w	;volatile
 11151  048A  0021               	movlb	1	; select bank1
 11152  048B  00EA               	movwf	((??_main+10)^(0+128)+2)
 11153  048C  0022               	movlb	2	; select bank2
 11154  048D  0864               	movf	(_delay_time+3)^(0+256),w	;volatile
 11155  048E  0021               	movlb	1	; select bank1
 11156  048F  00EB               	movwf	((??_main+10)^(0+128)+3)
 11157  0490  3001               	movlw	1
 11158  0491                     u3885:	
 11159  0491  35E8               	lslf	(??_main+10)^(0+128),f
 11160  0492  0DE9               	rlf	((??_main+10)^(0+128)+1),f
 11161  0493  0DEA               	rlf	((??_main+10)^(0+128)+2),f
 11162  0494  0DEB               	rlf	((??_main+10)^(0+128)+3),f
 11163  0495  0B89               	decfsz	9,f
 11164  0496  2C91               	goto	u3885
 11165  0497  086B               	movf	(??_main+13)^(0+128),w
 11166  0498  3A80               	xorlw	128
 11167  0499  00EC               	movwf	(??_main+14)^(0+128)
 11168  049A  0867               	movf	(??_main+9)^(0+128),w
 11169  049B  3A80               	xorlw	128
 11170  049C  026C               	subwf	(??_main+14)^(0+128),w
 11171  049D  1D03               	skipz
 11172  049E  2CA9               	goto	u3893
 11173  049F  0866               	movf	(??_main+8)^(0+128),w
 11174  04A0  026A               	subwf	(??_main+12)^(0+128),w
 11175  04A1  1D03               	skipz
 11176  04A2  2CA9               	goto	u3893
 11177  04A3  0865               	movf	(??_main+7)^(0+128),w
 11178  04A4  0269               	subwf	(??_main+11)^(0+128),w
 11179  04A5  1D03               	skipz
 11180  04A6  2CA9               	goto	u3893
 11181  04A7  0864               	movf	(??_main+6)^(0+128),w
 11182  04A8  0268               	subwf	(??_main+10)^(0+128),w
 11183  04A9                     u3893:	
 11184  04A9  1C03               	skipc
 11185  04AA  2CB8               	goto	l3511
 11186                           
 11187                           ;main.c: 485: delayfound = 1;
 11188  04AB  3001               	movlw	1
 11189  04AC  0023               	movlb	3	; select bank3
 11190  04AD  00D0               	movwf	_delayfound^(0+384)
 11191  04AE  3000               	movlw	0
 11192  04AF  00D1               	movwf	(_delayfound^(0+384)+1)
 11193                           
 11194                           ;main.c: 486: CCPR1 = delay_counter;
 11195  04B0  084F               	movf	(_delay_counter+1)^(0+384),w
 11196  04B1  0025               	movlb	5	; select bank5
 11197  04B2  0092               	movwf	18	;volatile
 11198  04B3  0023               	movlb	3	; select bank3
 11199  04B4  084E               	movf	_delay_counter^(0+384),w
 11200  04B5  0025               	movlb	5	; select bank5
 11201  04B6  0091               	movwf	17	;volatile
 11202                           
 11203                           ;main.c: 487: } else {
 11204  04B7  2C5B               	goto	l3513
 11205  04B8                     l3511:	
 11206                           
 11207                           ;main.c: 488: delay_counter++;
 11208  04B8  3001               	movlw	1
 11209  04B9  0023               	movlb	3	; select bank3
 11210  04BA  07CE               	addwf	_delay_counter^(0+384),f
 11211  04BB  3000               	movlw	0
 11212  04BC  3DCF               	addwfc	(_delay_counter+1)^(0+384),f
 11213  04BD  2C5B               	goto	l3513
 11214  04BE                     l3515:	
 11215                           
 11216                           ;main.c: 489: }
 11217                           ;main.c: 490: }
 11218                           ;main.c: 491: mod_delay_time = delay_time / 7.5;
 11219  04BE  0022               	movlb	2	; select bank2
 11220  04BF  0864               	movf	(_delay_time+3)^(0+256),w	;volatile
 11221  04C0  0020               	movlb	0	; select bank0
 11222  04C1  00AB               	movwf	___altoft@c+3
 11223  04C2  0022               	movlb	2	; select bank2
 11224  04C3  0863               	movf	(_delay_time+2)^(0+256),w	;volatile
 11225  04C4  0020               	movlb	0	; select bank0
 11226  04C5  00AA               	movwf	___altoft@c+2
 11227  04C6  0022               	movlb	2	; select bank2
 11228  04C7  0862               	movf	(_delay_time+1)^(0+256),w	;volatile
 11229  04C8  0020               	movlb	0	; select bank0
 11230  04C9  00A9               	movwf	___altoft@c+1
 11231  04CA  0022               	movlb	2	; select bank2
 11232  04CB  0861               	movf	_delay_time^(0+256),w	;volatile
 11233  04CC  0020               	movlb	0	; select bank0
 11234  04CD  00A8               	movwf	___altoft@c
 11235  04CE  319C  2439  3182   	fcall	___altoft
 11236  04D1  0020               	movlb	0	; select bank0
 11237  04D2  0828               	movf	?___altoft,w
 11238  04D3  00DD               	movwf	___ftdiv@f1
 11239  04D4  0829               	movf	?___altoft+1,w
 11240  04D5  00DE               	movwf	___ftdiv@f1+1
 11241  04D6  082A               	movf	?___altoft+2,w
 11242  04D7  00DF               	movwf	___ftdiv@f1+2
 11243  04D8  3000               	movlw	0
 11244  04D9  00DA               	movwf	___ftdiv@f2
 11245  04DA  30F0               	movlw	240
 11246  04DB  00DB               	movwf	___ftdiv@f2+1
 11247  04DC  3040               	movlw	64
 11248  04DD  00DC               	movwf	___ftdiv@f2+2
 11249  04DE  3192  222A  3182   	fcall	___ftdiv
 11250  04E1  0020               	movlb	0	; select bank0
 11251  04E2  085A               	movf	?___ftdiv,w
 11252  04E3  0021               	movlb	1	; select bank1
 11253  04E4  00AF               	movwf	___fttol@f1^(0+128)
 11254  04E5  0020               	movlb	0	; select bank0
 11255  04E6  085B               	movf	?___ftdiv+1,w
 11256  04E7  0021               	movlb	1	; select bank1
 11257  04E8  00B0               	movwf	(___fttol@f1+1)^(0+128)
 11258  04E9  0020               	movlb	0	; select bank0
 11259  04EA  085C               	movf	?___ftdiv+2,w
 11260  04EB  0021               	movlb	1	; select bank1
 11261  04EC  00B1               	movwf	(___fttol@f1+2)^(0+128)
 11262  04ED  3191  21A3         	fcall	___fttol
 11263  04EF  0021               	movlb	1	; select bank1
 11264  04F0  0830               	movf	(?___fttol^(0+128)+1),w
 11265  04F1  0023               	movlb	3	; select bank3
 11266  04F2  00EB               	movwf	(_mod_delay_time+1)^(0+384)
 11267  04F3  0021               	movlb	1	; select bank1
 11268  04F4  082F               	movf	?___fttol^(0+128),w
 11269  04F5  0023               	movlb	3	; select bank3
 11270  04F6  00EA               	movwf	_mod_delay_time^(0+384)
 11271                           
 11272                           ;main.c: 493: delay_time_changed = 0;
 11273  04F7  01DE               	clrf	_delay_time_changed^(0+384)
 11274  04F8  01DF               	clrf	(_delay_time_changed+1)^(0+384)
 11275  04F9                     L8:	
 11276  04F9  3195  2DA1         	goto	l3201
 11277  04FB                     __end_of_main:	
 11278                           
 11279                           	psect	maintext_split_2
 11280  0913                     l3235:	
 11281                           
 11282                           ;main.c: 161: }
 11283                           ;main.c: 162: LATFbits.LATF6 = bypass_state;
 11284  0913  0022               	movlb	2	; select bank2
 11285  0914  0C4D               	rrf	_bypass_state^(0+256),w	;volatile
 11286  0915  0027               	movlb	7	; select bank7
 11287  0916  1C03               	skipc
 11288  0917  130C               	bcf	12,6	;volatile
 11289  0918  1803               	skipnc
 11290  0919  170C               	bsf	12,6	;volatile
 11291                           
 11292                           ;main.c: 163: wait_ms(100);
 11293  091A  3064               	movlw	100
 11294  091B  0020               	movlb	0	; select bank0
 11295  091C  00AC               	movwf	wait_ms@time
 11296  091D  3000               	movlw	0
 11297  091E  00AD               	movwf	wait_ms@time+1
 11298  091F  319A  22AC  3189   	fcall	_wait_ms
 11299  0922                     l3239:	
 11300                           
 11301                           ;main.c: 164: }
 11302                           ;main.c: 172: if (PORTDbits.RD6 == 0) {
 11303  0922  0020               	movlb	0	; select bank0
 11304  0923  1B0F               	btfsc	15,6	;volatile
 11305  0924  2969               	goto	l3253
 11306                           
 11307                           ;main.c: 173: bottom_push_state = bottom_push_state + 1;
 11308  0925  0022               	movlb	2	; select bank2
 11309  0926  0865               	movf	_bottom_push_state^(0+256),w
 11310  0927  3E01               	addlw	1
 11311  0928  00E5               	movwf	_bottom_push_state^(0+256)
 11312  0929  3000               	movlw	0
 11313  092A  3D66               	addwfc	(_bottom_push_state+1)^(0+256),w
 11314  092B  00E6               	movwf	(_bottom_push_state+1)^(0+256)
 11315                           
 11316                           ;main.c: 174: if (bottom_push_state >= 7) {
 11317  092C  0866               	movf	(_bottom_push_state+1)^(0+256),w
 11318  092D  3A80               	xorlw	128
 11319  092E  0021               	movlb	1	; select bank1
 11320  092F  00DE               	movwf	??_main^(0+128)
 11321  0930  3080               	movlw	128
 11322  0931  025E               	subwf	??_main^(0+128),w
 11323  0932  1D03               	skipz
 11324  0933  2937               	goto	u3405
 11325  0934  3007               	movlw	7
 11326  0935  0022               	movlb	2	; select bank2
 11327  0936  0265               	subwf	_bottom_push_state^(0+256),w
 11328  0937                     u3405:	
 11329  0937  1C03               	skipc
 11330  0938  293E               	goto	l3247
 11331                           
 11332                           ;main.c: 175: bottom_push_state = 1;
 11333  0939  3001               	movlw	1
 11334  093A  0022               	movlb	2	; select bank2
 11335  093B  00E5               	movwf	_bottom_push_state^(0+256)
 11336  093C  3000               	movlw	0
 11337  093D  00E6               	movwf	(_bottom_push_state^(0+256)+1)
 11338  093E                     l3247:	
 11339                           
 11340                           ;main.c: 176: }
 11341                           ;main.c: 177: set_leds_bottom(bottom_push_state);
 11342  093E  0022               	movlb	2	; select bank2
 11343  093F  0866               	movf	(_bottom_push_state+1)^(0+256),w
 11344  0940  0020               	movlb	0	; select bank0
 11345  0941  00A1               	movwf	set_leds_bottom@x+1
 11346  0942  0022               	movlb	2	; select bank2
 11347  0943  0865               	movf	_bottom_push_state^(0+256),w
 11348  0944  0020               	movlb	0	; select bank0
 11349  0945  00A0               	movwf	set_leds_bottom@x
 11350  0946  319C  24F5  3189   	fcall	_set_leds_bottom
 11351                           
 11352                           ;main.c: 178: FLASH_WriteWord(0x1F82, myBuf, bottom_push_state);
 11353  0949  3082               	movlw	130
 11354  094A  0020               	movlb	0	; select bank0
 11355  094B  00AD               	movwf	FLASH_WriteWord@flashAddr
 11356  094C  301F               	movlw	31
 11357  094D  00AE               	movwf	FLASH_WriteWord@flashAddr+1
 11358  094E  3020               	movlw	(low (_myBuf| (0+768)))& (0+255)
 11359  094F  0021               	movlb	1	; select bank1
 11360  0950  00DE               	movwf	??_main^(0+128)
 11361  0951  085E               	movf	??_main^(0+128),w
 11362  0952  0020               	movlb	0	; select bank0
 11363  0953  00AF               	movwf	FLASH_WriteWord@ramBuf
 11364  0954  0022               	movlb	2	; select bank2
 11365  0955  0866               	movf	(_bottom_push_state+1)^(0+256),w
 11366  0956  0020               	movlb	0	; select bank0
 11367  0957  00B1               	movwf	FLASH_WriteWord@word+1
 11368  0958  0022               	movlb	2	; select bank2
 11369  0959  0865               	movf	_bottom_push_state^(0+256),w
 11370  095A  0020               	movlb	0	; select bank0
 11371  095B  00B0               	movwf	FLASH_WriteWord@word
 11372  095C  3190  2000  3189   	fcall	_FLASH_WriteWord
 11373  095F                     l218:	
 11374                           ;main.c: 179: while (PORTDbits.RD6 == 0) {
 11375                           
 11376  095F  0020               	movlb	0	; select bank0
 11377  0960  1F0F               	btfss	15,6	;volatile
 11378  0961  295F               	goto	l218
 11379                           
 11380                           ;main.c: 180: }
 11381                           ;main.c: 181: wait_ms(20);
 11382  0962  3014               	movlw	20
 11383  0963  00AC               	movwf	wait_ms@time
 11384  0964  3000               	movlw	0
 11385  0965  00AD               	movwf	wait_ms@time+1
 11386  0966  319A  22AC  3189   	fcall	_wait_ms
 11387  0969                     l3253:	
 11388                           
 11389                           ;main.c: 182: }
 11390                           ;main.c: 193: if (PORTDbits.RD5 == 0) {
 11391  0969  0020               	movlb	0	; select bank0
 11392  096A  1A8F               	btfsc	15,5	;volatile
 11393  096B  29B9               	goto	l3269
 11394                           
 11395                           ;main.c: 194: top_push_state = top_push_state + 1;
 11396  096C  0022               	movlb	2	; select bank2
 11397  096D  086D               	movf	_top_push_state^(0+256),w	;volatile
 11398  096E  3E01               	addlw	1
 11399  096F  00ED               	movwf	_top_push_state^(0+256)	;volatile
 11400  0970  3000               	movlw	0
 11401  0971  3D6E               	addwfc	(_top_push_state+1)^(0+256),w	;volatile
 11402  0972  00EE               	movwf	(_top_push_state+1)^(0+256)	;volatile
 11403                           
 11404                           ;main.c: 195: if (top_push_state >= 7) {
 11405  0973  086E               	movf	(_top_push_state+1)^(0+256),w	;volatile
 11406  0974  3A80               	xorlw	128
 11407  0975  0021               	movlb	1	; select bank1
 11408  0976  00DE               	movwf	??_main^(0+128)
 11409  0977  3080               	movlw	128
 11410  0978  025E               	subwf	??_main^(0+128),w
 11411  0979  1D03               	skipz
 11412  097A  297E               	goto	u3435
 11413  097B  3007               	movlw	7
 11414  097C  0022               	movlb	2	; select bank2
 11415  097D  026D               	subwf	_top_push_state^(0+256),w	;volatile
 11416  097E                     u3435:	
 11417  097E  1C03               	skipc
 11418  097F  2985               	goto	l3261
 11419                           
 11420                           ;main.c: 196: top_push_state = 1;
 11421  0980  3001               	movlw	1
 11422  0981  0022               	movlb	2	; select bank2
 11423  0982  00ED               	movwf	_top_push_state^(0+256)	;volatile
 11424  0983  3000               	movlw	0
 11425  0984  00EE               	movwf	(_top_push_state^(0+256)+1)	;volatile
 11426  0985                     l3261:	
 11427                           
 11428                           ;main.c: 197: }
 11429                           ;main.c: 198: set_leds_top(top_push_state, 1);
 11430  0985  0022               	movlb	2	; select bank2
 11431  0986  086E               	movf	(_top_push_state+1)^(0+256),w	;volatile
 11432  0987  0020               	movlb	0	; select bank0
 11433  0988  00A1               	movwf	set_leds_top@x+1
 11434  0989  0022               	movlb	2	; select bank2
 11435  098A  086D               	movf	_top_push_state^(0+256),w	;volatile
 11436  098B  0020               	movlb	0	; select bank0
 11437  098C  00A0               	movwf	set_leds_top@x
 11438  098D  3001               	movlw	1
 11439  098E  00A2               	movwf	set_leds_top@ledState
 11440  098F  3000               	movlw	0
 11441  0990  00A3               	movwf	set_leds_top@ledState+1
 11442  0991  319F  2738  3189   	fcall	_set_leds_top
 11443                           
 11444                           ;main.c: 199: delay_time_changed = 1;
 11445  0994  3001               	movlw	1
 11446  0995  0023               	movlb	3	; select bank3
 11447  0996  00DE               	movwf	_delay_time_changed^(0+384)
 11448  0997  3000               	movlw	0
 11449  0998  00DF               	movwf	(_delay_time_changed^(0+384)+1)
 11450                           
 11451                           ;main.c: 200: FLASH_WriteWord(0x1F81, myBuf, top_push_state);
 11452  0999  3081               	movlw	129
 11453  099A  0020               	movlb	0	; select bank0
 11454  099B  00AD               	movwf	FLASH_WriteWord@flashAddr
 11455  099C  301F               	movlw	31
 11456  099D  00AE               	movwf	FLASH_WriteWord@flashAddr+1
 11457  099E  3020               	movlw	(low (_myBuf| (0+768)))& (0+255)
 11458  099F  0021               	movlb	1	; select bank1
 11459  09A0  00DE               	movwf	??_main^(0+128)
 11460  09A1  085E               	movf	??_main^(0+128),w
 11461  09A2  0020               	movlb	0	; select bank0
 11462  09A3  00AF               	movwf	FLASH_WriteWord@ramBuf
 11463  09A4  0022               	movlb	2	; select bank2
 11464  09A5  086E               	movf	(_top_push_state+1)^(0+256),w	;volatile
 11465  09A6  0020               	movlb	0	; select bank0
 11466  09A7  00B1               	movwf	FLASH_WriteWord@word+1
 11467  09A8  0022               	movlb	2	; select bank2
 11468  09A9  086D               	movf	_top_push_state^(0+256),w	;volatile
 11469  09AA  0020               	movlb	0	; select bank0
 11470  09AB  00B0               	movwf	FLASH_WriteWord@word
 11471  09AC  3190  2000  3189   	fcall	_FLASH_WriteWord
 11472  09AF                     l223:	
 11473                           ;main.c: 201: while (PORTDbits.RD5 == 0) {
 11474                           
 11475  09AF  0020               	movlb	0	; select bank0
 11476  09B0  1E8F               	btfss	15,5	;volatile
 11477  09B1  29AF               	goto	l223
 11478                           
 11479                           ;main.c: 202: }
 11480                           ;main.c: 203: wait_ms(20);
 11481  09B2  3014               	movlw	20
 11482  09B3  00AC               	movwf	wait_ms@time
 11483  09B4  3000               	movlw	0
 11484  09B5  00AD               	movwf	wait_ms@time+1
 11485  09B6  319A  22AC  3189   	fcall	_wait_ms
 11486  09B9                     l3269:	
 11487                           
 11488                           ;main.c: 204: }
 11489                           ;main.c: 214: if (PORTEbits.RE1 == 0) {
 11490  09B9  0020               	movlb	0	; select bank0
 11491  09BA  1890               	btfsc	16,1	;volatile
 11492  09BB  29FB               	goto	l3279
 11493                           
 11494                           ;main.c: 215: debounce_bypass++;
 11495  09BC  3001               	movlw	1
 11496  09BD  0023               	movlb	3	; select bank3
 11497  09BE  07CA               	addwf	_debounce_bypass^(0+384),f
 11498  09BF  3000               	movlw	0
 11499  09C0  3DCB               	addwfc	(_debounce_bypass+1)^(0+384),f
 11500                           
 11501                           ;main.c: 216: if (debounce_bypass > 25) {
 11502  09C1  084B               	movf	(_debounce_bypass+1)^(0+384),w
 11503  09C2  3A80               	xorlw	128
 11504  09C3  0021               	movlb	1	; select bank1
 11505  09C4  00DE               	movwf	??_main^(0+128)
 11506  09C5  3080               	movlw	128
 11507  09C6  025E               	subwf	??_main^(0+128),w
 11508  09C7  1D03               	skipz
 11509  09C8  29CC               	goto	u3465
 11510  09C9  301A               	movlw	26
 11511  09CA  0023               	movlb	3	; select bank3
 11512  09CB  024A               	subwf	_debounce_bypass^(0+384),w
 11513  09CC                     u3465:	
 11514  09CC  1C03               	skipc
 11515  09CD  29FE               	goto	l3281
 11516                           
 11517                           ;main.c: 217: bypass_state = !bypass_state;
 11518  09CE  0022               	movlb	2	; select bank2
 11519  09CF  084D               	movf	_bypass_state^(0+256),w	;volatile
 11520  09D0  044E               	iorwf	(_bypass_state+1)^(0+256),w	;volatile
 11521  09D1  1D03               	btfss	3,2
 11522  09D2  29D5               	goto	u3470
 11523  09D3  3001               	movlw	1
 11524  09D4  29D6               	goto	u3480
 11525  09D5                     u3470:	
 11526  09D5  3000               	movlw	0
 11527  09D6                     u3480:	
 11528  09D6  0021               	movlb	1	; select bank1
 11529  09D7  00DE               	movwf	??_main^(0+128)
 11530  09D8  01DF               	clrf	(??_main^(0+128)+1)
 11531  09D9  085E               	movf	??_main^(0+128),w
 11532  09DA  0022               	movlb	2	; select bank2
 11533  09DB  00CD               	movwf	_bypass_state^(0+256)	;volatile
 11534  09DC  0021               	movlb	1	; select bank1
 11535  09DD  085F               	movf	(??_main+1)^(0+128),w
 11536  09DE  0022               	movlb	2	; select bank2
 11537  09DF  00CE               	movwf	(_bypass_state+1)^(0+256)	;volatile
 11538                           
 11539                           ;main.c: 218: LATGbits.LATG1 = !bypass_state;
 11540  09E0  084D               	movf	_bypass_state^(0+256),w	;volatile
 11541  09E1  044E               	iorwf	(_bypass_state+1)^(0+256),w	;volatile
 11542  09E2  1D03               	btfss	3,2
 11543  09E3  29E7               	goto	u3490
 11544  09E4  0027               	movlb	7	; select bank7
 11545  09E5  148D               	bsf	13,1	;volatile
 11546  09E6  29E9               	goto	l3275
 11547  09E7                     u3490:	
 11548  09E7  0027               	movlb	7	; select bank7
 11549  09E8  108D               	bcf	13,1	;volatile
 11550  09E9                     l3275:	
 11551                           
 11552                           ;main.c: 219: LATGbits.LATG2 = bypass_state;
 11553  09E9  0022               	movlb	2	; select bank2
 11554  09EA  0C4D               	rrf	_bypass_state^(0+256),w	;volatile
 11555  09EB  0027               	movlb	7	; select bank7
 11556  09EC  1C03               	skipc
 11557  09ED  110D               	bcf	13,2	;volatile
 11558  09EE  1803               	skipnc
 11559  09EF  150D               	bsf	13,2	;volatile
 11560                           
 11561                           ;main.c: 220: LATFbits.LATF6 = bypass_state;
 11562  09F0  0022               	movlb	2	; select bank2
 11563  09F1  0C4D               	rrf	_bypass_state^(0+256),w	;volatile
 11564  09F2  0027               	movlb	7	; select bank7
 11565  09F3  1C03               	skipc
 11566  09F4  130C               	bcf	12,6	;volatile
 11567  09F5  1803               	skipnc
 11568  09F6  170C               	bsf	12,6	;volatile
 11569  09F7                     l228:	
 11570                           ;main.c: 221: while (PORTEbits.RE1 == 0) {
 11571                           
 11572  09F7  0020               	movlb	0	; select bank0
 11573  09F8  1890               	btfsc	16,1	;volatile
 11574  09F9  29FE               	goto	l3281
 11575  09FA  29F7               	goto	l228
 11576  09FB                     l3279:	
 11577                           ;main.c: 222: }
 11578                           ;main.c: 223: }
 11579                           ;main.c: 224: } else {
 11580                           
 11581                           
 11582                           ;main.c: 225: debounce_bypass = 0;
 11583  09FB  0023               	movlb	3	; select bank3
 11584  09FC  01CA               	clrf	_debounce_bypass^(0+384)
 11585  09FD  01CB               	clrf	(_debounce_bypass+1)^(0+384)
 11586  09FE                     l3281:	
 11587                           
 11588                           ;main.c: 226: }
 11589                           ;main.c: 244: if (PORTEbits.RE0 == 0) {
 11590  09FE  0020               	movlb	0	; select bank0
 11591  09FF  1810               	btfsc	16,0	;volatile
 11592  0A00  2BE6               	goto	l3361
 11593                           
 11594                           ;main.c: 245: debounce_count++;
 11595  0A01  3001               	movlw	1
 11596  0A02  0023               	movlb	3	; select bank3
 11597  0A03  07CC               	addwf	_debounce_count^(0+384),f
 11598  0A04  3000               	movlw	0
 11599  0A05  3DCD               	addwfc	(_debounce_count+1)^(0+384),f
 11600                           
 11601                           ;main.c: 247: if (debounce_count > 25) {
 11602  0A06  084D               	movf	(_debounce_count+1)^(0+384),w
 11603  0A07  3A80               	xorlw	128
 11604  0A08  0021               	movlb	1	; select bank1
 11605  0A09  00DE               	movwf	??_main^(0+128)
 11606  0A0A  3080               	movlw	128
 11607  0A0B  025E               	subwf	??_main^(0+128),w
 11608  0A0C  1D03               	skipz
 11609  0A0D  2A11               	goto	u3535
 11610  0A0E  301A               	movlw	26
 11611  0A0F  0023               	movlb	3	; select bank3
 11612  0A10  024C               	subwf	_debounce_count^(0+384),w
 11613  0A11                     u3535:	
 11614  0A11  1C03               	skipc
 11615  0A12  2BF6               	goto	l3369
 11616                           
 11617                           ;main.c: 248: temp_tap_count++;
 11618  0A13  3001               	movlw	1
 11619  0A14  0023               	movlb	3	; select bank3
 11620  0A15  07DA               	addwf	_temp_tap_count^(0+384),f
 11621  0A16  3000               	movlw	0
 11622  0A17  3DDB               	addwfc	(_temp_tap_count+1)^(0+384),f
 11623                           
 11624                           ;main.c: 249: if (tap_timer >= 1563) {
 11625  0A18  1BFC               	btfsc	_tap_timer+3,7	;volatile
 11626  0A19  2A8B               	goto	l3313
 11627  0A1A  087C               	movf	_tap_timer+3,w	;volatile
 11628  0A1B  1D03               	btfss	3,2
 11629  0A1C  2A26               	goto	l3289
 11630  0A1D  087B               	movf	_tap_timer+2,w	;volatile
 11631  0A1E  1D03               	btfss	3,2
 11632  0A1F  2A26               	goto	l3289
 11633  0A20  301B               	movlw	27
 11634  0A21  0279               	subwf	_tap_timer,w	;volatile
 11635  0A22  3006               	movlw	6
 11636  0A23  3B7A               	subwfb	_tap_timer+1,w	;volatile
 11637  0A24  1C03               	btfss	3,0
 11638  0A25  2A8B               	goto	l3313
 11639  0A26                     l3289:	
 11640                           
 11641                           ;main.c: 250: temp_tap_count = 0;
 11642  0A26  01DA               	clrf	_temp_tap_count^(0+384)
 11643  0A27  01DB               	clrf	(_temp_tap_count+1)^(0+384)
 11644                           
 11645                           ;main.c: 251: tap_iteration = 1;
 11646  0A28  3001               	movlw	1
 11647  0A29  0022               	movlb	2	; select bank2
 11648  0A2A  00EB               	movwf	_tap_iteration^(0+256)
 11649  0A2B  3000               	movlw	0
 11650  0A2C  00EC               	movwf	(_tap_iteration^(0+256)+1)
 11651                           
 11652                           ;main.c: 252: tap_total = 0;
 11653  0A2D  3000               	movlw	0
 11654  0A2E  0023               	movlb	3	; select bank3
 11655  0A2F  00C3               	movwf	(_tap_total+3)^(0+384)
 11656  0A30  3000               	movlw	0
 11657  0A31  00C2               	movwf	(_tap_total+2)^(0+384)
 11658  0A32  3000               	movlw	0
 11659  0A33  00C1               	movwf	(_tap_total+1)^(0+384)
 11660  0A34  3000               	movlw	0
 11661  0A35  00C0               	movwf	_tap_total^(0+384)
 11662                           
 11663                           ;main.c: 253: delay_time_changed = 0;
 11664  0A36  01DE               	clrf	_delay_time_changed^(0+384)
 11665  0A37  01DF               	clrf	(_delay_time_changed+1)^(0+384)
 11666                           
 11667                           ;main.c: 254: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
 11668  0A38  3001               	movlw	1
 11669  0A39  0022               	movlb	2	; select bank2
 11670  0A3A  00D1               	movwf	_iCnt^(0+256)
 11671  0A3B  3000               	movlw	0
 11672  0A3C  00D2               	movwf	(_iCnt^(0+256)+1)
 11673  0A3D                     l3301:	
 11674  0A3D  086A               	movf	(_num_taps+1)^(0+256),w
 11675  0A3E  3A80               	xorlw	128
 11676  0A3F  0021               	movlb	1	; select bank1
 11677  0A40  00DE               	movwf	??_main^(0+128)
 11678  0A41  0022               	movlb	2	; select bank2
 11679  0A42  0852               	movf	(_iCnt+1)^(0+256),w
 11680  0A43  3A80               	xorlw	128
 11681  0A44  0021               	movlb	1	; select bank1
 11682  0A45  025E               	subwf	??_main^(0+128),w
 11683  0A46  1D03               	skipz
 11684  0A47  2A4B               	goto	u3565
 11685  0A48  0022               	movlb	2	; select bank2
 11686  0A49  0851               	movf	_iCnt^(0+256),w
 11687  0A4A  0269               	subwf	_num_taps^(0+256),w
 11688  0A4B                     u3565:	
 11689  0A4B  1C03               	btfss	3,0
 11690  0A4C  2A7F               	goto	l3309
 11691                           
 11692                           ;main.c: 255: tap_history[iCnt] = 0;
 11693  0A4D  0022               	movlb	2	; select bank2
 11694  0A4E  0851               	movf	_iCnt^(0+256),w
 11695  0A4F  0021               	movlb	1	; select bank1
 11696  0A50  00DE               	movwf	??_main^(0+128)
 11697  0A51  3001               	movlw	1
 11698  0A52                     u3555:	
 11699  0A52  35DE               	lslf	??_main^(0+128),f
 11700  0A53  3EFF               	addlw	-1
 11701  0A54  1D03               	skipz
 11702  0A55  2A52               	goto	u3555
 11703  0A56  355E               	lslf	??_main^(0+128),w
 11704  0A57  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
 11705  0A58  0086               	movwf	6
 11706  0A59  3001               	movlw	1	; select bank3/4
 11707  0A5A  0087               	movwf	7
 11708  0A5B  3000               	movlw	0
 11709  0A5C  3FC0               	movwi [0]fsr1
 11710  0A5D  3000               	movlw	0
 11711  0A5E  3FC1               	movwi [1]fsr1
 11712  0A5F  3FC2               	movwi [2]fsr1
 11713  0A60  3FC3               	movwi [3]fsr1
 11714  0A61  3001               	movlw	1
 11715  0A62  0022               	movlb	2	; select bank2
 11716  0A63  07D1               	addwf	_iCnt^(0+256),f
 11717  0A64  3000               	movlw	0
 11718  0A65  3DD2               	addwfc	(_iCnt+1)^(0+256),f
 11719  0A66  2A3D               	goto	l3301
 11720  0A67                     l3303:	
 11721                           ;main.c: 256: }
 11722                           ;main.c: 258: while (PORTEbits.RE0 == 0) {
 11723                           
 11724                           
 11725                           ;main.c: 260: if (tap_longpress_timer > 1000 && saving_state == 0) {
 11726  0A67  0023               	movlb	3	; select bank3
 11727  0A68  1BBF               	btfsc	(_tap_longpress_timer+3)^(0+384),7	;volatile
 11728  0A69  2A7F               	goto	l3309
 11729  0A6A  083F               	movf	(_tap_longpress_timer+3)^(0+384),w	;volatile
 11730  0A6B  1D03               	btfss	3,2
 11731  0A6C  2A76               	goto	l3305
 11732  0A6D  083E               	movf	(_tap_longpress_timer+2)^(0+384),w	;volatile
 11733  0A6E  1D03               	btfss	3,2
 11734  0A6F  2A76               	goto	l3305
 11735  0A70  30E9               	movlw	233
 11736  0A71  023C               	subwf	_tap_longpress_timer^(0+384),w	;volatile
 11737  0A72  3003               	movlw	3
 11738  0A73  3B3D               	subwfb	(_tap_longpress_timer+1)^(0+384),w	;volatile
 11739  0A74  1C03               	btfss	3,0
 11740  0A75  2A7F               	goto	l3309
 11741  0A76                     l3305:	
 11742  0A76  0022               	movlb	2	; select bank2
 11743  0A77  085B               	movf	_saving_state^(0+256),w	;volatile
 11744  0A78  045C               	iorwf	(_saving_state+1)^(0+256),w	;volatile
 11745  0A79  1D03               	btfss	3,2
 11746  0A7A  2A7F               	goto	l3309
 11747                           
 11748                           ;main.c: 263: saving_state = 1;
 11749  0A7B  3001               	movlw	1
 11750  0A7C  00DB               	movwf	_saving_state^(0+256)	;volatile
 11751  0A7D  3000               	movlw	0
 11752  0A7E  00DC               	movwf	(_saving_state^(0+256)+1)	;volatile
 11753  0A7F                     l3309:	
 11754  0A7F  0020               	movlb	0	; select bank0
 11755  0A80  1C10               	btfss	16,0	;volatile
 11756  0A81  2A67               	goto	l3303
 11757                           
 11758                           ;main.c: 267: }
 11759                           ;main.c: 268: }
 11760                           ;main.c: 269: tap_timer = 0;
 11761  0A82  3000               	movlw	0
 11762  0A83  00FC               	movwf	_tap_timer+3	;volatile
 11763  0A84  3000               	movlw	0
 11764  0A85  00FB               	movwf	_tap_timer+2	;volatile
 11765  0A86  3000               	movlw	0
 11766  0A87  00FA               	movwf	_tap_timer+1	;volatile
 11767  0A88  3000               	movlw	0
 11768  0A89  00F9               	movwf	_tap_timer	;volatile
 11769                           
 11770                           ;main.c: 270: } else if (tap_timer < 1563) {
 11771  0A8A  2BF6               	goto	l3369
 11772  0A8B                     l3313:	
 11773  0A8B  1BFC               	btfsc	_tap_timer+3,7	;volatile
 11774  0A8C  2A99               	goto	l3315
 11775  0A8D  087C               	movf	_tap_timer+3,w	;volatile
 11776  0A8E  1D03               	btfss	3,2
 11777  0A8F  2BF6               	goto	l3369
 11778  0A90  087B               	movf	_tap_timer+2,w	;volatile
 11779  0A91  1D03               	btfss	3,2
 11780  0A92  2BF6               	goto	l3369
 11781  0A93  301B               	movlw	27
 11782  0A94  0279               	subwf	_tap_timer,w	;volatile
 11783  0A95  3006               	movlw	6
 11784  0A96  3B7A               	subwfb	_tap_timer+1,w	;volatile
 11785  0A97  1803               	btfsc	3,0
 11786  0A98  2BF6               	goto	l3369
 11787  0A99                     l3315:	
 11788                           
 11789                           ;main.c: 271: if (tap_timer >= 1172) {
 11790  0A99  1BFC               	btfsc	_tap_timer+3,7	;volatile
 11791  0A9A  2AAF               	goto	l3319
 11792  0A9B  087C               	movf	_tap_timer+3,w	;volatile
 11793  0A9C  1D03               	btfss	3,2
 11794  0A9D  2AA7               	goto	l3317
 11795  0A9E  087B               	movf	_tap_timer+2,w	;volatile
 11796  0A9F  1D03               	btfss	3,2
 11797  0AA0  2AA7               	goto	l3317
 11798  0AA1  3094               	movlw	148
 11799  0AA2  0279               	subwf	_tap_timer,w	;volatile
 11800  0AA3  3004               	movlw	4
 11801  0AA4  3B7A               	subwfb	_tap_timer+1,w	;volatile
 11802  0AA5  1C03               	btfss	3,0
 11803  0AA6  2AAF               	goto	l3319
 11804  0AA7                     l3317:	
 11805                           
 11806                           ;main.c: 272: tap_timer = 1172;
 11807  0AA7  3000               	movlw	0
 11808  0AA8  00FC               	movwf	_tap_timer+3	;volatile
 11809  0AA9  3000               	movlw	0
 11810  0AAA  00FB               	movwf	_tap_timer+2	;volatile
 11811  0AAB  3004               	movlw	4
 11812  0AAC  00FA               	movwf	_tap_timer+1	;volatile
 11813  0AAD  3094               	movlw	148
 11814  0AAE  00F9               	movwf	_tap_timer	;volatile
 11815  0AAF                     l3319:	
 11816                           
 11817                           ;main.c: 273: }
 11818                           ;main.c: 274: if (temp_tap_count == 1) {
 11819  0AAF  0023               	movlb	3	; select bank3
 11820  0AB0  035A               	decf	_temp_tap_count^(0+384),w
 11821  0AB1  045B               	iorwf	(_temp_tap_count+1)^(0+384),w
 11822  0AB2  1D03               	btfss	3,2
 11823  0AB3  2AC0               	goto	l3325
 11824                           
 11825                           ;main.c: 275: LATBbits.LATB4 = 1;
 11826  0AB4  0022               	movlb	2	; select bank2
 11827  0AB5  160D               	bsf	13,4	;volatile
 11828                           
 11829                           ;main.c: 278: temp_tap_time = tap_timer;
 11830  0AB6  087C               	movf	_tap_timer+3,w	;volatile
 11831  0AB7  0024               	movlb	4	; select bank4
 11832  0AB8  00CF               	movwf	(_temp_tap_time+3)^(0+512)
 11833  0AB9  087B               	movf	_tap_timer+2,w	;volatile
 11834  0ABA  00CE               	movwf	(_temp_tap_time+2)^(0+512)
 11835  0ABB  087A               	movf	_tap_timer+1,w	;volatile
 11836  0ABC  00CD               	movwf	(_temp_tap_time+1)^(0+512)
 11837  0ABD  0879               	movf	_tap_timer,w	;volatile
 11838  0ABE  00CC               	movwf	_temp_tap_time^(0+512)
 11839                           
 11840                           ;main.c: 279: } else {
 11841  0ABF  2BE2               	goto	l254
 11842  0AC0                     l3325:	
 11843                           
 11844                           ;main.c: 280: if (temp_tap_count == 2) {
 11845  0AC0  3002               	movlw	2
 11846  0AC1  0023               	movlb	3	; select bank3
 11847  0AC2  065A               	xorwf	_temp_tap_count^(0+384),w
 11848  0AC3  045B               	iorwf	(_temp_tap_count+1)^(0+384),w
 11849  0AC4  1D03               	btfss	3,2
 11850  0AC5  2AD1               	goto	l3331
 11851                           
 11852                           ;main.c: 282: tap_history[1] = tap_timer;
 11853  0AC6  087C               	movf	_tap_timer+3,w	;volatile
 11854  0AC7  00A7               	movwf	((_tap_history+3)^(0+384)+4)
 11855  0AC8  087B               	movf	_tap_timer+2,w	;volatile
 11856  0AC9  00A6               	movwf	((_tap_history+2)^(0+384)+4)
 11857  0ACA  087A               	movf	_tap_timer+1,w	;volatile
 11858  0ACB  00A5               	movwf	((_tap_history+1)^(0+384)+4)
 11859  0ACC  0879               	movf	_tap_timer,w	;volatile
 11860  0ACD  00A4               	movwf	(_tap_history^(0+384)+4)
 11861                           
 11862                           ;main.c: 284: saving_state = 0;
 11863  0ACE  0022               	movlb	2	; select bank2
 11864  0ACF  01DB               	clrf	_saving_state^(0+256)	;volatile
 11865  0AD0  01DC               	clrf	(_saving_state+1)^(0+256)	;volatile
 11866  0AD1                     l3331:	
 11867                           
 11868                           ;main.c: 285: }
 11869                           ;main.c: 286: if (tap_iteration <= 4) {
 11870  0AD1  0022               	movlb	2	; select bank2
 11871  0AD2  086C               	movf	(_tap_iteration+1)^(0+256),w
 11872  0AD3  3A80               	xorlw	128
 11873  0AD4  0021               	movlb	1	; select bank1
 11874  0AD5  00DE               	movwf	??_main^(0+128)
 11875  0AD6  3080               	movlw	128
 11876  0AD7  025E               	subwf	??_main^(0+128),w
 11877  0AD8  1D03               	skipz
 11878  0AD9  2ADD               	goto	u3645
 11879  0ADA  3005               	movlw	5
 11880  0ADB  0022               	movlb	2	; select bank2
 11881  0ADC  026B               	subwf	_tap_iteration^(0+256),w
 11882  0ADD                     u3645:	
 11883  0ADD  1803               	skipnc
 11884  0ADE  2BE2               	goto	l254
 11885                           
 11886                           ;main.c: 287: int tapCntDivisor = num_taps;
 11887  0ADF  0022               	movlb	2	; select bank2
 11888  0AE0  086A               	movf	(_num_taps+1)^(0+256),w
 11889  0AE1  00A3               	movwf	(main@tapCntDivisor+1)^(0+256)
 11890  0AE2  0869               	movf	_num_taps^(0+256),w
 11891  0AE3  00A2               	movwf	main@tapCntDivisor^(0+256)
 11892                           
 11893                           ;main.c: 288: if (tap_iteration <= num_taps) {
 11894  0AE4  086A               	movf	(_num_taps+1)^(0+256),w
 11895  0AE5  3A80               	xorlw	128
 11896  0AE6  0021               	movlb	1	; select bank1
 11897  0AE7  00DE               	movwf	??_main^(0+128)
 11898  0AE8  0022               	movlb	2	; select bank2
 11899  0AE9  086C               	movf	(_tap_iteration+1)^(0+256),w
 11900  0AEA  3A80               	xorlw	128
 11901  0AEB  0021               	movlb	1	; select bank1
 11902  0AEC  025E               	subwf	??_main^(0+128),w
 11903  0AED  1D03               	skipz
 11904  0AEE  2AF2               	goto	u3655
 11905  0AEF  0022               	movlb	2	; select bank2
 11906  0AF0  086B               	movf	_tap_iteration^(0+256),w
 11907  0AF1  0269               	subwf	_num_taps^(0+256),w
 11908  0AF2                     u3655:	
 11909  0AF2  1C03               	skipc
 11910  0AF3  2B19               	goto	l3341
 11911                           
 11912                           ;main.c: 289: tap_total += tap_timer;
 11913  0AF4  0879               	movf	_tap_timer,w	;volatile
 11914  0AF5  0023               	movlb	3	; select bank3
 11915  0AF6  07C0               	addwf	_tap_total^(0+384),f
 11916  0AF7  087A               	movf	_tap_timer+1,w	;volatile
 11917  0AF8  3DC1               	addwfc	(_tap_total+1)^(0+384),f
 11918  0AF9  087B               	movf	_tap_timer+2,w	;volatile
 11919  0AFA  3DC2               	addwfc	(_tap_total+2)^(0+384),f
 11920  0AFB  087C               	movf	_tap_timer+3,w	;volatile
 11921  0AFC  3DC3               	addwfc	(_tap_total+3)^(0+384),f
 11922                           
 11923                           ;main.c: 290: tap_history[tap_iteration] = tap_timer;
 11924  0AFD  0022               	movlb	2	; select bank2
 11925  0AFE  086B               	movf	_tap_iteration^(0+256),w
 11926  0AFF  0021               	movlb	1	; select bank1
 11927  0B00  00DE               	movwf	??_main^(0+128)
 11928  0B01  3001               	movlw	1
 11929  0B02                     u3665:	
 11930  0B02  35DE               	lslf	??_main^(0+128),f
 11931  0B03  3EFF               	addlw	-1
 11932  0B04  1D03               	skipz
 11933  0B05  2B02               	goto	u3665
 11934  0B06  355E               	lslf	??_main^(0+128),w
 11935  0B07  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
 11936  0B08  0086               	movwf	6
 11937  0B09  3001               	movlw	1	; select bank3/4
 11938  0B0A  0087               	movwf	7
 11939  0B0B  0879               	movf	_tap_timer,w	;volatile
 11940  0B0C  3FC0               	movwi [0]fsr1
 11941  0B0D  087A               	movf	_tap_timer+1,w	;volatile
 11942  0B0E  3FC1               	movwi [1]fsr1
 11943  0B0F  087B               	movf	_tap_timer+2,w	;volatile
 11944  0B10  3FC2               	movwi [2]fsr1
 11945  0B11  087C               	movf	_tap_timer+3,w	;volatile
 11946  0B12  3FC3               	movwi [3]fsr1
 11947                           
 11948                           ;main.c: 291: tapCntDivisor = tap_iteration;
 11949  0B13  0022               	movlb	2	; select bank2
 11950  0B14  086C               	movf	(_tap_iteration+1)^(0+256),w
 11951  0B15  00A3               	movwf	(main@tapCntDivisor+1)^(0+256)
 11952  0B16  086B               	movf	_tap_iteration^(0+256),w
 11953  0B17  00A2               	movwf	main@tapCntDivisor^(0+256)
 11954                           
 11955                           ;main.c: 292: } else {
 11956  0B18  2BA0               	goto	l3353
 11957  0B19                     l3341:	
 11958                           
 11959                           ;main.c: 293: tap_total = 0;
 11960  0B19  3000               	movlw	0
 11961  0B1A  0023               	movlb	3	; select bank3
 11962  0B1B  00C3               	movwf	(_tap_total+3)^(0+384)
 11963  0B1C  3000               	movlw	0
 11964  0B1D  00C2               	movwf	(_tap_total+2)^(0+384)
 11965  0B1E  3000               	movlw	0
 11966  0B1F  00C1               	movwf	(_tap_total+1)^(0+384)
 11967  0B20  3000               	movlw	0
 11968  0B21  00C0               	movwf	_tap_total^(0+384)
 11969                           
 11970                           ;main.c: 294: for (iCnt = 1; iCnt < num_taps; iCnt++) {
 11971  0B22  3001               	movlw	1
 11972  0B23  0022               	movlb	2	; select bank2
 11973  0B24  00D1               	movwf	_iCnt^(0+256)
 11974  0B25  3000               	movlw	0
 11975  0B26  00D2               	movwf	(_iCnt^(0+256)+1)
 11976  0B27                     l3347:	
 11977  0B27  0852               	movf	(_iCnt+1)^(0+256),w
 11978  0B28  3A80               	xorlw	128
 11979  0B29  0021               	movlb	1	; select bank1
 11980  0B2A  00DE               	movwf	??_main^(0+128)
 11981  0B2B  0022               	movlb	2	; select bank2
 11982  0B2C  086A               	movf	(_num_taps+1)^(0+256),w
 11983  0B2D  3A80               	xorlw	128
 11984  0B2E  0021               	movlb	1	; select bank1
 11985  0B2F  025E               	subwf	??_main^(0+128),w
 11986  0B30  1D03               	skipz
 11987  0B31  2B35               	goto	u3705
 11988  0B32  0022               	movlb	2	; select bank2
 11989  0B33  0869               	movf	_num_taps^(0+256),w
 11990  0B34  0251               	subwf	_iCnt^(0+256),w
 11991  0B35                     u3705:	
 11992  0B35  1803               	btfsc	3,0
 11993  0B36  2B81               	goto	l3349
 11994                           
 11995                           ;main.c: 295: tap_history[iCnt] = tap_history[iCnt + 1];
 11996  0B37  0022               	movlb	2	; select bank2
 11997  0B38  0851               	movf	_iCnt^(0+256),w
 11998  0B39  0021               	movlb	1	; select bank1
 11999  0B3A  00DE               	movwf	??_main^(0+128)
 12000  0B3B  3001               	movlw	1
 12001  0B3C                     u3675:	
 12002  0B3C  35DE               	lslf	??_main^(0+128),f
 12003  0B3D  3EFF               	addlw	-1
 12004  0B3E  1D03               	skipz
 12005  0B3F  2B3C               	goto	u3675
 12006  0B40  355E               	lslf	??_main^(0+128),w
 12007  0B41  3E04               	addlw	4
 12008  0B42  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
 12009  0B43  0086               	movwf	6
 12010  0B44  3001               	movlw	1	; select bank3/4
 12011  0B45  0087               	movwf	7
 12012  0B46  3F40               	moviw [0]fsr1
 12013  0B47  00DF               	movwf	(??_main+1)^(0+128)
 12014  0B48  3F41               	moviw [1]fsr1
 12015  0B49  00E0               	movwf	((??_main+1)^(0+128)+1)
 12016  0B4A  3F42               	moviw [2]fsr1
 12017  0B4B  00E1               	movwf	((??_main+1)^(0+128)+2)
 12018  0B4C  3F43               	moviw [3]fsr1
 12019  0B4D  00E2               	movwf	((??_main+1)^(0+128)+3)
 12020  0B4E  0022               	movlb	2	; select bank2
 12021  0B4F  0851               	movf	_iCnt^(0+256),w
 12022  0B50  0021               	movlb	1	; select bank1
 12023  0B51  00E3               	movwf	(??_main+5)^(0+128)
 12024  0B52  3001               	movlw	1
 12025  0B53                     u3685:	
 12026  0B53  35E3               	lslf	(??_main+5)^(0+128),f
 12027  0B54  3EFF               	addlw	-1
 12028  0B55  1D03               	skipz
 12029  0B56  2B53               	goto	u3685
 12030  0B57  3563               	lslf	(??_main+5)^(0+128),w
 12031  0B58  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
 12032  0B59  0086               	movwf	6
 12033  0B5A  3001               	movlw	1	; select bank3/4
 12034  0B5B  0087               	movwf	7
 12035  0B5C  085F               	movf	(??_main+1)^(0+128),w
 12036  0B5D  3FC0               	movwi [0]fsr1
 12037  0B5E  0860               	movf	(??_main+2)^(0+128),w
 12038  0B5F  3FC1               	movwi [1]fsr1
 12039  0B60  0861               	movf	(??_main+3)^(0+128),w
 12040  0B61  3FC2               	movwi [2]fsr1
 12041  0B62  0862               	movf	(??_main+4)^(0+128),w
 12042  0B63  3FC3               	movwi [3]fsr1
 12043                           
 12044                           ;main.c: 296: tap_total += tap_history[iCnt];
 12045  0B64  0022               	movlb	2	; select bank2
 12046  0B65  0851               	movf	_iCnt^(0+256),w
 12047  0B66  0021               	movlb	1	; select bank1
 12048  0B67  00DE               	movwf	??_main^(0+128)
 12049  0B68  3001               	movlw	1
 12050  0B69                     u3695:	
 12051  0B69  35DE               	lslf	??_main^(0+128),f
 12052  0B6A  3EFF               	addlw	-1
 12053  0B6B  1D03               	skipz
 12054  0B6C  2B69               	goto	u3695
 12055  0B6D  355E               	lslf	??_main^(0+128),w
 12056  0B6E  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
 12057  0B6F  0086               	movwf	6
 12058  0B70  3001               	movlw	1	; select bank3/4
 12059  0B71  0087               	movwf	7
 12060  0B72  3F40               	moviw [0]fsr1
 12061  0B73  0023               	movlb	3	; select bank3
 12062  0B74  07C0               	addwf	_tap_total^(0+384),f
 12063  0B75  3F41               	moviw [1]fsr1
 12064  0B76  3DC1               	addwfc	(_tap_total+1)^(0+384),f
 12065  0B77  3F42               	moviw [2]fsr1
 12066  0B78  3DC2               	addwfc	(_tap_total+2)^(0+384),f
 12067  0B79  3F43               	moviw [3]fsr1
 12068  0B7A  3DC3               	addwfc	(_tap_total+3)^(0+384),f
 12069  0B7B  3001               	movlw	1
 12070  0B7C  0022               	movlb	2	; select bank2
 12071  0B7D  07D1               	addwf	_iCnt^(0+256),f
 12072  0B7E  3000               	movlw	0
 12073  0B7F  3DD2               	addwfc	(_iCnt+1)^(0+256),f
 12074  0B80  2B27               	goto	l3347
 12075  0B81                     l3349:	
 12076                           
 12077                           ;main.c: 297: }
 12078                           ;main.c: 298: tap_history[num_taps] = tap_timer;
 12079  0B81  0022               	movlb	2	; select bank2
 12080  0B82  0869               	movf	_num_taps^(0+256),w
 12081  0B83  0021               	movlb	1	; select bank1
 12082  0B84  00DE               	movwf	??_main^(0+128)
 12083  0B85  3001               	movlw	1
 12084  0B86                     u3715:	
 12085  0B86  35DE               	lslf	??_main^(0+128),f
 12086  0B87  3EFF               	addlw	-1
 12087  0B88  1D03               	skipz
 12088  0B89  2B86               	goto	u3715
 12089  0B8A  355E               	lslf	??_main^(0+128),w
 12090  0B8B  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
 12091  0B8C  0086               	movwf	6
 12092  0B8D  3001               	movlw	1	; select bank3/4
 12093  0B8E  0087               	movwf	7
 12094  0B8F  0879               	movf	_tap_timer,w	;volatile
 12095  0B90  3FC0               	movwi [0]fsr1
 12096  0B91  087A               	movf	_tap_timer+1,w	;volatile
 12097  0B92  3FC1               	movwi [1]fsr1
 12098  0B93  087B               	movf	_tap_timer+2,w	;volatile
 12099  0B94  3FC2               	movwi [2]fsr1
 12100  0B95  087C               	movf	_tap_timer+3,w	;volatile
 12101  0B96  3FC3               	movwi [3]fsr1
 12102                           
 12103                           ;main.c: 299: tap_total += tap_timer;
 12104  0B97  0879               	movf	_tap_timer,w	;volatile
 12105  0B98  0023               	movlb	3	; select bank3
 12106  0B99  07C0               	addwf	_tap_total^(0+384),f
 12107  0B9A  087A               	movf	_tap_timer+1,w	;volatile
 12108  0B9B  3DC1               	addwfc	(_tap_total+1)^(0+384),f
 12109  0B9C  087B               	movf	_tap_timer+2,w	;volatile
 12110  0B9D  3DC2               	addwfc	(_tap_total+2)^(0+384),f
 12111  0B9E  087C               	movf	_tap_timer+3,w	;volatile
 12112  0B9F  3DC3               	addwfc	(_tap_total+3)^(0+384),f
 12113  0BA0                     l3353:	
 12114                           
 12115                           ;main.c: 300: }
 12116                           ;main.c: 303: baseline_delay_time = tap_total / tapCntDivisor;
 12117  0BA0  0022               	movlb	2	; select bank2
 12118  0BA1  0822               	movf	main@tapCntDivisor^(0+256),w
 12119  0BA2  0020               	movlb	0	; select bank0
 12120  0BA3  00A6               	movwf	___aldiv@divisor
 12121  0BA4  0022               	movlb	2	; select bank2
 12122  0BA5  0823               	movf	(main@tapCntDivisor+1)^(0+256),w
 12123  0BA6  0020               	movlb	0	; select bank0
 12124  0BA7  00A7               	movwf	___aldiv@divisor+1
 12125  0BA8  0D89               	rlf	9,f
 12126  0BA9  3B89               	subwfb	9,f
 12127  0BAA  0989               	comf	9,f
 12128  0BAB  00A8               	movwf	___aldiv@divisor+2
 12129  0BAC  00A9               	movwf	___aldiv@divisor+3
 12130  0BAD  0023               	movlb	3	; select bank3
 12131  0BAE  0843               	movf	(_tap_total+3)^(0+384),w
 12132  0BAF  0020               	movlb	0	; select bank0
 12133  0BB0  00AD               	movwf	___aldiv@dividend+3
 12134  0BB1  0023               	movlb	3	; select bank3
 12135  0BB2  0842               	movf	(_tap_total+2)^(0+384),w
 12136  0BB3  0020               	movlb	0	; select bank0
 12137  0BB4  00AC               	movwf	___aldiv@dividend+2
 12138  0BB5  0023               	movlb	3	; select bank3
 12139  0BB6  0841               	movf	(_tap_total+1)^(0+384),w
 12140  0BB7  0020               	movlb	0	; select bank0
 12141  0BB8  00AB               	movwf	___aldiv@dividend+1
 12142  0BB9  0023               	movlb	3	; select bank3
 12143  0BBA  0840               	movf	_tap_total^(0+384),w
 12144  0BBB  0020               	movlb	0	; select bank0
 12145  0BBC  00AA               	movwf	___aldiv@dividend
 12146  0BBD  3191  2121  3189   	fcall	___aldiv
 12147  0BC0  0020               	movlb	0	; select bank0
 12148  0BC1  0829               	movf	?___aldiv+3,w
 12149  0BC2  0022               	movlb	2	; select bank2
 12150  0BC3  00E0               	movwf	(_baseline_delay_time+3)^(0+256)	;volatile
 12151  0BC4  0020               	movlb	0	; select bank0
 12152  0BC5  0828               	movf	?___aldiv+2,w
 12153  0BC6  0022               	movlb	2	; select bank2
 12154  0BC7  00DF               	movwf	(_baseline_delay_time+2)^(0+256)	;volatile
 12155  0BC8  0020               	movlb	0	; select bank0
 12156  0BC9  0827               	movf	?___aldiv+1,w
 12157  0BCA  0022               	movlb	2	; select bank2
 12158  0BCB  00DE               	movwf	(_baseline_delay_time+1)^(0+256)	;volatile
 12159  0BCC  0020               	movlb	0	; select bank0
 12160  0BCD  0826               	movf	?___aldiv,w
 12161  0BCE  0022               	movlb	2	; select bank2
 12162  0BCF  00DD               	movwf	_baseline_delay_time^(0+256)	;volatile
 12163                           
 12164                           ;main.c: 304: delay_time_changed = 1;
 12165  0BD0  3001               	movlw	1
 12166  0BD1  0023               	movlb	3	; select bank3
 12167  0BD2  00DE               	movwf	_delay_time_changed^(0+384)
 12168  0BD3  3000               	movlw	0
 12169  0BD4  00DF               	movwf	(_delay_time_changed^(0+384)+1)
 12170                           
 12171                           ;main.c: 305: tap_timer = 0;
 12172  0BD5  3000               	movlw	0
 12173  0BD6  00FC               	movwf	_tap_timer+3	;volatile
 12174  0BD7  3000               	movlw	0
 12175  0BD8  00FB               	movwf	_tap_timer+2	;volatile
 12176  0BD9  3000               	movlw	0
 12177  0BDA  00FA               	movwf	_tap_timer+1	;volatile
 12178  0BDB  3000               	movlw	0
 12179  0BDC  00F9               	movwf	_tap_timer	;volatile
 12180                           
 12181                           ;main.c: 314: tap_iteration++;
 12182  0BDD  3001               	movlw	1
 12183  0BDE  0022               	movlb	2	; select bank2
 12184  0BDF  07EB               	addwf	_tap_iteration^(0+256),f
 12185  0BE0  3000               	movlw	0
 12186  0BE1  3DEC               	addwfc	(_tap_iteration+1)^(0+256),f
 12187  0BE2                     l254:	
 12188                           ;main.c: 315: }
 12189                           ;main.c: 316: }
 12190                           ;main.c: 317: while (PORTEbits.RE0 == 0) {
 12191                           
 12192  0BE2  0020               	movlb	0	; select bank0
 12193  0BE3  1810               	btfsc	16,0	;volatile
 12194  0BE4  2BF6               	goto	l3369
 12195  0BE5  2BE2               	goto	l254
 12196  0BE6                     l3361:	
 12197                           ;main.c: 318: }
 12198                           ;main.c: 319: }
 12199                           ;main.c: 320: }
 12200                           ;main.c: 321: } else {
 12201                           
 12202                           
 12203                           ;main.c: 322: debounce_count = 0;
 12204  0BE6  0023               	movlb	3	; select bank3
 12205  0BE7  01CC               	clrf	_debounce_count^(0+384)
 12206  0BE8  01CD               	clrf	(_debounce_count+1)^(0+384)
 12207                           
 12208                           ;main.c: 323: tap_longpress_timer = 0;
 12209  0BE9  3000               	movlw	0
 12210  0BEA  00BF               	movwf	(_tap_longpress_timer+3)^(0+384)	;volatile
 12211  0BEB  3000               	movlw	0
 12212  0BEC  00BE               	movwf	(_tap_longpress_timer+2)^(0+384)	;volatile
 12213  0BED  3000               	movlw	0
 12214  0BEE  00BD               	movwf	(_tap_longpress_timer+1)^(0+384)	;volatile
 12215  0BEF  3000               	movlw	0
 12216  0BF0  00BC               	movwf	_tap_longpress_timer^(0+384)	;volatile
 12217                           
 12218                           ;main.c: 324: flash_saving = 0;
 12219  0BF1  0022               	movlb	2	; select bank2
 12220  0BF2  01CF               	clrf	_flash_saving^(0+256)	;volatile
 12221  0BF3  01D0               	clrf	(_flash_saving+1)^(0+256)	;volatile
 12222                           
 12223                           ;main.c: 325: saving_state = 0;
 12224  0BF4  01DB               	clrf	_saving_state^(0+256)	;volatile
 12225  0BF5  01DC               	clrf	(_saving_state+1)^(0+256)	;volatile
 12226  0BF6                     l3369:	
 12227                           
 12228                           ;main.c: 326: }
 12229                           ;main.c: 331: knob_1_pos = adc_convert(0);
 12230  0BF6  3000               	movlw	0
 12231  0BF7  3199  21A3  3189   	fcall	_adc_convert
 12232  0BFA  0020               	movlb	0	; select bank0
 12233  0BFB  0821               	movf	?_adc_convert+1,w
 12234  0BFC  0022               	movlb	2	; select bank2
 12235  0BFD  00D4               	movwf	(_knob_1_pos+1)^(0+256)
 12236  0BFE  0020               	movlb	0	; select bank0
 12237  0BFF  0820               	movf	?_adc_convert,w
 12238  0C00  0022               	movlb	2	; select bank2
 12239  0C01  00D3               	movwf	_knob_1_pos^(0+256)
 12240                           
 12241                           ;main.c: 332: knob_2_pos = adc_convert(1);
 12242  0C02  3001               	movlw	1
 12243  0C03  3199  21A3  3189   	fcall	_adc_convert
 12244  0C06  0020               	movlb	0	; select bank0
 12245  0C07  0821               	movf	?_adc_convert+1,w
 12246  0C08  0022               	movlb	2	; select bank2
 12247  0C09  00D6               	movwf	(_knob_2_pos+1)^(0+256)
 12248  0C0A  0020               	movlb	0	; select bank0
 12249  0C0B  0820               	movf	?_adc_convert,w
 12250  0C0C  0022               	movlb	2	; select bank2
 12251  0C0D  00D5               	movwf	_knob_2_pos^(0+256)
 12252                           
 12253                           ;main.c: 333: knob_3_pos = adc_convert(2);
 12254  0C0E  3002               	movlw	2
 12255  0C0F  3199  21A3  3189   	fcall	_adc_convert
 12256  0C12  0020               	movlb	0	; select bank0
 12257  0C13  0821               	movf	?_adc_convert+1,w
 12258  0C14  0022               	movlb	2	; select bank2
 12259  0C15  00D8               	movwf	(_knob_3_pos+1)^(0+256)
 12260  0C16  0020               	movlb	0	; select bank0
 12261  0C17  0820               	movf	?_adc_convert,w
 12262  0C18  0022               	movlb	2	; select bank2
 12263  0C19  00D7               	movwf	_knob_3_pos^(0+256)
 12264                           
 12265                           ;main.c: 334: knob_4_pos = adc_convert(3);
 12266  0C1A  3003               	movlw	3
 12267  0C1B  3199  21A3  3189   	fcall	_adc_convert
 12268  0C1E  0020               	movlb	0	; select bank0
 12269  0C1F  0821               	movf	?_adc_convert+1,w
 12270  0C20  0021               	movlb	1	; select bank1
 12271  0C21  00EE               	movwf	(_knob_4_pos+1)^(0+128)
 12272  0C22  0020               	movlb	0	; select bank0
 12273  0C23  0820               	movf	?_adc_convert,w
 12274  0C24  0021               	movlb	1	; select bank1
 12275  0C25  00ED               	movwf	_knob_4_pos^(0+128)
 12276                           
 12277                           ;main.c: 335: knob_5_pos = adc_convert(4);
 12278  0C26  3004               	movlw	4
 12279  0C27  3199  21A3  3189   	fcall	_adc_convert
 12280  0C2A  0020               	movlb	0	; select bank0
 12281  0C2B  0821               	movf	?_adc_convert+1,w
 12282  0C2C  0023               	movlb	3	; select bank3
 12283  0C2D  00D5               	movwf	(_knob_5_pos+1)^(0+384)
 12284  0C2E  0020               	movlb	0	; select bank0
 12285  0C2F  0820               	movf	?_adc_convert,w
 12286  0C30  0023               	movlb	3	; select bank3
 12287  0C31  00D4               	movwf	_knob_5_pos^(0+384)
 12288                           
 12289                           ;main.c: 348: if (knob_1_pos - knob1_prev >= 4 || knob_1_pos - knob1_prev <= -4) {
 12290  0C32  0022               	movlb	2	; select bank2
 12291  0C33  0967               	comf	_knob1_prev^(0+256),w
 12292  0C34  0021               	movlb	1	; select bank1
 12293  0C35  00DE               	movwf	??_main^(0+128)
 12294  0C36  0022               	movlb	2	; select bank2
 12295  0C37  0968               	comf	(_knob1_prev+1)^(0+256),w
 12296  0C38  0021               	movlb	1	; select bank1
 12297  0C39  00DF               	movwf	(??_main^(0+128)+1)
 12298  0C3A  0ADE               	incf	??_main^(0+128),f
 12299  0C3B  1903               	skipnz
 12300  0C3C  0ADF               	incf	(??_main^(0+128)+1),f
 12301  0C3D  0022               	movlb	2	; select bank2
 12302  0C3E  0853               	movf	_knob_1_pos^(0+256),w
 12303  0C3F  0021               	movlb	1	; select bank1
 12304  0C40  075E               	addwf	??_main^(0+128),w
 12305  0C41  00E0               	movwf	(??_main+2)^(0+128)
 12306  0C42  0022               	movlb	2	; select bank2
 12307  0C43  0854               	movf	(_knob_1_pos+1)^(0+256),w
 12308  0C44  0021               	movlb	1	; select bank1
 12309  0C45  3D5F               	addwfc	(??_main+1)^(0+128),w
 12310  0C46  00E1               	movwf	(??_main+3)^(0+128)
 12311  0C47  0861               	movf	(??_main+3)^(0+128),w
 12312  0C48  3A80               	xorlw	128
 12313  0C49  00E2               	movwf	(??_main+4)^(0+128)
 12314  0C4A  3080               	movlw	128
 12315  0C4B  0262               	subwf	(??_main+4)^(0+128),w
 12316  0C4C  1D03               	skipz
 12317  0C4D  2C50               	goto	u3735
 12318  0C4E  3004               	movlw	4
 12319  0C4F  0260               	subwf	(??_main+2)^(0+128),w
 12320  0C50                     u3735:	
 12321  0C50  1803               	skipnc
 12322  0C51  2C72               	goto	l3383
 12323  0C52  0022               	movlb	2	; select bank2
 12324  0C53  0967               	comf	_knob1_prev^(0+256),w
 12325  0C54  0021               	movlb	1	; select bank1
 12326  0C55  00DE               	movwf	??_main^(0+128)
 12327  0C56  0022               	movlb	2	; select bank2
 12328  0C57  0968               	comf	(_knob1_prev+1)^(0+256),w
 12329  0C58  0021               	movlb	1	; select bank1
 12330  0C59  00DF               	movwf	(??_main^(0+128)+1)
 12331  0C5A  0ADE               	incf	??_main^(0+128),f
 12332  0C5B  1903               	skipnz
 12333  0C5C  0ADF               	incf	(??_main^(0+128)+1),f
 12334  0C5D  0022               	movlb	2	; select bank2
 12335  0C5E  0853               	movf	_knob_1_pos^(0+256),w
 12336  0C5F  0021               	movlb	1	; select bank1
 12337  0C60  075E               	addwf	??_main^(0+128),w
 12338  0C61  00E0               	movwf	(??_main+2)^(0+128)
 12339  0C62  0022               	movlb	2	; select bank2
 12340  0C63  0854               	movf	(_knob_1_pos+1)^(0+256),w
 12341  0C64  0021               	movlb	1	; select bank1
 12342  0C65  3D5F               	addwfc	(??_main+1)^(0+128),w
 12343  0C66  00E1               	movwf	(??_main+3)^(0+128)
 12344  0C67  0861               	movf	(??_main+3)^(0+128),w
 12345  0C68  3A80               	xorlw	128
 12346  0C69  00E2               	movwf	(??_main+4)^(0+128)
 12347  0C6A  307F               	movlw	127
 12348  0C6B  0262               	subwf	(??_main+4)^(0+128),w
 12349  0C6C  1D03               	skipz
 12350  0C6D  2C70               	goto	u3745
 12351  0C6E  30FD               	movlw	253
 12352  0C6F  0260               	subwf	(??_main+2)^(0+128),w
 12353  0C70                     u3745:	
 12354  0C70  1803               	skipnc
 12355  0C71  2D0E               	goto	l3389
 12356  0C72                     l3383:	
 12357                           
 12358                           ;main.c: 349: knob1_prev = knob_1_pos;
 12359  0C72  0022               	movlb	2	; select bank2
 12360  0C73  0854               	movf	(_knob_1_pos+1)^(0+256),w
 12361  0C74  00E8               	movwf	(_knob1_prev+1)^(0+256)
 12362  0C75  0853               	movf	_knob_1_pos^(0+256),w
 12363  0C76  00E7               	movwf	_knob1_prev^(0+256)
 12364                           
 12365                           ;main.c: 350: int i = map(knob1_prev, 0, 1023, 0, 255);
 12366  0C77  3000               	movlw	0
 12367  0C78  0021               	movlb	1	; select bank1
 12368  0C79  00AC               	movwf	map@out_max^(0+128)
 12369  0C7A  307F               	movlw	127
 12370  0C7B  00AD               	movwf	(map@out_max+1)^(0+128)
 12371  0C7C  3043               	movlw	67
 12372  0C7D  00AE               	movwf	(map@out_max+2)^(0+128)
 12373  0C7E  3000               	movlw	0
 12374  0C7F  00A9               	movwf	map@out_min^(0+128)
 12375  0C80  3000               	movlw	0
 12376  0C81  00AA               	movwf	(map@out_min+1)^(0+128)
 12377  0C82  3000               	movlw	0
 12378  0C83  00AB               	movwf	(map@out_min+2)^(0+128)
 12379  0C84  30C0               	movlw	192
 12380  0C85  00A6               	movwf	map@in_max^(0+128)
 12381  0C86  307F               	movlw	127
 12382  0C87  00A7               	movwf	(map@in_max+1)^(0+128)
 12383  0C88  3044               	movlw	68
 12384  0C89  00A8               	movwf	(map@in_max+2)^(0+128)
 12385  0C8A  3000               	movlw	0
 12386  0C8B  00A3               	movwf	map@in_min^(0+128)
 12387  0C8C  3000               	movlw	0
 12388  0C8D  00A4               	movwf	(map@in_min+1)^(0+128)
 12389  0C8E  3000               	movlw	0
 12390  0C8F  00A5               	movwf	(map@in_min+2)^(0+128)
 12391  0C90  0022               	movlb	2	; select bank2
 12392  0C91  0868               	movf	(_knob1_prev+1)^(0+256),w
 12393  0C92  0020               	movlb	0	; select bank0
 12394  0C93  00AA               	movwf	___awtoft@c+1
 12395  0C94  0022               	movlb	2	; select bank2
 12396  0C95  0867               	movf	_knob1_prev^(0+256),w
 12397  0C96  0020               	movlb	0	; select bank0
 12398  0C97  00A9               	movwf	___awtoft@c
 12399  0C98  3199  21FC  3189   	fcall	___awtoft
 12400  0C9B  0020               	movlb	0	; select bank0
 12401  0C9C  0829               	movf	?___awtoft,w
 12402  0C9D  0021               	movlb	1	; select bank1
 12403  0C9E  00A0               	movwf	map@x^(0+128)
 12404  0C9F  0020               	movlb	0	; select bank0
 12405  0CA0  082A               	movf	?___awtoft+1,w
 12406  0CA1  0021               	movlb	1	; select bank1
 12407  0CA2  00A1               	movwf	(map@x+1)^(0+128)
 12408  0CA3  0020               	movlb	0	; select bank0
 12409  0CA4  082B               	movf	?___awtoft+2,w
 12410  0CA5  0021               	movlb	1	; select bank1
 12411  0CA6  00A2               	movwf	(map@x+2)^(0+128)
 12412  0CA7  3194  2438  3189   	fcall	_map
 12413  0CAA  0021               	movlb	1	; select bank1
 12414  0CAB  0820               	movf	?_map^(0+128),w
 12415  0CAC  00AF               	movwf	___fttol@f1^(0+128)
 12416  0CAD  0821               	movf	(?_map+1)^(0+128),w
 12417  0CAE  00B0               	movwf	(___fttol@f1+1)^(0+128)
 12418  0CAF  0822               	movf	(?_map+2)^(0+128),w
 12419  0CB0  00B1               	movwf	(___fttol@f1+2)^(0+128)
 12420  0CB1  3191  21A3  3189   	fcall	___fttol
 12421  0CB4  0021               	movlb	1	; select bank1
 12422  0CB5  0830               	movf	(?___fttol^(0+128)+1),w
 12423  0CB6  0022               	movlb	2	; select bank2
 12424  0CB7  00A1               	movwf	(main@i+1)^(0+256)
 12425  0CB8  0021               	movlb	1	; select bank1
 12426  0CB9  082F               	movf	?___fttol^(0+128),w
 12427  0CBA  0022               	movlb	2	; select bank2
 12428  0CBB  00A0               	movwf	main@i^(0+256)
 12429                           
 12430                           ;main.c: 351: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
 12431  0CBC  3000               	movlw	0
 12432  0CBD  0021               	movlb	1	; select bank1
 12433  0CBE  00AC               	movwf	map@out_max^(0+128)
 12434  0CBF  3048               	movlw	72
 12435  0CC0  00AD               	movwf	(map@out_max+1)^(0+128)
 12436  0CC1  3043               	movlw	67
 12437  0CC2  00AE               	movwf	(map@out_max+2)^(0+128)
 12438  0CC3  3080               	movlw	128
 12439  0CC4  00A9               	movwf	map@out_min^(0+128)
 12440  0CC5  3092               	movlw	146
 12441  0CC6  00AA               	movwf	(map@out_min+1)^(0+128)
 12442  0CC7  3044               	movlw	68
 12443  0CC8  00AB               	movwf	(map@out_min+2)^(0+128)
 12444  0CC9  30C0               	movlw	192
 12445  0CCA  00A6               	movwf	map@in_max^(0+128)
 12446  0CCB  307F               	movlw	127
 12447  0CCC  00A7               	movwf	(map@in_max+1)^(0+128)
 12448  0CCD  3044               	movlw	68
 12449  0CCE  00A8               	movwf	(map@in_max+2)^(0+128)
 12450  0CCF  3000               	movlw	0
 12451  0CD0  00A3               	movwf	map@in_min^(0+128)
 12452  0CD1  3000               	movlw	0
 12453  0CD2  00A4               	movwf	(map@in_min+1)^(0+128)
 12454  0CD3  3000               	movlw	0
 12455  0CD4  00A5               	movwf	(map@in_min+2)^(0+128)
 12456  0CD5  0022               	movlb	2	; select bank2
 12457  0CD6  0868               	movf	(_knob1_prev+1)^(0+256),w
 12458  0CD7  0020               	movlb	0	; select bank0
 12459  0CD8  00AA               	movwf	___awtoft@c+1
 12460  0CD9  0022               	movlb	2	; select bank2
 12461  0CDA  0867               	movf	_knob1_prev^(0+256),w
 12462  0CDB  0020               	movlb	0	; select bank0
 12463  0CDC  00A9               	movwf	___awtoft@c
 12464  0CDD  3199  21FC  3189   	fcall	___awtoft
 12465  0CE0  0020               	movlb	0	; select bank0
 12466  0CE1  0829               	movf	?___awtoft,w
 12467  0CE2  0021               	movlb	1	; select bank1
 12468  0CE3  00A0               	movwf	map@x^(0+128)
 12469  0CE4  0020               	movlb	0	; select bank0
 12470  0CE5  082A               	movf	?___awtoft+1,w
 12471  0CE6  0021               	movlb	1	; select bank1
 12472  0CE7  00A1               	movwf	(map@x+1)^(0+128)
 12473  0CE8  0020               	movlb	0	; select bank0
 12474  0CE9  082B               	movf	?___awtoft+2,w
 12475  0CEA  0021               	movlb	1	; select bank1
 12476  0CEB  00A2               	movwf	(map@x+2)^(0+128)
 12477  0CEC  3194  2438  3189   	fcall	_map
 12478  0CEF  0021               	movlb	1	; select bank1
 12479  0CF0  0820               	movf	?_map^(0+128),w
 12480  0CF1  00AF               	movwf	___fttol@f1^(0+128)
 12481  0CF2  0821               	movf	(?_map+1)^(0+128),w
 12482  0CF3  00B0               	movwf	(___fttol@f1+1)^(0+128)
 12483  0CF4  0822               	movf	(?_map+2)^(0+128),w
 12484  0CF5  00B1               	movwf	(___fttol@f1+2)^(0+128)
 12485  0CF6  3191  21A3  3189   	fcall	___fttol
 12486  0CF9  0021               	movlb	1	; select bank1
 12487  0CFA  0832               	movf	(?___fttol+3)^(0+128),w
 12488  0CFB  0022               	movlb	2	; select bank2
 12489  0CFC  00E0               	movwf	(_baseline_delay_time+3)^(0+256)	;volatile
 12490  0CFD  0021               	movlb	1	; select bank1
 12491  0CFE  0831               	movf	(?___fttol+2)^(0+128),w
 12492  0CFF  0022               	movlb	2	; select bank2
 12493  0D00  00DF               	movwf	(_baseline_delay_time+2)^(0+256)	;volatile
 12494  0D01  0021               	movlb	1	; select bank1
 12495  0D02  0830               	movf	(?___fttol+1)^(0+128),w
 12496  0D03  0022               	movlb	2	; select bank2
 12497  0D04  00DE               	movwf	(_baseline_delay_time+1)^(0+256)	;volatile
 12498  0D05  0021               	movlb	1	; select bank1
 12499  0D06  082F               	movf	?___fttol^(0+128),w
 12500  0D07  0022               	movlb	2	; select bank2
 12501  0D08  00DD               	movwf	_baseline_delay_time^(0+256)	;volatile
 12502                           
 12503                           ;main.c: 352: delay_time_changed = 1;
 12504  0D09  3001               	movlw	1
 12505  0D0A  0023               	movlb	3	; select bank3
 12506  0D0B  00DE               	movwf	_delay_time_changed^(0+384)
 12507  0D0C  3000               	movlw	0
 12508  0D0D  00DF               	movwf	(_delay_time_changed^(0+384)+1)
 12509  0D0E                     l3389:	
 12510                           
 12511                           ;main.c: 353: }
 12512                           ;main.c: 362: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
 12513  0D0E  0023               	movlb	3	; select bank3
 12514  0D0F  0962               	comf	_knob2_prev^(0+384),w
 12515  0D10  0021               	movlb	1	; select bank1
 12516  0D11  00DE               	movwf	??_main^(0+128)
 12517  0D12  0023               	movlb	3	; select bank3
 12518  0D13  0963               	comf	(_knob2_prev+1)^(0+384),w
 12519  0D14  0021               	movlb	1	; select bank1
 12520  0D15  00DF               	movwf	(??_main^(0+128)+1)
 12521  0D16  0ADE               	incf	??_main^(0+128),f
 12522  0D17  1903               	skipnz
 12523  0D18  0ADF               	incf	(??_main^(0+128)+1),f
 12524  0D19  0022               	movlb	2	; select bank2
 12525  0D1A  0855               	movf	_knob_2_pos^(0+256),w
 12526  0D1B  0021               	movlb	1	; select bank1
 12527  0D1C  075E               	addwf	??_main^(0+128),w
 12528  0D1D  00E0               	movwf	(??_main+2)^(0+128)
 12529  0D1E  0022               	movlb	2	; select bank2
 12530  0D1F  0856               	movf	(_knob_2_pos+1)^(0+256),w
 12531  0D20  0021               	movlb	1	; select bank1
 12532  0D21  3D5F               	addwfc	(??_main+1)^(0+128),w
 12533  0D22  00E1               	movwf	(??_main+3)^(0+128)
 12534  0D23  0861               	movf	(??_main+3)^(0+128),w
 12535  0D24  3A80               	xorlw	128
 12536  0D25  00E2               	movwf	(??_main+4)^(0+128)
 12537  0D26  3080               	movlw	128
 12538  0D27  0262               	subwf	(??_main+4)^(0+128),w
 12539  0D28  1D03               	skipz
 12540  0D29  2D2C               	goto	u3755
 12541  0D2A  3004               	movlw	4
 12542  0D2B  0260               	subwf	(??_main+2)^(0+128),w
 12543  0D2C                     u3755:	
 12544  0D2C  1803               	skipnc
 12545  0D2D  2D4E               	goto	l3393
 12546  0D2E  0023               	movlb	3	; select bank3
 12547  0D2F  0962               	comf	_knob2_prev^(0+384),w
 12548  0D30  0021               	movlb	1	; select bank1
 12549  0D31  00DE               	movwf	??_main^(0+128)
 12550  0D32  0023               	movlb	3	; select bank3
 12551  0D33  0963               	comf	(_knob2_prev+1)^(0+384),w
 12552  0D34  0021               	movlb	1	; select bank1
 12553  0D35  00DF               	movwf	(??_main^(0+128)+1)
 12554  0D36  0ADE               	incf	??_main^(0+128),f
 12555  0D37  1903               	skipnz
 12556  0D38  0ADF               	incf	(??_main^(0+128)+1),f
 12557  0D39  0022               	movlb	2	; select bank2
 12558  0D3A  0855               	movf	_knob_2_pos^(0+256),w
 12559  0D3B  0021               	movlb	1	; select bank1
 12560  0D3C  075E               	addwf	??_main^(0+128),w
 12561  0D3D  00E0               	movwf	(??_main+2)^(0+128)
 12562  0D3E  0022               	movlb	2	; select bank2
 12563  0D3F  0856               	movf	(_knob_2_pos+1)^(0+256),w
 12564  0D40  0021               	movlb	1	; select bank1
 12565  0D41  3D5F               	addwfc	(??_main+1)^(0+128),w
 12566  0D42  00E1               	movwf	(??_main+3)^(0+128)
 12567  0D43  0861               	movf	(??_main+3)^(0+128),w
 12568  0D44  3A80               	xorlw	128
 12569  0D45  00E2               	movwf	(??_main+4)^(0+128)
 12570  0D46  307F               	movlw	127
 12571  0D47  0262               	subwf	(??_main+4)^(0+128),w
 12572  0D48  1D03               	skipz
 12573  0D49  2D4C               	goto	u3765
 12574  0D4A  30FD               	movlw	253
 12575  0D4B  0260               	subwf	(??_main+2)^(0+128),w
 12576  0D4C                     u3765:	
 12577  0D4C  1803               	skipnc
 12578  0D4D  2DB0               	goto	l3401
 12579  0D4E                     l3393:	
 12580                           
 12581                           ;main.c: 363: knob2_prev = knob_2_pos;
 12582  0D4E  0022               	movlb	2	; select bank2
 12583  0D4F  0856               	movf	(_knob_2_pos+1)^(0+256),w
 12584  0D50  0023               	movlb	3	; select bank3
 12585  0D51  00E3               	movwf	(_knob2_prev+1)^(0+384)
 12586  0D52  0022               	movlb	2	; select bank2
 12587  0D53  0855               	movf	_knob_2_pos^(0+256),w
 12588  0D54  0023               	movlb	3	; select bank3
 12589  0D55  00E2               	movwf	_knob2_prev^(0+384)
 12590                           
 12591                           ;main.c: 364: int i = map(knob2_prev, 0, 1023, 0, 39);
 12592  0D56  3000               	movlw	0
 12593  0D57  0021               	movlb	1	; select bank1
 12594  0D58  00AC               	movwf	map@out_max^(0+128)
 12595  0D59  301C               	movlw	28
 12596  0D5A  00AD               	movwf	(map@out_max+1)^(0+128)
 12597  0D5B  3042               	movlw	66
 12598  0D5C  00AE               	movwf	(map@out_max+2)^(0+128)
 12599  0D5D  3000               	movlw	0
 12600  0D5E  00A9               	movwf	map@out_min^(0+128)
 12601  0D5F  3000               	movlw	0
 12602  0D60  00AA               	movwf	(map@out_min+1)^(0+128)
 12603  0D61  3000               	movlw	0
 12604  0D62  00AB               	movwf	(map@out_min+2)^(0+128)
 12605  0D63  30C0               	movlw	192
 12606  0D64  00A6               	movwf	map@in_max^(0+128)
 12607  0D65  307F               	movlw	127
 12608  0D66  00A7               	movwf	(map@in_max+1)^(0+128)
 12609  0D67  3044               	movlw	68
 12610  0D68  00A8               	movwf	(map@in_max+2)^(0+128)
 12611  0D69  3000               	movlw	0
 12612  0D6A  00A3               	movwf	map@in_min^(0+128)
 12613  0D6B  3000               	movlw	0
 12614  0D6C  00A4               	movwf	(map@in_min+1)^(0+128)
 12615  0D6D  3000               	movlw	0
 12616  0D6E  00A5               	movwf	(map@in_min+2)^(0+128)
 12617  0D6F  0023               	movlb	3	; select bank3
 12618  0D70  0863               	movf	(_knob2_prev+1)^(0+384),w
 12619  0D71  0020               	movlb	0	; select bank0
 12620  0D72  00AA               	movwf	___awtoft@c+1
 12621  0D73  0023               	movlb	3	; select bank3
 12622  0D74  0862               	movf	_knob2_prev^(0+384),w
 12623  0D75  0020               	movlb	0	; select bank0
 12624  0D76  00A9               	movwf	___awtoft@c
 12625  0D77  3199  21FC  3189   	fcall	___awtoft
 12626  0D7A  0020               	movlb	0	; select bank0
 12627  0D7B  0829               	movf	?___awtoft,w
 12628  0D7C  0021               	movlb	1	; select bank1
 12629  0D7D  00A0               	movwf	map@x^(0+128)
 12630  0D7E  0020               	movlb	0	; select bank0
 12631  0D7F  082A               	movf	?___awtoft+1,w
 12632  0D80  0021               	movlb	1	; select bank1
 12633  0D81  00A1               	movwf	(map@x+1)^(0+128)
 12634  0D82  0020               	movlb	0	; select bank0
 12635  0D83  082B               	movf	?___awtoft+2,w
 12636  0D84  0021               	movlb	1	; select bank1
 12637  0D85  00A2               	movwf	(map@x+2)^(0+128)
 12638  0D86  3194  2438  3189   	fcall	_map
 12639  0D89  0021               	movlb	1	; select bank1
 12640  0D8A  0820               	movf	?_map^(0+128),w
 12641  0D8B  00AF               	movwf	___fttol@f1^(0+128)
 12642  0D8C  0821               	movf	(?_map+1)^(0+128),w
 12643  0D8D  00B0               	movwf	(___fttol@f1+1)^(0+128)
 12644  0D8E  0822               	movf	(?_map+2)^(0+128),w
 12645  0D8F  00B1               	movwf	(___fttol@f1+2)^(0+128)
 12646  0D90  3191  21A3  3189   	fcall	___fttol
 12647  0D93  0021               	movlb	1	; select bank1
 12648  0D94  0830               	movf	(?___fttol^(0+128)+1),w
 12649  0D95  0022               	movlb	2	; select bank2
 12650  0D96  00AD               	movwf	(main@i_407+1)^(0+256)
 12651  0D97  0021               	movlb	1	; select bank1
 12652  0D98  082F               	movf	?___fttol^(0+128),w
 12653  0D99  0022               	movlb	2	; select bank2
 12654  0D9A  00AC               	movwf	main@i_407^(0+256)
 12655                           
 12656                           ;main.c: 365: CCPR2 = iB25k[i];
 12657  0D9B  352C               	lslf	main@i_407^(0+256),w
 12658  0D9C  3EA0               	addlw	(low (_iB25k| (0+1024)))& (0+255)
 12659  0D9D  0086               	movwf	6
 12660  0D9E  3004               	movlw	4	; select bank9/10
 12661  0D9F  0087               	movwf	7
 12662  0DA0  3F40               	moviw [0]fsr1
 12663  0DA1  0025               	movlb	5	; select bank5
 12664  0DA2  0098               	movwf	24	;volatile
 12665  0DA3  3F41               	moviw [1]fsr1
 12666  0DA4  0099               	movwf	25	;volatile
 12667                           
 12668                           ;main.c: 366: CCPR3 = B25k[i];
 12669  0DA5  0022               	movlb	2	; select bank2
 12670  0DA6  352C               	lslf	main@i_407^(0+256),w
 12671  0DA7  3E20               	addlw	(low (_B25k| (0+1024)))& (0+255)
 12672  0DA8  0086               	movwf	6
 12673  0DA9  3004               	movlw	4	; select bank8/9
 12674  0DAA  0087               	movwf	7
 12675  0DAB  3F40               	moviw [0]fsr1
 12676  0DAC  0026               	movlb	6	; select bank6
 12677  0DAD  0091               	movwf	17	;volatile
 12678  0DAE  3F41               	moviw [1]fsr1
 12679  0DAF  0092               	movwf	18	;volatile
 12680  0DB0                     l3401:	
 12681                           
 12682                           ;main.c: 367: }
 12683                           ;main.c: 377: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
 12684  0DB0  0023               	movlb	3	; select bank3
 12685  0DB1  0964               	comf	_knob3_prev^(0+384),w
 12686  0DB2  0021               	movlb	1	; select bank1
 12687  0DB3  00DE               	movwf	??_main^(0+128)
 12688  0DB4  0023               	movlb	3	; select bank3
 12689  0DB5  0965               	comf	(_knob3_prev+1)^(0+384),w
 12690  0DB6  0021               	movlb	1	; select bank1
 12691  0DB7  00DF               	movwf	(??_main^(0+128)+1)
 12692  0DB8  0ADE               	incf	??_main^(0+128),f
 12693  0DB9  1903               	skipnz
 12694  0DBA  0ADF               	incf	(??_main^(0+128)+1),f
 12695  0DBB  0022               	movlb	2	; select bank2
 12696  0DBC  0857               	movf	_knob_3_pos^(0+256),w
 12697  0DBD  0021               	movlb	1	; select bank1
 12698  0DBE  075E               	addwf	??_main^(0+128),w
 12699  0DBF  00E0               	movwf	(??_main+2)^(0+128)
 12700  0DC0  0022               	movlb	2	; select bank2
 12701  0DC1  0858               	movf	(_knob_3_pos+1)^(0+256),w
 12702  0DC2  0021               	movlb	1	; select bank1
 12703  0DC3  3D5F               	addwfc	(??_main+1)^(0+128),w
 12704  0DC4  00E1               	movwf	(??_main+3)^(0+128)
 12705  0DC5  0861               	movf	(??_main+3)^(0+128),w
 12706  0DC6  3A80               	xorlw	128
 12707  0DC7  00E2               	movwf	(??_main+4)^(0+128)
 12708  0DC8  3080               	movlw	128
 12709  0DC9  0262               	subwf	(??_main+4)^(0+128),w
 12710  0DCA  1D03               	skipz
 12711  0DCB  2DCE               	goto	u3775
 12712  0DCC  3004               	movlw	4
 12713  0DCD  0260               	subwf	(??_main+2)^(0+128),w
 12714  0DCE                     u3775:	
 12715  0DCE  1803               	skipnc
 12716  0DCF  2DF0               	goto	l3405
 12717  0DD0  0023               	movlb	3	; select bank3
 12718  0DD1  0964               	comf	_knob3_prev^(0+384),w
 12719  0DD2  0021               	movlb	1	; select bank1
 12720  0DD3  00DE               	movwf	??_main^(0+128)
 12721  0DD4  0023               	movlb	3	; select bank3
 12722  0DD5  0965               	comf	(_knob3_prev+1)^(0+384),w
 12723  0DD6  0021               	movlb	1	; select bank1
 12724  0DD7  00DF               	movwf	(??_main^(0+128)+1)
 12725  0DD8  0ADE               	incf	??_main^(0+128),f
 12726  0DD9  1903               	skipnz
 12727  0DDA  0ADF               	incf	(??_main^(0+128)+1),f
 12728  0DDB  0022               	movlb	2	; select bank2
 12729  0DDC  0857               	movf	_knob_3_pos^(0+256),w
 12730  0DDD  0021               	movlb	1	; select bank1
 12731  0DDE  075E               	addwf	??_main^(0+128),w
 12732  0DDF  00E0               	movwf	(??_main+2)^(0+128)
 12733  0DE0  0022               	movlb	2	; select bank2
 12734  0DE1  0858               	movf	(_knob_3_pos+1)^(0+256),w
 12735  0DE2  0021               	movlb	1	; select bank1
 12736  0DE3  3D5F               	addwfc	(??_main+1)^(0+128),w
 12737  0DE4  00E1               	movwf	(??_main+3)^(0+128)
 12738  0DE5  0861               	movf	(??_main+3)^(0+128),w
 12739  0DE6  3A80               	xorlw	128
 12740  0DE7  00E2               	movwf	(??_main+4)^(0+128)
 12741  0DE8  307F               	movlw	127
 12742  0DE9  0262               	subwf	(??_main+4)^(0+128),w
 12743  0DEA  1D03               	skipz
 12744  0DEB  2DEE               	goto	u3785
 12745  0DEC  30FD               	movlw	253
 12746  0DED  0260               	subwf	(??_main+2)^(0+128),w
 12747  0DEE                     u3785:	
 12748  0DEE  1803               	skipnc
 12749  0DEF  2E52               	goto	l3413
 12750  0DF0                     l3405:	
 12751                           
 12752                           ;main.c: 378: knob3_prev = knob_3_pos;
 12753  0DF0  0022               	movlb	2	; select bank2
 12754  0DF1  0858               	movf	(_knob_3_pos+1)^(0+256),w
 12755  0DF2  0023               	movlb	3	; select bank3
 12756  0DF3  00E5               	movwf	(_knob3_prev+1)^(0+384)
 12757  0DF4  0022               	movlb	2	; select bank2
 12758  0DF5  0857               	movf	_knob_3_pos^(0+256),w
 12759  0DF6  0023               	movlb	3	; select bank3
 12760  0DF7  00E4               	movwf	_knob3_prev^(0+384)
 12761                           
 12762                           ;main.c: 379: int i = map(knob3_prev, 0, 1023, 16, 0);
 12763  0DF8  3000               	movlw	0
 12764  0DF9  0021               	movlb	1	; select bank1
 12765  0DFA  00AC               	movwf	map@out_max^(0+128)
 12766  0DFB  3000               	movlw	0
 12767  0DFC  00AD               	movwf	(map@out_max+1)^(0+128)
 12768  0DFD  3000               	movlw	0
 12769  0DFE  00AE               	movwf	(map@out_max+2)^(0+128)
 12770  0DFF  3000               	movlw	0
 12771  0E00  00A9               	movwf	map@out_min^(0+128)
 12772  0E01  3080               	movlw	128
 12773  0E02  00AA               	movwf	(map@out_min+1)^(0+128)
 12774  0E03  3041               	movlw	65
 12775  0E04  00AB               	movwf	(map@out_min+2)^(0+128)
 12776  0E05  30C0               	movlw	192
 12777  0E06  00A6               	movwf	map@in_max^(0+128)
 12778  0E07  307F               	movlw	127
 12779  0E08  00A7               	movwf	(map@in_max+1)^(0+128)
 12780  0E09  3044               	movlw	68
 12781  0E0A  00A8               	movwf	(map@in_max+2)^(0+128)
 12782  0E0B  3000               	movlw	0
 12783  0E0C  00A3               	movwf	map@in_min^(0+128)
 12784  0E0D  3000               	movlw	0
 12785  0E0E  00A4               	movwf	(map@in_min+1)^(0+128)
 12786  0E0F  3000               	movlw	0
 12787  0E10  00A5               	movwf	(map@in_min+2)^(0+128)
 12788  0E11  0023               	movlb	3	; select bank3
 12789  0E12  0865               	movf	(_knob3_prev+1)^(0+384),w
 12790  0E13  0020               	movlb	0	; select bank0
 12791  0E14  00AA               	movwf	___awtoft@c+1
 12792  0E15  0023               	movlb	3	; select bank3
 12793  0E16  0864               	movf	_knob3_prev^(0+384),w
 12794  0E17  0020               	movlb	0	; select bank0
 12795  0E18  00A9               	movwf	___awtoft@c
 12796  0E19  3199  21FC  3189   	fcall	___awtoft
 12797  0E1C  0020               	movlb	0	; select bank0
 12798  0E1D  0829               	movf	?___awtoft,w
 12799  0E1E  0021               	movlb	1	; select bank1
 12800  0E1F  00A0               	movwf	map@x^(0+128)
 12801  0E20  0020               	movlb	0	; select bank0
 12802  0E21  082A               	movf	?___awtoft+1,w
 12803  0E22  0021               	movlb	1	; select bank1
 12804  0E23  00A1               	movwf	(map@x+1)^(0+128)
 12805  0E24  0020               	movlb	0	; select bank0
 12806  0E25  082B               	movf	?___awtoft+2,w
 12807  0E26  0021               	movlb	1	; select bank1
 12808  0E27  00A2               	movwf	(map@x+2)^(0+128)
 12809  0E28  3194  2438  3189   	fcall	_map
 12810  0E2B  0021               	movlb	1	; select bank1
 12811  0E2C  0820               	movf	?_map^(0+128),w
 12812  0E2D  00AF               	movwf	___fttol@f1^(0+128)
 12813  0E2E  0821               	movf	(?_map+1)^(0+128),w
 12814  0E2F  00B0               	movwf	(___fttol@f1+1)^(0+128)
 12815  0E30  0822               	movf	(?_map+2)^(0+128),w
 12816  0E31  00B1               	movwf	(___fttol@f1+2)^(0+128)
 12817  0E32  3191  21A3  3189   	fcall	___fttol
 12818  0E35  0021               	movlb	1	; select bank1
 12819  0E36  0830               	movf	(?___fttol^(0+128)+1),w
 12820  0E37  0022               	movlb	2	; select bank2
 12821  0E38  00AF               	movwf	(main@i_408+1)^(0+256)
 12822  0E39  0021               	movlb	1	; select bank1
 12823  0E3A  082F               	movf	?___fttol^(0+128),w
 12824  0E3B  0022               	movlb	2	; select bank2
 12825  0E3C  00AE               	movwf	main@i_408^(0+256)
 12826                           
 12827                           ;main.c: 380: CCPR4 = iB25k[i];
 12828  0E3D  352E               	lslf	main@i_408^(0+256),w
 12829  0E3E  3EA0               	addlw	(low (_iB25k| (0+1024)))& (0+255)
 12830  0E3F  0086               	movwf	6
 12831  0E40  3004               	movlw	4	; select bank9/10
 12832  0E41  0087               	movwf	7
 12833  0E42  3F40               	moviw [0]fsr1
 12834  0E43  0026               	movlb	6	; select bank6
 12835  0E44  0098               	movwf	24	;volatile
 12836  0E45  3F41               	moviw [1]fsr1
 12837  0E46  0099               	movwf	25	;volatile
 12838                           
 12839                           ;main.c: 381: CCPR5 = B25k[i];
 12840  0E47  0022               	movlb	2	; select bank2
 12841  0E48  352E               	lslf	main@i_408^(0+256),w
 12842  0E49  3E20               	addlw	(low (_B25k| (0+1024)))& (0+255)
 12843  0E4A  0086               	movwf	6
 12844  0E4B  3004               	movlw	4	; select bank8/9
 12845  0E4C  0087               	movwf	7
 12846  0E4D  3F40               	moviw [0]fsr1
 12847  0E4E  0026               	movlb	6	; select bank6
 12848  0E4F  009C               	movwf	28	;volatile
 12849  0E50  3F41               	moviw [1]fsr1
 12850  0E51  009D               	movwf	29	;volatile
 12851  0E52                     l3413:	
 12852                           
 12853                           ;main.c: 382: }
 12854                           ;main.c: 392: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
 12855  0E52  0023               	movlb	3	; select bank3
 12856  0E53  0966               	comf	_knob4_prev^(0+384),w
 12857  0E54  0021               	movlb	1	; select bank1
 12858  0E55  00DE               	movwf	??_main^(0+128)
 12859  0E56  0023               	movlb	3	; select bank3
 12860  0E57  0967               	comf	(_knob4_prev+1)^(0+384),w
 12861  0E58  0021               	movlb	1	; select bank1
 12862  0E59  00DF               	movwf	(??_main^(0+128)+1)
 12863  0E5A  0ADE               	incf	??_main^(0+128),f
 12864  0E5B  1903               	skipnz
 12865  0E5C  0ADF               	incf	(??_main^(0+128)+1),f
 12866  0E5D  086D               	movf	_knob_4_pos^(0+128),w
 12867  0E5E  075E               	addwf	??_main^(0+128),w
 12868  0E5F  00E0               	movwf	(??_main+2)^(0+128)
 12869  0E60  086E               	movf	(_knob_4_pos+1)^(0+128),w
 12870  0E61  3D5F               	addwfc	(??_main+1)^(0+128),w
 12871  0E62  00E1               	movwf	(??_main+3)^(0+128)
 12872  0E63  0861               	movf	(??_main+3)^(0+128),w
 12873  0E64  3A80               	xorlw	128
 12874  0E65  00E2               	movwf	(??_main+4)^(0+128)
 12875  0E66  3080               	movlw	128
 12876  0E67  0262               	subwf	(??_main+4)^(0+128),w
 12877  0E68  1D03               	skipz
 12878  0E69  2E6C               	goto	u3795
 12879  0E6A  3004               	movlw	4
 12880  0E6B  0260               	subwf	(??_main+2)^(0+128),w
 12881  0E6C                     u3795:	
 12882  0E6C  1803               	skipnc
 12883  0E6D  2E8A               	goto	l3417
 12884  0E6E  0023               	movlb	3	; select bank3
 12885  0E6F  0966               	comf	_knob4_prev^(0+384),w
 12886  0E70  0021               	movlb	1	; select bank1
 12887  0E71  00DE               	movwf	??_main^(0+128)
 12888  0E72  0023               	movlb	3	; select bank3
 12889  0E73  0967               	comf	(_knob4_prev+1)^(0+384),w
 12890  0E74  0021               	movlb	1	; select bank1
 12891  0E75  00DF               	movwf	(??_main^(0+128)+1)
 12892  0E76  0ADE               	incf	??_main^(0+128),f
 12893  0E77  1903               	skipnz
 12894  0E78  0ADF               	incf	(??_main^(0+128)+1),f
 12895  0E79  086D               	movf	_knob_4_pos^(0+128),w
 12896  0E7A  075E               	addwf	??_main^(0+128),w
 12897  0E7B  00E0               	movwf	(??_main+2)^(0+128)
 12898  0E7C  086E               	movf	(_knob_4_pos+1)^(0+128),w
 12899  0E7D  3D5F               	addwfc	(??_main+1)^(0+128),w
 12900  0E7E  00E1               	movwf	(??_main+3)^(0+128)
 12901  0E7F  0861               	movf	(??_main+3)^(0+128),w
 12902  0E80  3A80               	xorlw	128
 12903  0E81  00E2               	movwf	(??_main+4)^(0+128)
 12904  0E82  307F               	movlw	127
 12905  0E83  0262               	subwf	(??_main+4)^(0+128),w
 12906  0E84  1D03               	skipz
 12907  0E85  2E88               	goto	u3805
 12908  0E86  30FD               	movlw	253
 12909  0E87  0260               	subwf	(??_main+2)^(0+128),w
 12910  0E88                     u3805:	
 12911  0E88  1803               	skipnc
 12912  0E89  2ED7               	goto	l3421
 12913  0E8A                     l3417:	
 12914                           
 12915                           ;main.c: 393: knob4_prev = knob_4_pos;
 12916  0E8A  0021               	movlb	1	; select bank1
 12917  0E8B  086E               	movf	(_knob_4_pos+1)^(0+128),w
 12918  0E8C  0023               	movlb	3	; select bank3
 12919  0E8D  00E7               	movwf	(_knob4_prev+1)^(0+384)
 12920  0E8E  0021               	movlb	1	; select bank1
 12921  0E8F  086D               	movf	_knob_4_pos^(0+128),w
 12922  0E90  0023               	movlb	3	; select bank3
 12923  0E91  00E6               	movwf	_knob4_prev^(0+384)
 12924                           
 12925                           ;main.c: 394: mod_delay_time = map(knob4_prev, 0, 1023, 60, 1000);
 12926  0E92  3000               	movlw	0
 12927  0E93  0021               	movlb	1	; select bank1
 12928  0E94  00AC               	movwf	map@out_max^(0+128)
 12929  0E95  307A               	movlw	122
 12930  0E96  00AD               	movwf	(map@out_max+1)^(0+128)
 12931  0E97  3044               	movlw	68
 12932  0E98  00AE               	movwf	(map@out_max+2)^(0+128)
 12933  0E99  3000               	movlw	0
 12934  0E9A  00A9               	movwf	map@out_min^(0+128)
 12935  0E9B  3070               	movlw	112
 12936  0E9C  00AA               	movwf	(map@out_min+1)^(0+128)
 12937  0E9D  3042               	movlw	66
 12938  0E9E  00AB               	movwf	(map@out_min+2)^(0+128)
 12939  0E9F  30C0               	movlw	192
 12940  0EA0  00A6               	movwf	map@in_max^(0+128)
 12941  0EA1  307F               	movlw	127
 12942  0EA2  00A7               	movwf	(map@in_max+1)^(0+128)
 12943  0EA3  3044               	movlw	68
 12944  0EA4  00A8               	movwf	(map@in_max+2)^(0+128)
 12945  0EA5  3000               	movlw	0
 12946  0EA6  00A3               	movwf	map@in_min^(0+128)
 12947  0EA7  3000               	movlw	0
 12948  0EA8  00A4               	movwf	(map@in_min+1)^(0+128)
 12949  0EA9  3000               	movlw	0
 12950  0EAA  00A5               	movwf	(map@in_min+2)^(0+128)
 12951  0EAB  0023               	movlb	3	; select bank3
 12952  0EAC  0867               	movf	(_knob4_prev+1)^(0+384),w
 12953  0EAD  0020               	movlb	0	; select bank0
 12954  0EAE  00AA               	movwf	___awtoft@c+1
 12955  0EAF  0023               	movlb	3	; select bank3
 12956  0EB0  0866               	movf	_knob4_prev^(0+384),w
 12957  0EB1  0020               	movlb	0	; select bank0
 12958  0EB2  00A9               	movwf	___awtoft@c
 12959  0EB3  3199  21FC  3189   	fcall	___awtoft
 12960  0EB6  0020               	movlb	0	; select bank0
 12961  0EB7  0829               	movf	?___awtoft,w
 12962  0EB8  0021               	movlb	1	; select bank1
 12963  0EB9  00A0               	movwf	map@x^(0+128)
 12964  0EBA  0020               	movlb	0	; select bank0
 12965  0EBB  082A               	movf	?___awtoft+1,w
 12966  0EBC  0021               	movlb	1	; select bank1
 12967  0EBD  00A1               	movwf	(map@x+1)^(0+128)
 12968  0EBE  0020               	movlb	0	; select bank0
 12969  0EBF  082B               	movf	?___awtoft+2,w
 12970  0EC0  0021               	movlb	1	; select bank1
 12971  0EC1  00A2               	movwf	(map@x+2)^(0+128)
 12972  0EC2  3194  2438  3189   	fcall	_map
 12973  0EC5  0021               	movlb	1	; select bank1
 12974  0EC6  0820               	movf	?_map^(0+128),w
 12975  0EC7  00AF               	movwf	___fttol@f1^(0+128)
 12976  0EC8  0821               	movf	(?_map+1)^(0+128),w
 12977  0EC9  00B0               	movwf	(___fttol@f1+1)^(0+128)
 12978  0ECA  0822               	movf	(?_map+2)^(0+128),w
 12979  0ECB  00B1               	movwf	(___fttol@f1+2)^(0+128)
 12980  0ECC  3191  21A3  3189   	fcall	___fttol
 12981  0ECF  0021               	movlb	1	; select bank1
 12982  0ED0  0830               	movf	(?___fttol^(0+128)+1),w
 12983  0ED1  0023               	movlb	3	; select bank3
 12984  0ED2  00EB               	movwf	(_mod_delay_time+1)^(0+384)
 12985  0ED3  0021               	movlb	1	; select bank1
 12986  0ED4  082F               	movf	?___fttol^(0+128),w
 12987  0ED5  0023               	movlb	3	; select bank3
 12988  0ED6  00EA               	movwf	_mod_delay_time^(0+384)
 12989  0ED7                     l3421:	
 12990                           
 12991                           ;main.c: 395: }
 12992                           ;main.c: 403: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
 12993  0ED7  0023               	movlb	3	; select bank3
 12994  0ED8  0968               	comf	_knob5_prev^(0+384),w
 12995  0ED9  0021               	movlb	1	; select bank1
 12996  0EDA  00DE               	movwf	??_main^(0+128)
 12997  0EDB  0023               	movlb	3	; select bank3
 12998  0EDC  0969               	comf	(_knob5_prev+1)^(0+384),w
 12999  0EDD  0021               	movlb	1	; select bank1
 13000  0EDE  00DF               	movwf	(??_main^(0+128)+1)
 13001  0EDF  0ADE               	incf	??_main^(0+128),f
 13002  0EE0  1903               	skipnz
 13003  0EE1  0ADF               	incf	(??_main^(0+128)+1),f
 13004  0EE2  0023               	movlb	3	; select bank3
 13005  0EE3  0854               	movf	_knob_5_pos^(0+384),w
 13006  0EE4  0021               	movlb	1	; select bank1
 13007  0EE5  075E               	addwf	??_main^(0+128),w
 13008  0EE6  00E0               	movwf	(??_main+2)^(0+128)
 13009  0EE7  0023               	movlb	3	; select bank3
 13010  0EE8  0855               	movf	(_knob_5_pos+1)^(0+384),w
 13011  0EE9  0021               	movlb	1	; select bank1
 13012  0EEA  3D5F               	addwfc	(??_main+1)^(0+128),w
 13013  0EEB  00E1               	movwf	(??_main+3)^(0+128)
 13014  0EEC  0861               	movf	(??_main+3)^(0+128),w
 13015  0EED  3A80               	xorlw	128
 13016  0EEE  00E2               	movwf	(??_main+4)^(0+128)
 13017  0EEF  3080               	movlw	128
 13018  0EF0  0262               	subwf	(??_main+4)^(0+128),w
 13019  0EF1  1D03               	skipz
 13020  0EF2  2EF5               	goto	u3815
 13021  0EF3  3004               	movlw	4
 13022  0EF4  0260               	subwf	(??_main+2)^(0+128),w
 13023  0EF5                     u3815:	
 13024  0EF5  1803               	skipnc
 13025  0EF6  2F17               	goto	l3425
 13026  0EF7  0023               	movlb	3	; select bank3
 13027  0EF8  0968               	comf	_knob5_prev^(0+384),w
 13028  0EF9  0021               	movlb	1	; select bank1
 13029  0EFA  00DE               	movwf	??_main^(0+128)
 13030  0EFB  0023               	movlb	3	; select bank3
 13031  0EFC  0969               	comf	(_knob5_prev+1)^(0+384),w
 13032  0EFD  0021               	movlb	1	; select bank1
 13033  0EFE  00DF               	movwf	(??_main^(0+128)+1)
 13034  0EFF  0ADE               	incf	??_main^(0+128),f
 13035  0F00  1903               	skipnz
 13036  0F01  0ADF               	incf	(??_main^(0+128)+1),f
 13037  0F02  0023               	movlb	3	; select bank3
 13038  0F03  0854               	movf	_knob_5_pos^(0+384),w
 13039  0F04  0021               	movlb	1	; select bank1
 13040  0F05  075E               	addwf	??_main^(0+128),w
 13041  0F06  00E0               	movwf	(??_main+2)^(0+128)
 13042  0F07  0023               	movlb	3	; select bank3
 13043  0F08  0855               	movf	(_knob_5_pos+1)^(0+384),w
 13044  0F09  0021               	movlb	1	; select bank1
 13045  0F0A  3D5F               	addwfc	(??_main+1)^(0+128),w
 13046  0F0B  00E1               	movwf	(??_main+3)^(0+128)
 13047  0F0C  0861               	movf	(??_main+3)^(0+128),w
 13048  0F0D  3A80               	xorlw	128
 13049  0F0E  00E2               	movwf	(??_main+4)^(0+128)
 13050  0F0F  307F               	movlw	127
 13051  0F10  0262               	subwf	(??_main+4)^(0+128),w
 13052  0F11  1D03               	skipz
 13053  0F12  2F15               	goto	u3825
 13054  0F13  30FD               	movlw	253
 13055  0F14  0260               	subwf	(??_main+2)^(0+128),w
 13056  0F15                     u3825:	
 13057  0F15  1803               	skipnc
 13058  0F16  2F1C               	goto	l270
 13059  0F17                     l3425:	
 13060                           
 13061                           ;main.c: 404: knob5_prev = knob_5_pos;
 13062  0F17  0023               	movlb	3	; select bank3
 13063  0F18  0855               	movf	(_knob_5_pos+1)^(0+384),w
 13064  0F19  00E9               	movwf	(_knob5_prev+1)^(0+384)
 13065  0F1A  0854               	movf	_knob_5_pos^(0+384),w
 13066  0F1B  00E8               	movwf	_knob5_prev^(0+384)
 13067  0F1C                     l270:	
 13068                           
 13069                           ;main.c: 405: }
 13070                           ;main.c: 418: if (mod_timer >= mod_delay_time) {
 13071  0F1C  0023               	movlb	3	; select bank3
 13072  0F1D  086A               	movf	_mod_delay_time^(0+384),w
 13073  0F1E  0021               	movlb	1	; select bank1
 13074  0F1F  00DE               	movwf	??_main^(0+128)
 13075  0F20  0023               	movlb	3	; select bank3
 13076  0F21  086B               	movf	(_mod_delay_time+1)^(0+384),w
 13077  0F22  0021               	movlb	1	; select bank1
 13078  0F23  00DF               	movwf	(??_main^(0+128)+1)
 13079  0F24  3000               	movlw	0
 13080  0F25  1BDF               	btfsc	(??_main^(0+128)+1),7
 13081  0F26  30FF               	movlw	255
 13082  0F27  00E0               	movwf	(??_main^(0+128)+2)
 13083  0F28  00E1               	movwf	(??_main^(0+128)+3)
 13084  0F29  0023               	movlb	3	; select bank3
 13085  0F2A  083B               	movf	(_mod_timer+3)^(0+384),w	;volatile
 13086  0F2B  3A80               	xorlw	128
 13087  0F2C  0021               	movlb	1	; select bank1
 13088  0F2D  00E2               	movwf	(??_main+4)^(0+128)
 13089  0F2E  0861               	movf	(??_main+3)^(0+128),w
 13090  0F2F  3A80               	xorlw	128
 13091  0F30  0262               	subwf	(??_main+4)^(0+128),w
 13092  0F31  0023               	movlb	3	; select bank3
 13093  0F32  1D03               	skipz
 13094  0F33  2F44               	goto	u3833
 13095  0F34  0021               	movlb	1	; select bank1
 13096  0F35  0860               	movf	(??_main+2)^(0+128),w
 13097  0F36  0023               	movlb	3	; select bank3
 13098  0F37  023A               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 13099  0F38  1D03               	skipz
 13100  0F39  2F44               	goto	u3833
 13101  0F3A  0021               	movlb	1	; select bank1
 13102  0F3B  085F               	movf	(??_main+1)^(0+128),w
 13103  0F3C  0023               	movlb	3	; select bank3
 13104  0F3D  0239               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 13105  0F3E  1D03               	skipz
 13106  0F3F  2F44               	goto	u3833
 13107  0F40  0021               	movlb	1	; select bank1
 13108  0F41  085E               	movf	??_main^(0+128),w
 13109  0F42  0023               	movlb	3	; select bank3
 13110  0F43  0238               	subwf	_mod_timer^(0+384),w	;volatile
 13111  0F44                     u3833:	
 13112  0F44  1C03               	skipc
 13113  0F45  2FFE               	goto	L7
 13114                           
 13115                           ;main.c: 420: mod_counter = mod_counter + 1;
 13116  0F46  0022               	movlb	2	; select bank2
 13117  0F47  0859               	movf	_mod_counter^(0+256),w
 13118  0F48  3E01               	addlw	1
 13119  0F49  00D9               	movwf	_mod_counter^(0+256)
 13120  0F4A  3000               	movlw	0
 13121  0F4B  3D5A               	addwfc	(_mod_counter+1)^(0+256),w
 13122  0F4C  00DA               	movwf	(_mod_counter+1)^(0+256)
 13123                           
 13124                           ;main.c: 421: mod_timer = 0;
 13125  0F4D  3000               	movlw	0
 13126  0F4E  0023               	movlb	3	; select bank3
 13127  0F4F  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13128  0F50  3000               	movlw	0
 13129  0F51  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13130  0F52  3000               	movlw	0
 13131  0F53  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13132  0F54  3000               	movlw	0
 13133  0F55  00B8               	movwf	_mod_timer^(0+384)	;volatile
 13134                           
 13135                           ;main.c: 423: int fancy_mod_cycle = 60;
 13136  0F56  303C               	movlw	60
 13137  0F57  0022               	movlb	2	; select bank2
 13138  0F58  00B0               	movwf	main@fancy_mod_cycle^(0+256)
 13139  0F59  3000               	movlw	0
 13140  0F5A  00B1               	movwf	(main@fancy_mod_cycle^(0+256)+1)
 13141                           
 13142                           ;main.c: 425: if (bottom_push_state > 2) {
 13143  0F5B  0866               	movf	(_bottom_push_state+1)^(0+256),w
 13144  0F5C  3A80               	xorlw	128
 13145  0F5D  0021               	movlb	1	; select bank1
 13146  0F5E  00DE               	movwf	??_main^(0+128)
 13147  0F5F  3080               	movlw	128
 13148  0F60  025E               	subwf	??_main^(0+128),w
 13149  0F61  1D03               	skipz
 13150  0F62  2F66               	goto	u3845
 13151  0F63  3003               	movlw	3
 13152  0F64  0022               	movlb	2	; select bank2
 13153  0F65  0265               	subwf	_bottom_push_state^(0+256),w
 13154  0F66                     u3845:	
 13155  0F66  1C03               	skipc
 13156  0F67  2F77               	goto	l3439
 13157                           
 13158                           ;main.c: 426: if (mod_counter >= 31) {
 13159  0F68  0022               	movlb	2	; select bank2
 13160  0F69  085A               	movf	(_mod_counter+1)^(0+256),w
 13161  0F6A  3A80               	xorlw	128
 13162  0F6B  0021               	movlb	1	; select bank1
 13163  0F6C  00DE               	movwf	??_main^(0+128)
 13164  0F6D  3080               	movlw	128
 13165  0F6E  025E               	subwf	??_main^(0+128),w
 13166  0F6F  1D03               	skipz
 13167  0F70  2F74               	goto	u3855
 13168  0F71  301F               	movlw	31
 13169  0F72  0022               	movlb	2	; select bank2
 13170  0F73  0259               	subwf	_mod_counter^(0+256),w
 13171  0F74                     u3855:	
 13172  0F74  1C03               	skipc
 13173  0F75  2F8B               	goto	l3443
 13174  0F76  2F88               	goto	l3441
 13175  0F77                     l3439:	
 13176                           ;main.c: 428: }
 13177                           ;main.c: 429: } else {
 13178                           
 13179                           ;main.c: 427: mod_counter = 0;
 13180                           
 13181                           
 13182                           ;main.c: 430: if (mod_counter > fancy_mod_cycle) {
 13183  0F77  0022               	movlb	2	; select bank2
 13184  0F78  0831               	movf	(main@fancy_mod_cycle+1)^(0+256),w
 13185  0F79  3A80               	xorlw	128
 13186  0F7A  0021               	movlb	1	; select bank1
 13187  0F7B  00DE               	movwf	??_main^(0+128)
 13188  0F7C  0022               	movlb	2	; select bank2
 13189  0F7D  085A               	movf	(_mod_counter+1)^(0+256),w
 13190  0F7E  3A80               	xorlw	128
 13191  0F7F  0021               	movlb	1	; select bank1
 13192  0F80  025E               	subwf	??_main^(0+128),w
 13193  0F81  1D03               	skipz
 13194  0F82  2F86               	goto	u3865
 13195  0F83  0022               	movlb	2	; select bank2
 13196  0F84  0859               	movf	_mod_counter^(0+256),w
 13197  0F85  0230               	subwf	main@fancy_mod_cycle^(0+256),w
 13198  0F86                     u3865:	
 13199  0F86  1803               	skipnc
 13200  0F87  2F8B               	goto	l3443
 13201  0F88                     l3441:	
 13202                           
 13203                           ;main.c: 431: mod_counter = 0;
 13204  0F88  0022               	movlb	2	; select bank2
 13205  0F89  01D9               	clrf	_mod_counter^(0+256)
 13206  0F8A  01DA               	clrf	(_mod_counter+1)^(0+256)
 13207  0F8B                     l3443:	
 13208                           
 13209                           ;main.c: 432: }
 13210                           ;main.c: 433: }
 13211                           ;main.c: 436: double step_size = 360 / fancy_mod_cycle;
 13212  0F8B  0022               	movlb	2	; select bank2
 13213  0F8C  0831               	movf	(main@fancy_mod_cycle+1)^(0+256),w
 13214  0F8D  0020               	movlb	0	; select bank0
 13215  0F8E  00A1               	movwf	___awdiv@divisor+1
 13216  0F8F  0022               	movlb	2	; select bank2
 13217  0F90  0830               	movf	main@fancy_mod_cycle^(0+256),w
 13218  0F91  0020               	movlb	0	; select bank0
 13219  0F92  00A0               	movwf	___awdiv@divisor
 13220  0F93  3068               	movlw	104
 13221  0F94  00A2               	movwf	___awdiv@dividend
 13222  0F95  3001               	movlw	1
 13223  0F96  00A3               	movwf	___awdiv@dividend+1
 13224  0F97  319D  25DB  3189   	fcall	___awdiv
 13225  0F9A  0020               	movlb	0	; select bank0
 13226  0F9B  0821               	movf	?___awdiv+1,w
 13227  0F9C  00AA               	movwf	___awtoft@c+1
 13228  0F9D  0820               	movf	?___awdiv,w
 13229  0F9E  00A9               	movwf	___awtoft@c
 13230  0F9F  3199  21FC  3189   	fcall	___awtoft
 13231  0FA2  0020               	movlb	0	; select bank0
 13232  0FA3  0829               	movf	?___awtoft,w
 13233  0FA4  0022               	movlb	2	; select bank2
 13234  0FA5  00A6               	movwf	main@step_size^(0+256)
 13235  0FA6  0020               	movlb	0	; select bank0
 13236  0FA7  082A               	movf	?___awtoft+1,w
 13237  0FA8  0022               	movlb	2	; select bank2
 13238  0FA9  00A7               	movwf	(main@step_size+1)^(0+256)
 13239  0FAA  0020               	movlb	0	; select bank0
 13240  0FAB  082B               	movf	?___awtoft+2,w
 13241  0FAC  0022               	movlb	2	; select bank2
 13242  0FAD  00A8               	movwf	(main@step_size+2)^(0+256)
 13243                           
 13244                           ;main.c: 437: double rad_conversion = 3.14159265358979323846 / 180;
 13245  0FAE  30FA               	movlw	250
 13246  0FAF  00A9               	movwf	main@rad_conversion^(0+256)
 13247  0FB0  308E               	movlw	142
 13248  0FB1  00AA               	movwf	(main@rad_conversion+1)^(0+256)
 13249  0FB2  303C               	movlw	60
 13250  0FB3  00AB               	movwf	(main@rad_conversion+2)^(0+256)
 13251                           
 13252                           ;main.c: 438: int freq = 50;
 13253  0FB4  3032               	movlw	50
 13254  0FB5  00B2               	movwf	main@freq^(0+256)
 13255  0FB6  3000               	movlw	0
 13256  0FB7  00B3               	movwf	(main@freq^(0+256)+1)
 13257                           
 13258                           ;main.c: 440: signed int adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
 13259  0FB8  3000               	movlw	0
 13260  0FB9  0021               	movlb	1	; select bank1
 13261  0FBA  00AC               	movwf	map@out_max^(0+128)
 13262  0FBB  3000               	movlw	0
 13263  0FBC  00AD               	movwf	(map@out_max+1)^(0+128)
 13264  0FBD  3000               	movlw	0
 13265  0FBE  00AE               	movwf	(map@out_max+2)^(0+128)
 13266  0FBF  3060               	movlw	96
 13267  0FC0  00A9               	movwf	map@out_min^(0+128)
 13268  0FC1  309F               	movlw	159
 13269  0FC2  00AA               	movwf	(map@out_min+1)^(0+128)
 13270  0FC3  3044               	movlw	68
 13271  0FC4  00AB               	movwf	(map@out_min+2)^(0+128)
 13272  0FC5  30C0               	movlw	192
 13273  0FC6  00A6               	movwf	map@in_max^(0+128)
 13274  0FC7  307F               	movlw	127
 13275  0FC8  00A7               	movwf	(map@in_max+1)^(0+128)
 13276  0FC9  3044               	movlw	68
 13277  0FCA  00A8               	movwf	(map@in_max+2)^(0+128)
 13278  0FCB  3000               	movlw	0
 13279  0FCC  00A3               	movwf	map@in_min^(0+128)
 13280  0FCD  3000               	movlw	0
 13281  0FCE  00A4               	movwf	(map@in_min+1)^(0+128)
 13282  0FCF  3000               	movlw	0
 13283  0FD0  00A5               	movwf	(map@in_min+2)^(0+128)
 13284  0FD1  0023               	movlb	3	; select bank3
 13285  0FD2  0869               	movf	(_knob5_prev+1)^(0+384),w
 13286  0FD3  0020               	movlb	0	; select bank0
 13287  0FD4  00AA               	movwf	___awtoft@c+1
 13288  0FD5  0023               	movlb	3	; select bank3
 13289  0FD6  0868               	movf	_knob5_prev^(0+384),w
 13290  0FD7  0020               	movlb	0	; select bank0
 13291  0FD8  00A9               	movwf	___awtoft@c
 13292  0FD9  3199  21FC  3189   	fcall	___awtoft
 13293  0FDC  0020               	movlb	0	; select bank0
 13294  0FDD  0829               	movf	?___awtoft,w
 13295  0FDE  0021               	movlb	1	; select bank1
 13296  0FDF  00A0               	movwf	map@x^(0+128)
 13297  0FE0  0020               	movlb	0	; select bank0
 13298  0FE1  082A               	movf	?___awtoft+1,w
 13299  0FE2  0021               	movlb	1	; select bank1
 13300  0FE3  00A1               	movwf	(map@x+1)^(0+128)
 13301  0FE4  0020               	movlb	0	; select bank0
 13302  0FE5  082B               	movf	?___awtoft+2,w
 13303  0FE6  0021               	movlb	1	; select bank1
 13304  0FE7  00A2               	movwf	(map@x+2)^(0+128)
 13305  0FE8  3194  2438  3189   	fcall	_map
 13306  0FEB  0021               	movlb	1	; select bank1
 13307  0FEC  0820               	movf	?_map^(0+128),w
 13308  0FED  00AF               	movwf	___fttol@f1^(0+128)
 13309  0FEE  0821               	movf	(?_map+1)^(0+128),w
 13310  0FEF  00B0               	movwf	(___fttol@f1+1)^(0+128)
 13311  0FF0  0822               	movf	(?_map+2)^(0+128),w
 13312  0FF1  00B1               	movwf	(___fttol@f1+2)^(0+128)
 13313  0FF2  3191  21A3         	fcall	___fttol
 13314  0FF4  0021               	movlb	1	; select bank1
 13315  0FF5  0830               	movf	(?___fttol^(0+128)+1),w
 13316  0FF6  0022               	movlb	2	; select bank2
 13317  0FF7  00A5               	movwf	(main@adjusted_pot_value+1)^(0+256)
 13318  0FF8  0021               	movlb	1	; select bank1
 13319  0FF9  082F               	movf	?___fttol^(0+128),w
 13320  0FFA  0022               	movlb	2	; select bank2
 13321  0FFB  00A4               	movwf	main@adjusted_pot_value^(0+256)
 13322                           
 13323                           ;main.c: 441: switch (bottom_push_state) {
 13324  0FFC  3183  2BD5         	goto	l3491
 13325  0FFE                     L7:	
 13326  0FFE                     L6:	
 13327  0FFE  3184  2C2A         	ljmp	l3497


Data Sizes:
    Strings     0
    Constant    27
    Data        944
    BSS         202
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80     79      79
    BANK1            80     77      79
    BANK2            80     37      79
    BANK3            80      0      78
    BANK4            80      0      52
    BANK5            80      0      60
    BANK6            80      0      64
    BANK7            80      0      58
    BANK8            80      0      80
    BANK9            80      0      80
    BANK10           80      0      58
    BANK11           80      0      58
    BANK12           50      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> floor@expon(BANK1[2]), trunc@expon(BANK1[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 64
		 -> myBuf(BANK6[64]), 

    FLASH_WriteWord@ramBuf	PTR unsigned int  size(1) Largest target is 64
		 -> myBuf(BANK6[64]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_set_leds_top

Critical Paths under _main in BANK0

    _main->_sin
    _wait_ms->___lmul
    _sin->_floor
    _eval_poly->___ftadd
    ___ftsub->_floor
    ___awtoft->___awdiv
    _round->_sin
    ___fttol->_map
    ___altoft->___ftpack
    _modulation->___aldiv
    ___aldiv->___wmul
    _map->___ftdiv
    ___ftneg->___altoft
    ___ftmul->___ftneg
    ___ftdiv->_eval_poly
    ___ftadd->___ftmul
    _FLASH_WriteWord->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_round
    _sin->___ftsub
    _floor->___fttol
    ___ftsub->_floor
    _set_subdivision->___fttol
    _round->_sin
    _trunc->___fttol
    ___fttol->_map

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                67    67      0   92825
                                             62 BANK1     15    15      0
                                              0 BANK2     37    37      0
                _ConfigureOscillator
                     _FLASH_ReadWord
                    _FLASH_WriteWord
                            _InitApp
                            ___aldiv
                           ___altoft
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                        _adc_convert
                                _map
                         _modulation
                              _round
                    _set_leds_bottom
                       _set_leds_top
                    _set_subdivision
                                _sin
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _wait_ms                                              2     0      2     754
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     220
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _sin                                                 14    11      3   38181
                                             78 BANK0      1     1      0
                                             43 BANK1     13    10      3
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (2) _floor                                                9     6      3    9601
                                             77 BANK0      1     1      0
                                             29 BANK1      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     878
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _eval_poly                                           10     3      7   10134
                                             48 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4552
                                             37 BANK1      6     0      6
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      4     0      4    9654
                                             29 BANK1      4     0      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3224
                                              9 BANK0      6     3      3
                            ___awdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _set_leds_top                                         4     0      4     540
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _set_leds_bottom                                      2     0      2     150
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _round                                                6     3      3    9483
                                             56 BANK1      6     3      3
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftmul (ARG)
                            ___ftneg
                                _sin (ARG)
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    4470
                                             77 BANK0      1     1      0
                                             29 BANK1      8     5      3
                           ___altoft
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     464
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1276
                                             15 BANK1     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2439
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _modulation                                          12     8      4    1227
                                             21 BANK0     12     8      4
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     476
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     556
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14510
                                             74 BANK0      3     3      0
                                              0 BANK1     15     0     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     544
                                             16 BANK0      3     0      3
                           ___altoft (ARG)
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    4867
                                             19 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2773
                                             58 BANK0     16    10      6
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    4229
                                             35 BANK0     13     7      6
                           ___altoft (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     556
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FLASH_WriteWord                                     10     5      5    1505
                                             13 BANK0     10     5      5
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteBlock                                    10     7      3     572
                                              3 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     131
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     259
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0     236
                                              4 COMMON     5     5      0
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _FLASH_ReadWord
   _FLASH_WriteWord
     _FLASH_ReadWord
     _FLASH_WriteBlock
       _FLASH_EraseBlock
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   ___aldiv
     ___wmul (ARG)
   ___altoft
     ___ftpack
   ___awdiv
   ___awtoft
     ___awdiv (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftpack (ARG)
     _eval_poly (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___wmul
   ___ftmul
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___wmul
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___wmul
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _adc_convert
   _map
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___wmul
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _modulation
     ___aldiv
       ___wmul (ARG)
     ___wmul
   _round
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     _sin (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___wmul
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___altoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _eval_poly (ARG)
                 ___ftadd
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___wmul
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             _map (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _eval_poly (ARG)
                   ___ftadd
                     ___altoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___awdiv (ARG)
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___altoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___wmul
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           _frexp
       _eval_poly (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___wmul
       _floor (ARG)
         ___altoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___wmul
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _eval_poly (ARG)
                 ___ftadd
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___wmul
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
         _frexp
     _trunc (ARG)
       ___altoft
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___wmul
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___wmul
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
       _frexp (ARG)
   _set_leds_bottom
   _set_leds_top
   _set_subdivision
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
           ___ftadd
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___wmul
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___wmul
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
   _sin
     ___awtoft (ARG)
       ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___wmul
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       _floor (ARG)
         ___altoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___wmul
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _eval_poly (ARG)
                 ___ftadd
                   ___altoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___awdiv (ARG)
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___altoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___wmul
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
         _frexp
     _eval_poly (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___wmul
     _floor (ARG)
       ___altoft
         ___ftpack
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___fttol
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _eval_poly (ARG)
             ___ftadd
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___wmul
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _eval_poly (ARG)
               ___ftadd
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___awdiv (ARG)
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___altoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___awdiv (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___wmul
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
       _frexp
   _wait_ms
     ___lmul

 _isr (ROOT)
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4D      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     25      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      34      13       65.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      3C      15       75.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     346      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      40      18       80.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3A      20       72.5%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      50      22      100.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      50      24      100.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3A      26       72.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     346      28        0.0%
BANK11              50      0      3A      29       72.5%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              32      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Jun 21 23:32:59 2016

                  ___altoft@exp 002E                     __CFG_CP$OFF 0000                   ___altoft@sign 002F  
                  ___awdiv@sign 0026             ___wmul@multiplicand 0022                    ___ftadd@exp1 004F  
                  ___ftadd@exp2 004E                    ___ftadd@sign 004D                             l211 15D6  
                           l212 15E8                             l223 09AF                             l400 1D0B  
                           l304 1ACE                             l401 1D12                             l402 1D19  
                           l218 095F                             l403 1D3A                             l420 1F45  
                           l228 09F7                             l421 1F52                             l422 1F5F  
                           l270 0F1C                             l254 0BE2                             l431 19B2  
                           l423 1F6C                             l424 1F79                             l408 07FB  
                           l425 1F9A                             l546 1132                             l483 10A7  
          __size_of_adc_convert 0019                             l491 080A                             l660 1FE9  
                           l652 1FCE                             l396 1CF6                             l398 1CFD  
                           l743 1210                             l399 1D04                             l659 1FE1  
                           l683 08BC                             l863 173A                             _PR2 001B  
                           _map 1438                             _isr 0004                             _tap 0220  
                           _sin 1623                    __CFG_BORV$LO 0000                             wreg 0009  
                  __CFG_IESO$ON 0000                ?_FLASH_WriteWord 002D                    __CFG_FOSC$HS 0000  
       __end_of_set_leds_bottom 1D3B  FLASH_WriteBlock@flashWordArray 0025                    __CFG_LVP$OFF 0000  
                  ___ftdiv@cntr 0064                    ___ftdiv@sign 0069                            _B25k 0420  
                          l3021 07B3                            l3013 06FA                            l2303 1FAB  
                          l3015 0729                            l2313 1FD3                            l2305 1FB5  
                          l3017 0757                            l3025 07E1                            l3201 15A1  
                          l2315 1FDB                            l2307 1FBA                            l3019 0785  
                          l3045 1DF1                            l2405 085B                            l3301 0A3D  
                          l3221 15B9                            l3071 1E28                            l3063 1E17  
                          l3055 1DF9                            l3039 1DE6                            l2423 0888  
                          l2503 13EC                            l3303 0A67                            l3057 1E05  
                          l2441 08CE                            l2425 0892                            l2417 0875  
                          l2361 0804                            l3401 0DB0                            l3305 0A76  
                          l3313 0A8B                            l3233 15F7                            l3067 1E20  
                          l2435 08AE                            l2427 0897                            l2515 1408  
                          l2507 13F4                            l3331 0AD1                            l3315 0A99  
                          l3235 0913                            l2445 08E0                            l2437 08B8  
                          l2429 089B                            l3421 0ED7                            l3413 0E52  
                          l3405 0DF0                            l3341 0B19                            l3325 0AC0  
                          l3317 0AA7                            l3309 0A7F                            l3261 0985  
                          l3253 0969                            l2455 08FB                            l2519 1410  
                          l2711 1143                            l2383 1C4E                            l2535 11BC  
                          l2463 1BD8                            l3511 04B8                            l3319 0AAF  
                          l3247 093E                            l3239 0922                            l2721 1161  
                          l2385 1C5E                            l2561 1207                            l2553 11EC  
                          l3513 045B                            l3441 0F88                            l3425 0F17  
                          l3417 0E8A                            l3353 0BA0                            l3361 0BE6  
                          l3281 09FE                            l3193 1579                            l2299 1FA4  
                          l2395 0845                            l2491 13B1                            l2563 1213  
                          l2555 11FA                            l2467 1BEE                            l3515 04BE  
                          l3451 0222                            l3443 0F8B                            l3347 0B27  
                          l3275 09E9                            l2485 139B                            l2733 118C  
                          l2901 1F80                            l3461 02CB                            l3349 0B81  
                          l3269 09B9                            l2671 1092                            l2399 084C  
                          l2719 1153                            l2567 1221                            l2807 1A26  
                          l3623 03DA                            l3471 03A9                            l3439 0F77  
                          l3383 0C72                            l3279 09FB                            l2737 119A  
                          l2729 1181                            l2577 1AEA                            l3625 07E7  
                          l3393 0D4E                            l3289 0A26                            l3369 0BF6  
                          l2659 106A                            l2819 1E4A                            l2923 1D20  
                          l3627 1F86                            l2843 130F                            l3475 03B3  
                          l3491 03D5                            l2941 1011                            l2765 1257  
                          l3629 1D26                            l2749 1A07                            l2853 137C  
                          l2693 1A8F                            l3485 03CF                            l3493 03EE  
                          l3389 0D0E                            ?_map 00A0                            l2759 1241  
                          l2863 1F31                            l2839 1307                            l3487 03D2  
                          l3479 03BE                            l2689 1A85                            l3497 042A  
                          l2947 102F                            l2787 12B1                            l2779 1298  
                          l2971 1658                            l2869 1F39                            l2983 16F6  
                          ?_isr 0070                            ?_sin 00CB                            u2005 1FC9  
                          u2025 1FD6                            u2105 0810                            u2135 1C53  
                          u2065 1FF0                            u2305 089C                            u3060 16F0  
                          u2245 0876                            u3070 16F1                            u3135 1DFC  
                          u2335 08AF                            u2095 080B                            u3320 1577  
                          u2505 1411                            u3155 1E06                            u2275 0889  
                          u2515 1417                            u2435 13BD                            u3165 1E10  
                          u2445 13CD                            u2605 1208                            u3405 0937  
                          u3175 1E18                            u2465 13F5                            u2545 11C3  
                          u2705 1A97                            u2475 13FB                            u3435 097E  
                          u2645 1056                            u3470 09D5                            u2575 11ED  
                          u3535 0A11                            u3375 15C5                            u3480 09D6  
                          u3705 0B35                            u3465 09CC                            u3385 1606  
                          u3490 09E7                            u2755 1156                            u3715 0B86  
                          u3555 0A52                            u3805 0E88                            u3645 0ADD  
                          u3565 0A4B                            u2855 1269                            u2775 1162  
                          u2695 1A90                            u3815 0EF5                            u3735 0C50  
                          u3655 0AF2                            i1l41 013B                            i1l33 007E  
                          u1985 1FB0                            u2865 1279                            u2785 1176  
                          u3833 0F44                            u3825 0F15                            u3745 0C70  
                          u3665 0B02                            u2875 1299                            u2795 1182  
                          u3755 0D2C                            u3675 0B3C                            i1l45 0159  
                          u2885 12A8                            u3845 0F66                            u3765 0D4C  
                          u3685 0B53                            i1l38 0109                            u2895 12B2  
                          u3855 0F74                            u3775 0DCE                            u3695 0B69  
                          u3865 0F86                            u3785 0DEE                            u3795 0E6C  
                          u3893 04A9                            u3885 0491                    __CFG_WRT$OFF 0000  
                 __CFG_FCMEN$ON 0000                            _iCnt 0151                            _mod1 02A0  
                          _mod2 0520                            _mod3 05A0                            _mod4 03A0  
                          _main 14F1                    ___ftpack@arg 0020                    ___ftpack@exp 0023  
                          fsr0h 0005                            fsr1h 0007                            fsr0l 0004  
                          indf0 0000                            indf1 0001                            fsr1l 0006  
                          map@x 00A0                            btemp 007E               ?_FLASH_WriteBlock 0023  
                 __CFG_BOREN$ON 0000                            sin@f 00CB                            sin@y 00CE  
                          ltemp 007E                            start 015E                            ttemp 007E  
                          wtemp 007E              ??_FLASH_WriteBlock 0026                 ?i1_set_leds_top 0070  
                 __CFG_MCLRE$ON 0000                    ___ftmul@cntr 0041                    ___ftmul@sign 0042  
               __end_of_InitApp 1A7C                    ___fttol@exp1 00BC                           ??_map 006A  
                  ___fttol@lval 00B8                           ??_isr 0074                           ??_sin 006E  
               __end_of___aldiv 11A3                           ?_main 0070                 __end_of___awdiv 1E2D  
               __end_of___ftadd 0913                           _CCPR1 0291                           _CCPR2 0298  
                         _CCPR3 0311                           _CCPR4 0318                           _CCPR5 031C  
                         _CCPR9 061A                   __CFG_WDTE$OFF 0000                 __end_of___ftdiv 12D3  
               __end_of___ftneg 195D                 __end_of___ftmul 1438                 ___awdiv@divisor 0020  
               __end_of___ftsub 1A4C                 __end_of___fttol 122A                           i1l420 1E8B  
                         i1l421 1E96                           i1l422 1EA1                           i1l423 1EAC  
                         i1l424 1EB7                           i1l425 1ED7                 ___awdiv@counter 0025  
            __end_ofsin@coeff_a 200F              __end_ofsin@coeff_b 201B                           _iB25k 04A0  
           _ConfigureOscillator 1940               main@tapCntDivisor 0122                    ?_init_timer0 0070  
                  ?_init_timer2 0070             ___lmul@multiplicand 0024                   ___awtoft@sign 002E  
                         _delay 23F2                           _floor 12D3                           _frexp 1ADD  
                         _myBuf 0320                           _errno 01D2                   ___ftpack@sign 0024  
                         _timer 0149                           _round 10B0                           main@i 0120  
                         _trunc 1E2D                           sin@x2 00D4                           ltemp0 007E  
                         ltemp1 0082                           ltemp2 0086                           ltemp3 0080  
               __end_of_wait_ms 1ADD                           ttemp0 007E                           ttemp1 0081  
                         ttemp2 0084                           ttemp3 0087                           ttemp4 007F  
                         status 0003                           wtemp0 007E                           wtemp1 0080  
                         wtemp2 0082                           wtemp3 0084                           wtemp4 0086  
                         wtemp5 0088                           wtemp6 007F            ?_ConfigureOscillator 0070  
               __initialization 0160              _bypass_flash_timer 01B4                    __end_of_main 04FB  
                __CFG_LPBOR$OFF 0000                 _set_subdivision 06F9                          ??_main 00DE  
                 ___fttol@sign1 00B7         __size_of_FLASH_ReadWord 0020                ?_set_leds_bottom 0020  
                        ?_floor 00BD       FLASH_WriteBlock@writeAddr 0023                          ?_frexp 0020  
              __end_of___altoft 1C76                          _ADRESH 009C                          _ADRESL 009B  
              ___awdiv@dividend 0022             _baseline_delay_time 015D                __end_of___awtoft 1A1E  
              __end_of___ftpack 2000                          ?_round 00D8                          ?_trunc 00BD  
                        i1l3109 1EBE                          i1l3125 009E                          i1l3151 0131  
                        i1l3135 00D8                          i1l3127 00AD                          i1l3137 00E7  
                        i1l3129 00AF                          i1l3139 00F1                          i1l3077 1E80  
                        i1l3157 013C                          i1l3159 0146                          i1l3631 1EC3  
                        u321_23 0091                          u323_23 00C2                          u331_25 0150  
                        u327_25 0113                          _PMADRH 0192                          u328_25 011F  
                        _PMADRL 0191                          _PMDATH 0194                          _PMDATL 0193  
                        _PMCON2 0196       __size_of_FLASH_EraseBlock 0020                  _debounce_count 01CC  
                     ??_InitApp 0020           ??_ConfigureOscillator 0020                  __CFG_PWRTE$OFF 0000  
                        ___ftge 1BC1                          ___lmul 1A7C                       ??___aldiv 002E  
                        ___wmul 0801   FLASH_WriteWord@blockStartAddr 0034                       ??___awdiv 0024  
                     ??___ftadd 0049                  __CFG_STVREN$ON 0000                       ??___ftdiv 0060  
                     ??___ftneg 0033                       ??___ftmul 0039                       ??___ftsub 006E  
                     ??___fttol 00B3             FLASH_WriteWord@word 0030                __end_of_init_adc 1967  
              __end_of_init_pwm 1CF5                ___awdiv@quotient 0027                          _preset 01D8  
                 _incoming_data 01E0                    __pdataBANK10 0520                    __pdataBANK11 05A0  
                        floor@i 00C0                          floor@x 00BD           ___ftmul@f3_as_product 003E  
                  __pdataBIGRAM 23F2         FLASH_ReadWord@flashAddr 0020                          sin@sgn 00D7  
                     ??_wait_ms 002E                          round@f 00DB                          round@x 00D8  
                 main@step_size 0126                          trunc@i 00C0                          trunc@x 00BD  
       __end_of__initialization 021E                      ___altoft@c 0028                      ___ftadd@f1 0043  
                    ___ftadd@f2 0046                      ___ftge@ff1 0020                      ___ftge@ff2 0023  
                  eval_poly@res 0057                      ___ftdiv@f1 005D                      ___ftdiv@f2 005A  
                    ___ftdiv@f3 0065                  _top_push_state 016D                      ___ftneg@f1 0030  
                    ___awtoft@c 0029         __end_of_set_subdivision 07FC                      ___ftmul@f1 0033  
                    ___ftmul@f2 0036                      ___ftsub@f1 00C8                      ___ftsub@f2 00C5  
                    ___fttol@f1 00AF                  __pcstackCOMMON 0070                    __pidataBANK2 1991  
                  __pidataBANK3 197F                    __pidataBANK4 07FC                    __pidataBANK5 1BFD  
                  __pidataBANK7 1B87                    __pidataBANK8 1D8B                    __pidataBANK9 1D3B  
                 __end_of_floor 1384                FLASH_WriteWord@i 0036                   __end_of_frexp 1B13  
                 __end_of_round 1121                   __end_of_trunc 1E7F                  _OPTION_REGbits 0095  
   FLASH_WriteBlock@GIEBitValue 002B                         ??_floor 006D                         ??_frexp 0024  
          __size_of_init_timer0 0007            __size_of_init_timer2 0009                         ??_round 006F  
                       ??_trunc 006D                      __pbssBANK1 00ED                      __pbssBANK2 0145  
                    __pbssBANK3 01A0                      __pbssBANK4 0220                      __pbssBANK6 0320  
            __size_of_eval_poly 0060                ??i1_set_leds_top 0074                 __CFG_VCAPEN$OFF 0000  
                    _delay_time 0161                      _delayfound 01D0                      __pmaintext 14F1  
                       ?___ftge 0020                         ?___lmul 0020                         ?___wmul 0020  
                    __pintentry 0004                   ??_adc_convert 0022                       ?___altoft 0028  
                ___lmul@product 0028                       ?___awtoft 0029                       ?___ftpack 0020  
     __size_of_FLASH_WriteBlock 006B                  _FLASH_ReadWord 19BC                     modulation@x 0035  
                   modulation@y 0037                 _debounce_bypass 01CA                _FLASH_EraseBlock 19DC  
      __size_of_FLASH_WriteWord 0045                       ?_init_adc 0070                       ?_init_pwm 0070  
                       _InitApp 1A4C                   ?_set_leds_top 0020                      _knob1_prev 0167  
                    _knob2_prev 01E2                      _knob3_prev 01E4                      _knob4_prev 01E6  
                    _knob5_prev 01E8                ?_set_subdivision 00BD                         ___aldiv 1121  
               __size_of___ftge 003C                         ___awdiv 1DDB                 __size_of___lmul 0030  
                       ___ftadd 081D                         ___ftdiv 122A                         ___ftneg 1954  
                    _knob_1_pos 0153                      _knob_2_pos 0155                 __size_of___wmul 001C  
                       ___ftmul 1384                      _knob_3_pos 0157                         ___ftsub 1A1E  
                       ___fttol 11A3                      _knob_4_pos 00ED                      _knob_5_pos 01D4  
                    ??___altoft 002C          __end_of_FLASH_ReadWord 19DC                      ??___awtoft 002C  
                    ??___ftpack 0025               __end_of_eval_poly 1F38                         __ptext1 1AAC  
                       __ptext2 1A7C                         __ptext3 1623                         __ptext4 12D3  
                       __ptext5 1BC1                         __ptext6 1ED8                         __ptext7 1A1E  
                       __ptext8 06F9                         __ptext9 19FC                       _T2CONbits 001C  
                  __size_of_map 00B9                    __size_of_isr 015A                    __size_of_sin 01DD  
           __end_of_adc_convert 19BC                ___aldiv@dividend 002A                         _wait_ms 1AAC  
                       clrloop0 1974            end_of_initialization 021E                      _modulation 1C76  
                       init_ram 1967                      ??_init_adc 0020                         initloop 1968  
                    ??_init_pwm 0020                    _flash_saving 014F                  ??_set_leds_top 0024  
        i1set_leds_top@ledState 0072                ___aldiv@quotient 0031                         psplit$0 23004B  
                       psplit$1 23004C                     wait_ms@time 002C                    __pstringtext 2000  
     FLASH_ReadWord@GIEBitValue 0022                 ?_FLASH_ReadWord 0020                       _PORTBbits 000D  
                     _PORTDbits 000F                       _PORTEbits 0010                       _TRISBbits 008D  
                     _TRISCbits 008E                       _TRISDbits 008F                       _TRISEbits 0090  
                     _TRISFbits 030C                       _TRISGbits 030D                       _SPI_Value 01C8  
          pnum$maintext_split_1 004B            pnum$maintext_split_2 004C     __end_of_ConfigureOscillator 1944  
                    map@out_max 00AC                      map@out_min 00A9                     _CCP1CONbits 0293  
                   ___ftdiv@exp 0068        __size_of_set_leds_bottom 0046                     _CCP2CONbits 029A  
                   _CCP3CONbits 0313                     _CCP4CONbits 031A                     _CCP5CONbits 031E  
             FLASH_WriteBlock@i 002C                     _CCP6CONbits 0613                     _CCP7CONbits 0616  
                   ___ftmul@exp 003D              adc_convert@channel 0023                     _CCP8CONbits 0619  
             ??_FLASH_WriteWord 0032                     _CCP9CONbits 061C            set_leds_top@ledState 0022  
                 __pidataBANK10 1B4D                   __pidataBANK11 1B13                  __end_of___ftge 1BFD  
                __end_of___lmul 1AAC                   __pidataBIGRAM 04FB                  __end_of___wmul 081D  
                   _adc_convert 19A3                _FLASH_WriteBlock 1045                      floor@expon 00C3  
           start_initialization 0160                      eval_poly@d 0053                      eval_poly@n 0055  
                    eval_poly@x 0050                     __end_of_map 14F1                     __end_of_isr 015E  
                   __end_of_sin 1800                     ?_modulation 0035                      frexp@value 0020  
                _temp_tap_count 01DA                        ??___ftge 0026                        ??___lmul 0028  
                      ??___wmul 0024                     __pdataBANK2 015D                     __pdataBANK3 01DC  
                   __pdataBANK4 0250                     __pdataBANK5 02A0                     __pdataBANK7 03A0  
                   __pdataBANK8 0420                     __pdataBANK9 04A0     FLASH_EraseBlock@GIEBitValue 0022  
                 _tap_iteration 016B        __end_of_FLASH_EraseBlock 19FC               __size_of___altoft 003D  
             __size_of___awtoft 0022               __size_of___ftpack 0065                   ??_init_timer0 0020  
                 ??_init_timer2 0020                     __pbssCOMMON 0079            __end_of_set_leds_top 1F9B  
                     ___latbits 0003                    _bypass_state 014D                   __pcstackBANK0 0020  
                 __pcstackBANK1 00A0                   __pcstackBANK2 0120                   _delay_counter 01CE  
                    sin@coeff_a 2000                      sin@coeff_b 200F                        ?_InitApp 0070  
             __size_of_init_adc 000A               __size_of_init_pwm 0041                       _main$1660 0134  
                     _main$1661 0137                       _main$1662 013A                       _main$1663 013D  
                     _main$1664 0140                        ?___aldiv 0026               ??_set_leds_bottom 0022  
                      ?___awdiv 0020                        ?___ftadd 0043                        ?___ftdiv 005A  
                      ?___ftneg 0030                        ?___ftmul 0033                        ?___ftsub 00C5  
                      ?___fttol 00AF             __size_of_modulation 003E                     _blink_state 01DC  
                     _eval_poly 1ED8                        _CCPTMRS0 029D                        _CCPTMRS1 029E  
                      _CCPTMRS2 029F                        ?_wait_ms 002C             main@fancy_mod_cycle 0130  
                __size_of_floor 00B1                  __size_of_frexp 0036                  __size_of_round 0071  
                __size_of_trunc 0052        FLASH_WriteWord@flashAddr 002D  FLASH_WriteBlock@blockStartAddr 0029  
           __end_of_init_timer0 194B             __end_of_init_timer2 1954                       _mod_value 01D6  
                     _mod_timer 01B8                 ___aldiv@divisor 0026                 ___aldiv@counter 002F  
                ___wmul@product 0024                        _LATBbits 010D                        _LATCbits 010E  
                      _LATDbits 010F                        _LATFbits 038C                        _LATGbits 038D  
                _mod_delay_time 01EA                       clear_ram0 1973                       _tap_timer 0079  
                     _tap_total 01C0                   set_leds_top@x 0020       FLASH_EraseBlock@startAddr 0020  
              ??_FLASH_ReadWord 0022         __size_ofi1_set_leds_top 0059                       map@in_max 00A6  
                     map@in_min 00A3                       _sub_timer 0145                      _ADCON0bits 009D  
                    _ADCON1bits 009E                       main@i_407 012C                       main@i_408 012E  
      __size_of_set_subdivision 0103               ___wmul@multiplier 0020                set_subdivision@x 00BD  
              set_subdivision@y 00BF                       main@count 0143                      ?_eval_poly 0050  
             ___lmul@multiplier 0020                 _FLASH_WriteWord 1000        __end_of_FLASH_WriteBlock 10B0  
                     frexp@eptr 0023                   _temp_tap_time 024C                __size_of_InitApp 0030  
                    _APFCONbits 011D                __size_of___aldiv 0082                    pnum$maintext 0023  
              __size_of___awdiv 0052                __size_of___ftadd 00F6                __size_of___ftdiv 00A9  
                  ?_adc_convert 0020                __size_of___ftneg 0009                        ___altoft 1C39  
              __size_of___ftmul 00B4                __size_of___ftsub 002E                __size_of___fttol 0087  
                      ___awtoft 19FC           __size_of_set_leds_top 0063                        ___ftpack 1F9B  
                      _map$1665 006A                      _ANSELBbits 018D                      _ANSELEbits 0190  
              set_leds_bottom@x 0020                     _init_timer0 1944                     _init_timer2 194B  
            _delay_time_changed 01DE                        __ptext10 1F38                        __ptext11 1CF5  
                      __ptext20 1438                        __ptext12 10B0                        __ptext21 1954  
                      __ptext13 1E2D                        __ptext30 194B                        __ptext22 1384  
                      __ptext14 1ADD                        __ptext31 1944                        __ptext23 122A  
                      __ptext15 11A3                        __ptext32 195D                        __ptext24 081D  
                      __ptext16 1C39                        __ptext33 1000                        __ptext25 1F9B  
                      __ptext17 1C76                        __ptext34 1045                        __ptext26 19A3  
                      __ptext18 0801                        __ptext35 19DC                        __ptext27 1DDB  
                      __ptext19 1121                        __ptext36 19BC                        __ptext28 1A4C  
                      __ptext37 1940                        __ptext29 1CB4                        __ptext39 1E7F  
                      _sin$1666 00D1                __size_of_wait_ms 0031           FLASH_WriteWord@ramBuf 002F  
         FLASH_WriteWord@offset 0033                    ??_modulation 0039                     _mod_counter 0159  
                    trunc@expon 00C3                        _init_adc 195D                   __size_of_main F00A  
                      _init_pwm 1CB4    __size_of_ConfigureOscillator 0004                    _saving_state 015B  
                  _set_leds_top 1F38                        _num_taps 0169                        int$flags 007E  
               i1set_leds_top@x 0070                        main@freq 0132               ?_FLASH_EraseBlock 0020  
            __end_of_modulation 1CB4              ??_FLASH_EraseBlock 0022                      _INTCONbits 000B  
                   ??_eval_poly 0057         __end_of_FLASH_WriteWord 1045                  _mod1_amplitude 0250  
                   _tap_history 01A0               ??_set_subdivision 006D                        intlevel1 0000  
               _set_leds_bottom 1CF5                      _PMCON1bits 0195               __CFG_CLKOUTEN$OFF 0000  
                    _OSCCONbits 0099                  i1_set_leds_top 1E7F                    wait_ms@timel 01C4  
                  ___aldiv@sign 0030              main@rad_conversion 0129          main@adjusted_pot_value 0124  
                  _CCP10CONbits 061F               _bottom_push_state 0165             _tap_longpress_timer 01BC  
            _tap_longpress_time 01EC          __end_ofi1_set_leds_top 1ED8  
